{"version":3,"sources":["../../src/middleware/promise.js"],"names":["global","require","Cancel","CancelToken","isCancel","promise","options","Promise","implementation","Error","onReturn","channels","context","resolve","reject","cancel","cancelToken","then","reason","abort","publish","error","subscribe","response","onlyBody","body","setTimeout","request","module","exports"],"mappings":";;AAAA,MAAMA,SAASC,QAAQ,gBAAR,CAAf;AACA,MAAMC,SAASD,QAAQ,iBAAR,CAAf;AACA,MAAME,cAAcF,QAAQ,sBAAR,CAApB;AACA,MAAMG,WAAWH,QAAQ,mBAAR,CAAjB;;AAEA,MAAMI,UAAU,SAAVA,OAAU,GAAkB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAChC,QAAMC,UAAUD,QAAQE,cAAR,IAA0BR,OAAOO,OAAjD;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAU,8EAAV,CAAN;AACD;;AAED,SAAO;AACLC,cAAU,CAACC,QAAD,EAAWC,OAAX,KACR,IAAIL,OAAJ,CAAY,CAACM,OAAD,EAAUC,MAAV,KAAqB;AAC/B,YAAMC,SAASH,QAAQN,OAAR,CAAgBU,WAA/B;AACA,UAAID,MAAJ,EAAY;AACVA,eAAOV,OAAP,CAAeY,IAAf,CAAoBC,UAAU;AAC5BP,mBAASQ,KAAT,CAAeC,OAAf,CAAuBF,MAAvB;AACAJ,iBAAOI,MAAP;AACD,SAHD;AAID;;AAEDP,eAASU,KAAT,CAAeC,SAAf,CAAyBR,MAAzB;AACAH,eAASY,QAAT,CAAkBD,SAAlB,CAA4BC,YAAY;AACtCV,gBAAQP,QAAQkB,QAAR,GAAmBD,SAASE,IAA5B,GAAmCF,QAA3C;AACD,OAFD;;AAIA;AACAG,iBAAW,MAAMf,SAASgB,OAAT,CAAiBP,OAAjB,CAAyBR,OAAzB,CAAjB,EAAoD,CAApD;AACD,KAhBD;AAFG,GAAP;AAoBD,CA1BD;;AA4BAP,QAAQH,MAAR,GAAiBA,MAAjB;AACAG,QAAQF,WAAR,GAAsBA,WAAtB;AACAE,QAAQD,QAAR,GAAmBA,QAAnB;;AAEAwB,OAAOC,OAAP,GAAiBxB,OAAjB","file":"promise.js","sourcesContent":["const global = require('../util/global')\nconst Cancel = require('./cancel/Cancel')\nconst CancelToken = require('./cancel/CancelToken')\nconst isCancel = require('./cancel/isCancel')\n\nconst promise = (options = {}) => {\n  const Promise = options.implementation || global.Promise\n  if (!Promise) {\n    throw new Error('`Promise` is not available in global scope, and no implementation was passed')\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new Promise((resolve, reject) => {\n        const cancel = context.options.cancelToken\n        if (cancel) {\n          cancel.promise.then(reason => {\n            channels.abort.publish(reason)\n            reject(reason)\n          })\n        }\n\n        channels.error.subscribe(reject)\n        channels.response.subscribe(response => {\n          resolve(options.onlyBody ? response.body : response)\n        })\n\n        // Wait until next tick in case cancel has been performed\n        setTimeout(() => channels.request.publish(context), 0)\n      })\n  }\n}\n\npromise.Cancel = Cancel\npromise.CancelToken = CancelToken\npromise.isCancel = isCancel\n\nmodule.exports = promise\n"]}