'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function makeEmpty(param) {
  return /* array */[];
}

function makeUninitialized(prim) {
  return new Array(prim);
}

function size(prim) {
  return prim.length;
}

function getUnsafe(prim, prim$1) {
  return prim[prim$1];
}

function setUnsafe(prim, prim$1, prim$2) {
  prim[prim$1] = prim$2;
  return /* () */0;
}

function fill(arr, x) {
  return Belt_Array.fill(arr, 0, arr.length, x);
}

function copy(prim) {
  return prim.slice(0);
}

function slice(arr, start, end_) {
  var len = end_ - start | 0;
  return Belt_Array.slice(arr, start, len);
}

function append(arr, x) {
  return Belt_Array.concat(arr, /* array */[x]);
}

function somei(arr, f) {
  var len = arr.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return false;
    } else if (Curry._2(f, arr[i], i)) {
      return true;
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function everyi(arr, f) {
  var len = arr.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return true;
    } else if (Curry._2(f, arr[i], i)) {
      _i = i + 1 | 0;
      continue ;
    } else {
      return false;
    }
  };
}

function findi(arr, f) {
  var len = arr.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return undefined;
    } else {
      var x = arr[i];
      if (Curry._2(f, x, i)) {
        return Caml_option.some(x);
      } else {
        _i = i + 1 | 0;
        continue ;
      }
    }
  };
}

function findIndex(arr, f) {
  var len = arr.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return -1;
    } else if (Curry._1(f, arr[i])) {
      return i;
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function lastIndexOf(arr, x) {
  var len = arr.length;
  var _i = len - 1 | 0;
  while(true) {
    var i = _i;
    if (i < 0) {
      return -1;
    } else if (x === arr[i]) {
      return i;
    } else {
      _i = i - 1 | 0;
      continue ;
    }
  };
}

function filteri(arr, f) {
  var len = arr.length;
  var res = new Array(len);
  var j = /* record */[/* contents */-1];
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      res.length = j[0] + 1 | 0;
      return res;
    } else {
      var x = arr[i];
      if (Curry._2(f, x, i)) {
        j[0] = j[0] + 1 | 0;
        arr[j[0]] = x;
      }
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function removeCount(arr, pos, count) {
  var len = arr.length;
  var pos2 = (pos + count | 0) - 1 | 0;
  var res = new Array(len - count | 0);
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return res;
    } else if (i >= pos && i <= pos2) {
      _i = i + 1 | 0;
      continue ;
    } else {
      var match = i > pos2;
      var j = match ? i - count | 0 : i;
      arr[j] = arr[i];
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function find(arr, f) {
  return findi(arr, (function (x, _i) {
                return Curry._1(f, x);
              }));
}

function indexOf(arr, x) {
  return findIndex(arr, (function (item) {
                return item === x;
              }));
}

function includes(arr, x) {
  return findIndex(arr, (function (item) {
                return item === x;
              })) > -1;
}

function filter(arr, f) {
  return filteri(arr, (function (x, _i) {
                return Curry._1(f, x);
              }));
}

function remove(arr, index) {
  return removeCount(arr, index, 1);
}

function mapi(arr, f) {
  return Belt_Array.mapWithIndexU(arr, (function (i, x) {
                return Curry._2(f, x, i);
              }));
}

function forEachi(arr, f) {
  return Belt_Array.forEachWithIndexU(arr, (function (i, x) {
                return Curry._2(f, x, i);
              }));
}

function reduce(arr, reducer, acc) {
  return Belt_Array.reduce(arr, acc, reducer);
}

function reducei(arr, reducer, acc) {
  return Belt_Array.reduceWithIndex(arr, acc, reducer);
}

function reduceRight(arr, reducer, acc) {
  return Belt_Array.reduceReverse(arr, acc, reducer);
}

var make = Belt_Array.make;

var get = Belt_Array.get;

var set = Belt_Array.set;

var reverseInPlace = Belt_Array.reverseInPlace;

var reverse = Belt_Array.reverse;

var shuffle = Belt_Array.shuffle;

var shuffleInPlace = Belt_Array.shuffleInPlace;

var sliceFrom = Belt_Array.sliceToEnd;

var concat = Belt_Array.concat;

var some = Belt_Array.some;

var every = Belt_Array.every;

var map = Belt_Array.map;

var forEach = Belt_Array.forEach;

exports.makeEmpty = makeEmpty;
exports.makeUninitialized = makeUninitialized;
exports.make = make;
exports.size = size;
exports.get = get;
exports.getUnsafe = getUnsafe;
exports.set = set;
exports.setUnsafe = setUnsafe;
exports.fill = fill;
exports.reverseInPlace = reverseInPlace;
exports.reverse = reverse;
exports.shuffle = shuffle;
exports.shuffleInPlace = shuffleInPlace;
exports.copy = copy;
exports.slice = slice;
exports.sliceFrom = sliceFrom;
exports.concat = concat;
exports.append = append;
exports.somei = somei;
exports.everyi = everyi;
exports.findi = findi;
exports.findIndex = findIndex;
exports.lastIndexOf = lastIndexOf;
exports.filteri = filteri;
exports.removeCount = removeCount;
exports.find = find;
exports.indexOf = indexOf;
exports.includes = includes;
exports.filter = filter;
exports.remove = remove;
exports.some = some;
exports.every = every;
exports.map = map;
exports.mapi = mapi;
exports.forEach = forEach;
exports.forEachi = forEachi;
exports.reduce = reduce;
exports.reducei = reducei;
exports.reduceRight = reduceRight;
/* No side effect */
