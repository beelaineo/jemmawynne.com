"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const tar = require("tar");
const fs = require("fs");
const tmp = require("tmp");
const path = require("path");
const mkdirp = require("mkdirp");
const __1 = require("../");
describe('bin', () => {
    beforeEach(() => {
        jest.restoreAllMocks();
    });
    test('loadTemplate loads template correctly', () => __awaiter(this, void 0, void 0, function* () {
        const res = yield __1.loadTemplate({
            name: 'test-template',
            description: 'test-description',
            repo: {
                branch: 'test-branch',
                uri: 'test-uri',
                path: 'test-path',
            },
        }, 'path');
        expect(res).toEqual({
            status: 'ok',
            message: 'Successfully installed template.',
        });
    }));
    test('loadTemplate returns error on bad download', () => __awaiter(this, void 0, void 0, function* () {
        /**
         * Mocks
         */
        const mockTmpFileSync = jest
            .spyOn(tmp, 'fileSync')
            .mockImplementation(() => {
            throw new Error('pass');
        });
        /**
         * Execution
         */
        const res = yield __1.loadTemplate({
            name: 'test-template',
            description: 'test-description',
            repo: {
                branch: 'test-branch',
                uri: 'test-uri',
                path: 'test-path',
            },
        }, 'path');
        /**
         * Tests
         */
        expect(mockTmpFileSync).toBeCalledTimes(1);
        expect(res).toEqual({
            status: 'err',
            message: 'pass',
        });
    }));
    test('loadTemplate returns error on bad unzip', () => __awaiter(this, void 0, void 0, function* () {
        /**
         * Mocks
         */
        const mockTarExtract = jest.spyOn(tar, 'extract').mockImplementation(() => {
            throw new Error('pass');
        });
        /**
         * Execution
         */
        const res = yield __1.loadTemplate({
            name: 'test-template',
            description: 'test-description',
            repo: {
                branch: 'test-branch',
                uri: 'test-uri',
                path: 'test-path',
            },
        }, 'path');
        /**
         * Tests
         */
        expect(mockTarExtract).toBeCalledTimes(1);
        expect(res).toEqual({
            status: 'err',
            message: 'pass',
        });
    }));
    test('loads the template correctly', () => __awaiter(this, void 0, void 0, function* () {
        /**
         * Setup dist
         */
        const dist = path.resolve(__dirname, './__tmp__/template');
        try {
            mkdirp.sync(dist);
        }
        catch (err) {
            fail();
        }
        /**
         * Test
         */
        try {
            const res = yield __1.loadTemplate({
                name: 'test-template',
                description: 'test-template description',
                repo: {
                    uri: 'https://github.com/maticzav/creato',
                    branch: 'master',
                    path: '/examples/label-sync',
                },
            }, dist);
            expect(res).toEqual({
                status: 'ok',
                message: 'Successfully installed template.',
            });
            expect(fs.existsSync(path.resolve(dist, 'package.json'))).toBe(true);
        }
        catch (err) {
            fail();
        }
    }));
});
//# sourceMappingURL=loader.test.js.map