#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const ora = require("ora");
const inquirer = require("inquirer");
const mkdirp = require("mkdirp");
const loader_1 = require("./loader");
/**
 *
 * Creates a CLI tool from description and templates.
 *
 * @param templates
 * @param options
 */
function creato(templates, options) {
    return __awaiter(this, void 0, void 0, function* () {
        /**
         * Inquier about template
         */
        const { template } = yield inquirer.prompt([
            {
                name: 'template',
                message: 'Choose a template!',
                type: 'list',
                choices: templates.map(template => ({
                    name: `${template.name}    ${template.description}`,
                    value: template,
                })),
            },
        ]);
        const { dist } = yield inquirer.prompt([
            {
                name: 'dist',
                message: 'Where should we scaffold your template?',
                type: 'input',
            },
        ]);
        const absoluteDist = path.resolve(process.cwd(), dist);
        if (fs.existsSync(absoluteDist) && !options.force) {
            console.warn(`Directory ${absoluteDist} must be empty.`);
            return process.exit(1);
        }
        else {
            mkdirp.sync(absoluteDist);
        }
        /**
         * Load template
         */
        const spinner = ora({
            text: `Loading ${template.name} template.`,
        }).start();
        const res = yield loader_1.loadTemplate(template, absoluteDist);
        if (res.status === 'ok') {
            spinner.succeed();
            console.log(res.message);
            return process.exit(0);
        }
        else {
            spinner.fail();
            console.warn(res.message);
            return process.exit(1);
        }
    });
}
exports.creato = creato;
//# sourceMappingURL=creato.js.map