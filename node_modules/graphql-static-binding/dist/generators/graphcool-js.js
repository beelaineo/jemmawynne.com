"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
exports.generator = {
    Main: renderMainMethod,
    Header: renderHeader,
};
function renderHeader(schema) {
    return "const { Graphcool } = require('graphcool-binding')\nconst { GraphQLResolveInfo } = require('graphql')\n\nconst typeDefs = `\n" + schema + "`";
}
function renderMainMethod(queryType, mutationType, subscriptionType) {
    return "module.exports.Graphcool = class Binding extends Graphcool {\n  \n  constructor({ endpoint, secret, fragmentReplacements, debug }) {\n    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });\n\n    var self = this\n    this.exists = {\n" + renderExistsFields(queryType.getFields()) + "\n    }\n\n    this.query = {\n" + renderMainMethodFields('query', queryType.getFields()) + "\n    }" + (mutationType ? "\n      \n    this.mutation = {\n" + renderMainMethodFields('mutation', mutationType.getFields()) + "\n    }" : '') + (subscriptionType ? "\n      \n    this.subscription = {\n" + renderMainSubscriptionMethodFields('mutation', subscriptionType.getFields()) + "\n    }" : '') + "\n  }\n  \n  delegate(operation, field, args, context, info) {\n    return super.delegate(operation, field, args, context, info)\n  }\n\n  delegateSubscription(field, args, context, infoOrQuery) {\n    return super.delegateSubscription(field, args, context, infoOrQuery)\n  }\n}";
}
function renderExistsFields(fields) {
    return Object.keys(fields)
        .map(function (f) {
        var field = fields[f];
        var type = field.type;
        var foundList = false;
        // Traverse the wrapping types (if any)
        while (graphql_1.isWrappingType(type)) {
            type = type.ofType;
            // One of those wrappings need to be a GraphQLList for this field to qualify
            foundList = foundList || graphql_1.isListType(type);
        }
        if (foundList) {
            var whereType = field.args.find(function (a) { return a.name === 'where'; }).type.name;
            return "      " + type.name + "(where) {\n        return super.existsDelegate('query', '" + field.name + "', { where }, {}, '{ id }')\n      }";
        }
    })
        .filter(function (f) { return f; })
        .join(',\n');
}
exports.renderExistsFields = renderExistsFields;
function renderMainMethodFields(operation, fields) {
    return Object.keys(fields).map(function (f) {
        var field = fields[f];
        return "      " + field.name + "(args, info) { \n        return self.delegate('" + operation + "', '" + field.name + "', args, {}, info)\n      }";
    }).join(',\n');
}
exports.renderMainMethodFields = renderMainMethodFields;
function renderMainSubscriptionMethodFields(operation, fields) {
    return Object.keys(fields).map(function (f) {
        var field = fields[f];
        return "      " + field.name + "(args, infoOrQuery) { \n        return self.delegateSubscription('" + field.name + "', args, {}, infoOrQuery)\n      }";
    }).join(',\n');
}
exports.renderMainSubscriptionMethodFields = renderMainSubscriptionMethodFields;
//# sourceMappingURL=graphcool-js.js.map