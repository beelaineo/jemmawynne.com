'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = format;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_SIGNS = [' ', '⚠', '✖'];
const DEFAULT_COLORS = ['white', 'yellow', 'red'];

function format(report = {}, options = {}) {
	var _report$results = report.results;
	const results = _report$results === undefined ? [] : _report$results;


	if (results.length > 0) {
		return results.map(result => `${formatInput(result, options)}${formatResult(result, options).join('\n')}`).join('\n');
	}

	// Output a summary when nothing is found
	return formatResult({}, options).join('\n');
}

function formatInput(result = {}, options = {}) {
	var _options$color = options.color;
	const enabled = _options$color === undefined ? true : _options$color;
	var _result$errors = result.errors;
	const errors = _result$errors === undefined ? [] : _result$errors;
	var _result$input = result.input;
	const input = _result$input === undefined ? '' : _result$input;


	if (!input) {
		return '';
	}

	const sign = '⧗';
	const decoration = enabled ? _chalk2.default.gray(sign) : sign;
	const commitText = errors.length > 0 ? input : input.split('\n')[0];

	const decoratedInput = enabled ? _chalk2.default.bold(commitText) : commitText;

	return `\n${decoration}   input: ${decoratedInput}\n`;
}

function formatResult(result = {}, options = {}) {
	var _options$signs = options.signs;
	const signs = _options$signs === undefined ? DEFAULT_SIGNS : _options$signs;
	var _options$colors = options.colors;
	const colors = _options$colors === undefined ? DEFAULT_COLORS : _options$colors;
	var _options$color2 = options.color;
	const enabled = _options$color2 === undefined ? true : _options$color2;
	var _result$errors2 = result.errors;
	const errors = _result$errors2 === undefined ? [] : _result$errors2;
	var _result$warnings = result.warnings;
	const warnings = _result$warnings === undefined ? [] : _result$warnings;


	const problems = [...errors, ...warnings].map(problem => {
		const sign = signs[problem.level] || '';
		const color = colors[problem.level] || 'white';
		const decoration = enabled ? _chalk2.default[color](sign) : sign;
		const name = enabled ? _chalk2.default.grey(`[${problem.name}]`) : `[${problem.name}]`;
		return `${decoration}   ${problem.message} ${name}`;
	});

	const sign = selectSign({ errors, warnings });
	const color = selectColor({ errors, warnings });

	const decoration = enabled ? _chalk2.default[color](sign) : sign;
	const summary = `${decoration}   found ${errors.length} problems, ${warnings.length} warnings \n    (Need help? -> https://github.com/conventional-changelog/commitlint#what-is-commitlint )\n\n`;
	return [...problems, enabled ? _chalk2.default.bold(summary) : summary];
}

function selectSign(result) {
	if (result.errors.length > 0) {
		return '✖';
	}
	return result.warnings.length ? '⚠' : '✔';
}

function selectColor(result) {
	if (result.errors.length > 0) {
		return 'red';
	}
	return result.warnings.length ? 'yellow' : 'green';
}
module.exports = exports['default'];
//# sourceMappingURL=index.js.map