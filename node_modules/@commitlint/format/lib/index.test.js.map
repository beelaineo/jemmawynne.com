{"version":3,"sources":["../src/index.test.js"],"names":["ok","bold","green","t","actual","deepEqual","results","errors","warnings","true","includes","actualError","level","name","message","actualWarning","options","signs"],"mappings":"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","file":"index.test.js","sourcesContent":["import test from 'ava';\nimport chalk from 'chalk';\nimport {includes} from 'lodash';\nimport format from '.';\n\nconst ok = chalk.bold(\n\t`${chalk.green(\n\t\t'✔'\n\t)}   found 0 problems, 0 warnings \\n    (Need help? -> https://github.com/conventional-changelog/commitlint#what-is-commitlint )\\n\\n`\n);\n\ntest('does nothing without arguments', t => {\n\tconst actual = format();\n\tt.deepEqual(actual, ok);\n});\n\ntest('does nothing without report results', t => {\n\tconst actual = format({results: []});\n\tt.deepEqual(actual, ok);\n});\n\ntest('does nothing without .errors and .warnings', t => {\n\tconst actual = format({results: [{}]});\n\tt.deepEqual(actual, ok);\n});\n\ntest('returns empty summary of problems for empty .errors and .warnings', t => {\n\tconst actual = format({\n\t\tresults: [\n\t\t\t{\n\t\t\t\terrors: [],\n\t\t\t\twarnings: []\n\t\t\t}\n\t\t]\n\t});\n\n\tt.true(actual.includes('0 problems, 0 warnings'));\n});\n\ntest('returns a correct of empty .errors and .warnings', t => {\n\tconst actualError = format({\n\t\tresults: [\n\t\t\t{\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlevel: 2,\n\t\t\t\t\t\tname: 'error-name',\n\t\t\t\t\t\tmessage: 'There was an error'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t});\n\n\tconst actualWarning = format({\n\t\tresults: [\n\t\t\t{\n\t\t\t\twarnings: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlevel: 1,\n\t\t\t\t\t\tname: 'warning-name',\n\t\t\t\t\t\tmessage: 'There was a problem'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t});\n\n\tt.true(includes(actualError, 'There was an error'));\n\tt.true(includes(actualError, '1 problems, 0 warnings'));\n\tt.true(includes(actualWarning, 'There was a problem'));\n\tt.true(includes(actualWarning, '0 problems, 1 warnings'));\n});\n\ntest('uses appropriate signs by default', t => {\n\tconst actualError = format({\n\t\tresults: [\n\t\t\t{\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlevel: 2,\n\t\t\t\t\t\tname: 'error-name',\n\t\t\t\t\t\tmessage: 'There was an error'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t});\n\n\tconst actualWarning = format({\n\t\tresults: [\n\t\t\t{\n\t\t\t\twarnings: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlevel: 1,\n\t\t\t\t\t\tname: 'warning-name',\n\t\t\t\t\t\tmessage: 'There was a problem'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t});\n\n\tt.true(includes(actualError, '✖'));\n\tt.true(includes(actualWarning, '⚠'));\n});\n\ntest('uses signs as configured', t => {\n\tconst options = {signs: ['HNT', 'WRN', 'ERR']};\n\tconst actualError = format(\n\t\t{\n\t\t\tresults: [\n\t\t\t\t{\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlevel: 2,\n\t\t\t\t\t\t\tname: 'error-name',\n\t\t\t\t\t\t\tmessage: 'There was an error'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\toptions\n\t);\n\n\tconst actualWarning = format(\n\t\t{\n\t\t\tresults: [\n\t\t\t\t{\n\t\t\t\t\twarnings: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlevel: 1,\n\t\t\t\t\t\t\tname: 'warning-name',\n\t\t\t\t\t\t\tmessage: 'There was a problem'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\toptions\n\t);\n\n\tt.true(includes(actualError, 'ERR'));\n\tt.true(includes(actualWarning, 'WRN'));\n});\n"]}