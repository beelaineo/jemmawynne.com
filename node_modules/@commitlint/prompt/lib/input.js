'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _load = require('@commitlint/load');

var _load2 = _interopRequireDefault(_load);

var _throat = require('throat');

var _throat2 = _interopRequireDefault(_throat);

var _format = require('./library/format');

var _format2 = _interopRequireDefault(_format);

var _getHasName = require('./library/get-has-name');

var _getHasName2 = _interopRequireDefault(_getHasName);

var _getPrompt = require('./library/get-prompt');

var _getPrompt2 = _interopRequireDefault(_getPrompt);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = input;

/* eslint-disable valid-jsdoc */
/**
 * Get user input by interactive prompt based on
 * conventional-changelog-lint rules.
 * @param {function} prompter
 * @return {Promise<string>} commit message
 */

function input(prompter) {
	return new Promise(function ($return, $error) {
		var results, _ref, rules;

		results = {
			type: null,
			scope: null,
			subject: null,
			body: null,
			footer: null
		};
		return Promise.resolve((0, _load2.default)()).then(function ($await_1) {
			try {
				_ref = $await_1;
				rules = _ref.rules;
				return Promise.resolve(Promise.all(['type', 'scope', 'subject', 'body', 'footer'].map((0, _throat2.default)(1, input => new Promise(function ($return, $error) {
					var inputRules, inputSettings, isHeader, headerLengthRule, _headerLengthRule, _headerLengthRule$, severity, applicable, length;

					inputRules = getRules(input, rules);
					inputSettings = _settings2.default[input];
					isHeader = ['type', 'scope', 'subject'].indexOf(input) > -1;
					headerLengthRule = getRules('header', rules).filter((0, _getHasName2.default)('max-length'))[0];


					if (isHeader && headerLengthRule) {
						_headerLengthRule = (0, _slicedToArray3.default)(headerLengthRule, 2), _headerLengthRule$ = (0, _slicedToArray3.default)(_headerLengthRule[1], 3);
						severity = _headerLengthRule$[0], applicable = _headerLengthRule$[1], length = _headerLengthRule$[2];

						if (severity > 0 && applicable === 'always') {
							inputSettings.header = {
								length
							};
						}
					}

					return Promise.resolve((0, _getPrompt2.default)(input, {
						// eslint-disable-line no-await-in-loop
						rules: inputRules,
						settings: inputSettings,
						results,
						prompter
					})).then(function ($await_2) {
						try {
							results[input] = $await_2;
							return $return();
						} catch ($boundEx) {
							return $error($boundEx);
						}
					}.bind(this), $error);
				}.bind(this))))).catch(err => {
					console.error(err);
					return '';
				})).then(function ($await_3) {
					try {

						// Return the results
						return $return((0, _format2.default)(results));
					} catch ($boundEx) {
						return $error($boundEx);
					}
				}.bind(this), $error);
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
}

/**
 * Get prefix for a given rule id
 * @param  {string} id of the rule
 * @return {string} prefix of the rule
 */
function getRulePrefix(id) {
	const fragments = id.split('-');

	var _fragments = (0, _slicedToArray3.default)(fragments, 1);

	const prefix = _fragments[0];

	return fragments.length > 1 ? prefix : null;
}

/**
 * Get a predecate matching rule definitions with a given prefix
 * @param  {[type]} name [description]
 * @return {[type]}      [description]
 */
function getHasPrefix(name) {
	return rule => getRulePrefix(rule[0]) === name;
}

/**
 * Get rules for a given prefix
 * @param  {string} prefix to search in rule names
 * @param  {object} rules  rules to search in
 * @return {object}        rules matching the prefix search
 */
function getRules(prefix, rules) {
	return Object.entries(rules).filter(getHasPrefix(prefix));
}
module.exports = exports['default'];
//# sourceMappingURL=input.js.map