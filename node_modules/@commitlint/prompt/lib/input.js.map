{"version":3,"sources":["../src/input.js"],"names":["input","prompter","results","type","scope","subject","body","footer","rules","Promise","all","map","inputRules","getRules","inputSettings","isHeader","indexOf","headerLengthRule","filter","severity","applicable","length","header","settings","catch","err","console","error","getRulePrefix","id","fragments","split","prefix","getHasPrefix","name","rule","Object","entries"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEeA,K;;AAEf;AACA;;;;;;;AAMA,SAAeA,KAAf,CAAqBC,QAArB;AAAA;AAAA;;AACOC,SADP,GACiB;AACfC,SAAM,IADS;AAEfC,UAAO,IAFQ;AAGfC,YAAS,IAHM;AAIfC,SAAM,IAJS;AAKfC,WAAQ;AALO,GADjB;AASiB,yBAAM,qBAAN;AAAA;AAAA;AAATC,SAAS,QAATA,KAAS;AAEhB,2BAAMC,QAAQC,GAAR,CACL,CAAC,MAAD,EAAS,OAAT,EAAkB,SAAlB,EAA6B,MAA7B,EAAqC,QAArC,EAA+CC,GAA/C,CACC,sBAAO,CAAP,EAAgBX,KAAN;AAAA;;AACHY,eADG,GACUC,SAASb,KAAT,EAAgBQ,KAAhB,CADV;AAEHM,kBAFG,GAEa,mBAASd,KAAT,CAFb;AAIHe,aAJG,GAIQ,CAAC,MAAD,EAAS,OAAT,EAAkB,SAAlB,EAA6BC,OAA7B,CAAqChB,KAArC,IAA8C,CAAC,CAJvD;AAMHiB,qBANG,GAMgBJ,SAAS,QAAT,EAAmBL,KAAnB,EAA0BU,MAA1B,CACxB,0BAAW,YAAX,CADwB,EAEvB,CAFuB,CANhB;;;AAUT,SAAIH,YAAYE,gBAAhB,EAAkC;AAAA,uDACUA,gBADV;AACvBE,cADuB,0BACbC,UADa,0BACDC,MADC;;AAEjC,UAAIF,WAAW,CAAX,IAAgBC,eAAe,QAAnC,EAA6C;AAC5CN,qBAAcQ,MAAd,GAAuB;AACtBD;AADsB,QAAvB;AAGA;AACD;;AAEgB,4BAAM,yBAAUrB,KAAV,EAAiB;AACvC;AACAQ,aAAOI,UAFgC;AAGvCW,gBAAUT,aAH6B;AAIvCZ,aAJuC;AAKvCD;AALuC,MAAjB,CAAN;AAAA;AAAjBC,eAAQF,KAAR,IAAiB,QAAjB;AAAiB;AAAA;AAAA;AAAA;AAAA;AAnBR,iBAAV,CADD,CADK,EA8BJwB,KA9BI,CA8BEC,OAAO;AACdC,aAAQC,KAAR,CAAcF,GAAd;AACA,YAAO,EAAP;AACA,KAjCK,CAAN;AAAA;;AAmCA;AACA,qBAAO,sBAAOvB,OAAP,CAAP;AApCA;AAAA;AAAA;AAAA;AAFgB;AAAA;AAAA;AAAA;AATjB;AAAA;;AAkDA;;;;;AAKA,SAAS0B,aAAT,CAAuBC,EAAvB,EAA2B;AAC1B,OAAMC,YAAYD,GAAGE,KAAH,CAAS,GAAT,CAAlB;;AAD0B,+CAETD,SAFS;;AAAA,OAEnBE,MAFmB;;AAG1B,QAAOF,UAAUT,MAAV,GAAmB,CAAnB,GAAuBW,MAAvB,GAAgC,IAAvC;AACA;;AAED;;;;;AAKA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC3B,QAAOC,QAAQP,cAAcO,KAAK,CAAL,CAAd,MAA2BD,IAA1C;AACA;;AAED;;;;;;AAMA,SAASrB,QAAT,CAAkBmB,MAAlB,EAA0BxB,KAA1B,EAAiC;AAChC,QAAO4B,OAAOC,OAAP,CAAe7B,KAAf,EAAsBU,MAAtB,CAA6Be,aAAaD,MAAb,CAA7B,CAAP;AACA","file":"input.js","sourcesContent":["import load from '@commitlint/load';\nimport throat from 'throat';\n\nimport format from './library/format';\nimport getHasName from './library/get-has-name';\nimport getPrompt from './library/get-prompt';\nimport settings from './settings';\n\nexport default input;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Get user input by interactive prompt based on\n * conventional-changelog-lint rules.\n * @param {function} prompter\n * @return {Promise<string>} commit message\n */\nasync function input(prompter) {\n\tconst results = {\n\t\ttype: null,\n\t\tscope: null,\n\t\tsubject: null,\n\t\tbody: null,\n\t\tfooter: null\n\t};\n\n\tconst {rules} = await load();\n\n\tawait Promise.all(\n\t\t['type', 'scope', 'subject', 'body', 'footer'].map(\n\t\t\tthroat(1, async input => {\n\t\t\t\tconst inputRules = getRules(input, rules);\n\t\t\t\tconst inputSettings = settings[input];\n\n\t\t\t\tconst isHeader = ['type', 'scope', 'subject'].indexOf(input) > -1;\n\n\t\t\t\tconst headerLengthRule = getRules('header', rules).filter(\n\t\t\t\t\tgetHasName('max-length')\n\t\t\t\t)[0];\n\n\t\t\t\tif (isHeader && headerLengthRule) {\n\t\t\t\t\tconst [, [severity, applicable, length]] = headerLengthRule;\n\t\t\t\t\tif (severity > 0 && applicable === 'always') {\n\t\t\t\t\t\tinputSettings.header = {\n\t\t\t\t\t\t\tlength\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresults[input] = await getPrompt(input, {\n\t\t\t\t\t// eslint-disable-line no-await-in-loop\n\t\t\t\t\trules: inputRules,\n\t\t\t\t\tsettings: inputSettings,\n\t\t\t\t\tresults,\n\t\t\t\t\tprompter\n\t\t\t\t});\n\t\t\t})\n\t\t)\n\t).catch(err => {\n\t\tconsole.error(err);\n\t\treturn '';\n\t});\n\n\t// Return the results\n\treturn format(results);\n}\n\n/**\n * Get prefix for a given rule id\n * @param  {string} id of the rule\n * @return {string} prefix of the rule\n */\nfunction getRulePrefix(id) {\n\tconst fragments = id.split('-');\n\tconst [prefix] = fragments;\n\treturn fragments.length > 1 ? prefix : null;\n}\n\n/**\n * Get a predecate matching rule definitions with a given prefix\n * @param  {[type]} name [description]\n * @return {[type]}      [description]\n */\nfunction getHasPrefix(name) {\n\treturn rule => getRulePrefix(rule[0]) === name;\n}\n\n/**\n * Get rules for a given prefix\n * @param  {string} prefix to search in rule names\n * @param  {object} rules  rules to search in\n * @return {object}        rules matching the prefix search\n */\nfunction getRules(prefix, rules) {\n\treturn Object.entries(rules).filter(getHasPrefix(prefix));\n}\n"]}