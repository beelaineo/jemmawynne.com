'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _getPrompt = require('./get-prompt');

var _getPrompt2 = _interopRequireDefault(_getPrompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('throws without params', t => {
	t.throws(() => (0, _getPrompt2.default)(), /Missing prompter function/);
});

(0, _ava2.default)('throws with incompatible prompter', t => {
	t.throws(() => (0, _getPrompt2.default)('type', {
		prompter() {
			return {};
		}
	}), /prompt.removeAllListeners/);
});

(0, _ava2.default)('returns input unaltered wihtout rules', t => new Promise(function ($return, $error) {
	var message;
	return Promise.resolve((0, _getPrompt2.default)('type', {
		prompter: stub('foobar')
	})).then(function ($await_1) {
		try {
			message = $await_1;


			t.is(message, 'foobar');
			return $return();
		} catch ($boundEx) {
			return $error($boundEx);
		}
	}.bind(this), $error);
}.bind(this)));

function stub(input = '') {
	return stubPrompter;

	function stubPrompter() {
		const called = [];
		const actions = [];

		const instance = {
			action(...args) {
				actions.push(args[0]);
				called.push([instance.action, args]);
			},
			addListener(...args) {
				called.push([instance.addListener, args]);
			},
			catch(...args) {
				called.push([instance.catch, args]);
				return instance;
			},
			command(...args) {
				called.push([instance.command, args]);
				return instance;
			},
			description(...args) {
				called.push([instance.description, args]);
				return instance;
			},
			delimiter(...args) {
				called.push([instance.delimiter, args]);
				return instance;
			},
			log(...args) {
				called.push([instance.log, args]);
				return instance;
			},
			removeAllListeners(...args) {
				called.push([instance.removeAllListeners, args]);
			},
			show(...args) {
				called.push([instance.show, args]);
				return instance;
			},
			ui: {
				redraw: {
					done(...args) {
						called.push([instance.ui.redraw.done, args]);
					}
				}
			},
			called
		};

		setTimeout(() => {
			actions[0]({
				text: Array.isArray(input) ? input : [input]
			});
		});

		return instance;
	}
}
//# sourceMappingURL=get-prompt.test.js.map