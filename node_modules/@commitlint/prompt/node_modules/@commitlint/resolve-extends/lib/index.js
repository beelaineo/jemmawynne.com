'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = resolveExtends;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

require('resolve-global');

var _importFresh = require('import-fresh');

var _importFresh2 = _interopRequireDefault(_importFresh);

var _resolveFrom = require('resolve-from');

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Resolve extend configs
function resolveExtends(config = {}, context = {}) {
	const e = config.extends;

	const extended = loadExtends(config, context).reduceRight((r, c) => (0, _lodash.mergeWith)(r, (0, _lodash.omit)(c, 'extends'), (objValue, srcValue) => {
		if ((0, _lodash.isArray)(objValue)) {
			return srcValue;
		}
	}), e ? { extends: e } : {});

	// Remove deprecation warning in version 3
	if (typeof config === 'object' && 'wildcards' in config) {
		console.warn(`'wildcards' found in top-level configuration ignored. Remove them from your config to silence this warning.`);
	}

	return (0, _lodash.merge)({}, extended, config);
}

// (any, string, string, Function) => any[];
// eslint-disable-line import/no-unassigned-import
function loadExtends(config = {}, context = {}) {
	return (config.extends || []).reduce((configs, raw) => {
		const load = context.require || require;
		const resolved = resolveConfig(raw, context);
		const c = load(resolved);
		const cwd = _path2.default.dirname(resolved);

		// Remove deprecation warning in version 3
		if (typeof c === 'object' && 'wildcards' in c) {
			console.warn(`'wildcards' found in '${raw}' ignored. To silence this warning raise an issue at 'npm repo ${raw}' to remove the wildcards.`);
		}

		const ctx = (0, _lodash.merge)({}, context, { cwd });

		// Resolve parser preset if none was present before
		if (!context.parserPreset && typeof c === 'object' && typeof c.parserPreset === 'string') {
			const resolvedParserPreset = (0, _resolveFrom2.default)(cwd, c.parserPreset);
			const parserPreset = {
				name: c.parserPreset,
				path: `./${_path2.default.relative(process.cwd(), resolvedParserPreset)}`.split(_path2.default.sep).join('/'),
				parserOpts: require(resolvedParserPreset)
			};

			ctx.parserPreset = parserPreset;
			config.parserPreset = parserPreset;
		}

		return [...configs, c, ...loadExtends(c, ctx)];
	}, []);
}

function getId(raw = '', prefix = '') {
	const first = raw.charAt(0);
	const scoped = first === '@';
	const relative = first === '.';

	if (scoped) {
		return raw.includes('/') ? raw : [raw, prefix].filter(String).join('/');
	}

	return relative ? raw : [prefix, raw].filter(String).join('-');
}

function resolveConfig(raw, context = {}) {
	const resolve = context.resolve || resolveId;
	const id = getId(raw, context.prefix);

	try {
		return resolve(id, context);
	} catch (err) {
		const legacy = getId(raw, 'conventional-changelog-lint-config');
		const resolved = resolve(legacy, context);
		console.warn(`Resolving ${raw} to legacy config ${legacy}. To silence this warning raise an issue at 'npm repo ${legacy}' to rename to ${id}.`);
		return resolved;
	}
}

function resolveId(id, context = {}) {
	const cwd = context.cwd || process.cwd();
	const localPath = resolveFromSilent(cwd, id);

	if (typeof localPath === 'string') {
		return localPath;
	}

	const globalPath = resolveGlobalSilent(id);

	if (typeof globalPath === 'string') {
		return globalPath;
	}

	const err = new Error(`Cannot find module "${id}" from "${cwd}"`);
	err.code = 'MODULE_NOT_FOUND';
	throw err;
}

function resolveFromSilent(cwd, id) {
	try {
		return (0, _resolveFrom2.default)(cwd, id);
	} catch (err) {}
}

function resolveGlobalSilent(id) {
	try {
		const resolveGlobal = (0, _importFresh2.default)('resolve-global');
		return resolveGlobal(id);
	} catch (err) {}
}
module.exports = exports['default'];
//# sourceMappingURL=index.js.map