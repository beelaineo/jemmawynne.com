{"version":3,"sources":["../src/index.test.js"],"names":["t","bootstrap","cwd","actual","deepEqual","rules","foo","is","file","parserPreset","name","parserOpts","headerPattern","throws","extends","formatter","one","two","zero","baz","outer","init","join","child","inner"],"mappings":"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","file":"index.test.js","sourcesContent":["import path from 'path';\nimport {fix, git} from '@commitlint/test';\nimport test from 'ava';\nimport resolveFrom from 'resolve-from';\n\nimport load from '.';\n\ntest('extends-empty should have no rules', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-empty');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.rules, {});\n});\n\ntest('uses seed as configured', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-empty');\n\tconst actual = await load({rules: {foo: 'bar'}}, {cwd});\n\tt.is(actual.rules.foo, 'bar');\n});\n\ntest('rules should be loaded from specify config file', async t => {\n\tconst file = 'config/commitlint.config.js';\n\tconst cwd = await git.bootstrap('fixtures/specify-config-file');\n\tconst actual = await load({}, {cwd, file});\n\tt.is(actual.rules.foo, 'bar');\n});\n\ntest('uses seed with parserPreset', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset');\n\tconst {parserPreset: actual} = await load(\n\t\t{\n\t\t\tparserPreset: './conventional-changelog-custom'\n\t\t},\n\t\t{cwd}\n\t);\n\tt.is(actual.name, './conventional-changelog-custom');\n\tt.deepEqual(actual.parserOpts, {\n\t\theaderPattern: /^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t});\n});\n\ntest('invalid extend should throw', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-invalid');\n\tawait t.throws(load({}, {cwd}));\n});\n\ntest('empty file should have no rules', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty-object-file');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.rules, {});\n});\n\ntest('empty file should extend nothing', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty-file');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual.extends, []);\n});\n\ntest('respects cwd option', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends/first-extended');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./second-extended'],\n\t\trules: {\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends');\n\tconst actual = await load({}, {cwd});\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with json file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-json');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with yaml file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-yaml');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with js file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-js');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('recursive extends with package.json file', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-extends-package');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./first-extended'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1,\n\t\t\ttwo: 2\n\t\t}\n\t});\n});\n\ntest('parser preset overwrites completely instead of merging', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset-override');\n\tconst actual = await load({}, {cwd});\n\tt.is(actual.parserPreset.name, './custom');\n\tt.deepEqual(actual.parserPreset.parserOpts, {\n\t\theaderPattern: /.*/\n\t});\n});\n\ntest('recursive extends with parserPreset', async t => {\n\tconst cwd = await git.bootstrap('fixtures/recursive-parser-preset');\n\tconst actual = await load({}, {cwd});\n\tt.is(actual.parserPreset.name, './conventional-changelog-custom');\n\tt.is(typeof actual.parserPreset.parserOpts, 'object');\n\tt.deepEqual(\n\t\tactual.parserPreset.parserOpts.headerPattern,\n\t\t/^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t);\n});\n\ntest('ignores unknow keys', async t => {\n\tconst cwd = await git.bootstrap('fixtures/trash-file');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: [],\n\t\trules: {\n\t\t\tfoo: 'bar',\n\t\t\tbaz: 'bar'\n\t\t}\n\t});\n});\n\ntest('ignores unknow keys recursively', async t => {\n\tconst cwd = await git.bootstrap('fixtures/trash-extend');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: ['./one'],\n\t\trules: {\n\t\t\tzero: 0,\n\t\t\tone: 1\n\t\t}\n\t});\n});\n\ntest('find up from given cwd', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tawait git.init(path.join(outer, 'inner-scope'));\n\tconst cwd = path.join(outer, 'inner-scope', 'child-scope');\n\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: [],\n\t\trules: {\n\t\t\tchild: true,\n\t\t\tinner: false,\n\t\t\touter: false\n\t\t}\n\t});\n});\n\ntest('find up config from outside current git repo', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: '@commitlint/format',\n\t\textends: [],\n\t\trules: {\n\t\t\tchild: false,\n\t\t\tinner: false,\n\t\t\touter: true\n\t\t}\n\t});\n});\n\ntest('respects formatter option', async t => {\n\tconst cwd = await git.bootstrap('fixtures/formatter');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: 'commitlint-junit',\n\t\textends: [],\n\t\trules: {}\n\t});\n});\n\ntest('resolves formatter relative from config directory', async t => {\n\tconst cwd = await git.bootstrap('fixtures/formatter-local-module');\n\tconst actual = await load({}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: resolveFrom(cwd, './formatters/custom.js'),\n\t\textends: [],\n\t\trules: {}\n\t});\n});\n\ntest('returns formatter name when unable to resolve from config directory', async t => {\n\tconst cwd = await git.bootstrap('fixtures/formatter-local-module');\n\tconst actual = await load({formatter: './doesnt/exists.js'}, {cwd});\n\n\tt.deepEqual(actual, {\n\t\tformatter: './doesnt/exists.js',\n\t\textends: [],\n\t\trules: {}\n\t});\n});\n"]}