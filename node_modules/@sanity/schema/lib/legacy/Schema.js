"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var types = _interopRequireWildcard(require("./types"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function compileRegistry(schemaDef) {
  var registry = Object.assign(Object.create(null), types);
  var defsByName = schemaDef.types.reduce((acc, def) => {
    if (acc[def.name]) {
      throw new Error("Duplicate type name added to schema: ".concat(def.name));
    }

    acc[def.name] = def;
    return acc;
  }, {});
  schemaDef.types.forEach(add);
  return registry;

  function ensure(typeName) {
    if (!registry[typeName]) {
      if (!defsByName[typeName]) {
        throw new Error("Unknown type: ".concat(typeName));
      }

      add(defsByName[typeName]);
    }
  }

  function extendMember(memberDef) {
    ensure(memberDef.type);
    return registry[memberDef.type].extend(memberDef, extendMember).get();
  }

  function add(typeDef) {
    ensure(typeDef.type);

    if (registry[typeDef.name]) {
      return;
    }

    registry[typeDef.name] = registry[typeDef.type].extend(typeDef, extendMember);
  }
}

class Schema {
  static compile(schemaDef) {
    return new Schema(schemaDef);
  }

  constructor(schemaDef) {
    this._original = schemaDef;
    this._registry = compileRegistry(schemaDef);
  }

  get name() {
    return this._original.name;
  }

  get(name) {
    return this._registry[name] && this._registry[name].get();
  }

  has(name) {
    return name in this._registry;
  }

  getTypeNames() {
    return Object.keys(this._registry);
  }

}

exports.default = Schema;