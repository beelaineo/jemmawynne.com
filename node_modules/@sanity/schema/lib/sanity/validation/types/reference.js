"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _createValidationResult = require("../createValidationResult");

var _getDupes = require("../utils/getDupes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function normalizeToProp(typeDef) {
  if (Array.isArray(typeDef.to)) {
    return typeDef.to;
  }

  return typeDef.to ? [typeDef.to] : typeDef.to;
}

var _default = (typeDef, visitorContext) => {
  var isValidTo = Array.isArray(typeDef.to) || (0, _isPlainObject2.default)(typeDef.to);
  var normalizedTo = normalizeToProp(typeDef);
  var problems = (0, _flatten2.default)([isValidTo ? (0, _getDupes.getDupes)(normalizedTo, t => "".concat(t.name, ";").concat(t.type)).map(dupes => (0, _createValidationResult.error)("Found ".concat(dupes.length, " members with same type, but not unique names \"").concat(dupes[0].type, "\" in reference. This makes it impossible to tell their values apart and you should consider naming them"), _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID)) : (0, _createValidationResult.error)('The reference type is missing or having an invalid value for the required "to" property. It should be an array of accepted types.', _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID)]);

  if (isValidTo && normalizedTo.length === 0) {
    problems.push((0, _createValidationResult.error)('The reference type should define at least one accepted type. Please check the "to" property.', _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID));
  }

  return _objectSpread({}, typeDef, {
    to: (isValidTo ? normalizedTo : []).map(visitorContext.visit),
    _problems: problems
  });
};

exports.default = _default;