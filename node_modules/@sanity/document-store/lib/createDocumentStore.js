"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDocumentStore;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _createObservableBufferedDocument = require("./createObservableBufferedDocument");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createBufferedDocument(documentId, serverEvents$, doCommit) {
  var bufferedDocument = (0, _createObservableBufferedDocument.createObservableBufferedDocument)(serverEvents$, doCommit);
  var reconnects$ = serverEvents$.pipe((0, _operators.filter)(event => event.type === 'reconnect'));
  return {
    events: (0, _rxjs.merge)(reconnects$, bufferedDocument.updates$),

    patch(patches) {
      bufferedDocument.addMutations(patches.map(patch => ({
        patch: _objectSpread({}, patch, {
          id: documentId
        })
      })));
    },

    create(document) {
      bufferedDocument.addMutation({
        create: Object.assign({
          id: documentId
        }, document)
      });
    },

    createIfNotExists(document) {
      bufferedDocument.addMutation({
        createIfNotExists: document
      });
    },

    createOrReplace(document) {
      bufferedDocument.addMutation({
        createOrReplace: document
      });
    },

    delete() {
      bufferedDocument.addMutation({
        delete: {
          id: documentId
        }
      });
    },

    commit() {
      return bufferedDocument.commit();
    }

  };
}

var isEventForDocId = id => event => event.type === 'reconnect' || event.documentId === id;

function createDocumentStore(_ref) {
  var serverConnection = _ref.serverConnection;
  return {
    byId,
    byIds,
    query,
    create,
    checkout,
    checkoutPair,
    patch: patchDoc,
    delete: deleteDoc,
    createOrReplace: createOrReplace,
    createIfNotExists: createIfNotExists
  };

  function patchDoc(documentId, patches) {
    var doc = checkout(documentId);
    doc.patch(patches);
    return doc.commit();
  }

  function deleteDoc(documentId) {
    return checkout(documentId).delete().commit();
  }

  function byId(documentId) {
    return checkout(documentId).events;
  }

  function checkoutPair(idPair) {
    var publishedId = idPair.publishedId,
        draftId = idPair.draftId;
    var serverEvents$ = serverConnection.byIdPair({
      publishedId,
      draftId
    }).pipe((0, _operators.share)());
    var draft = createBufferedDocument(draftId, serverEvents$.pipe((0, _operators.filter)(isEventForDocId(draftId))), doCommit);
    var published = createBufferedDocument(publishedId, serverEvents$.pipe((0, _operators.filter)(isEventForDocId(publishedId))), doCommit);
    return {
      draft,
      published
    };
  }

  function checkout(documentId) {
    var serverEvents$ = serverConnection.byId(documentId).pipe((0, _operators.share)());
    return createBufferedDocument(documentId, serverEvents$, doCommit);
  }

  function byIds(documentIds) {
    return new _rxjs.Observable(observer => {
      var documentSubscriptions = documentIds.map(id => byId(id).subscribe(observer));
      return () => {
        documentSubscriptions.map(subscription => subscription.unsubscribe());
      };
    });
  }

  function query(_query, params) {
    return serverConnection.query(_query, params);
  }

  function create(document) {
    return serverConnection.create(document);
  }

  function createIfNotExists(document) {
    return serverConnection.createIfNotExists(document);
  }

  function createOrReplace(document) {
    return serverConnection.createOrReplace(document);
  }

  function doCommit(payload) {
    return serverConnection.mutate(payload);
  }
}