"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _v = _interopRequireDefault(require("@sanity/webpack-integration/v3"));

var _extractTextWebpackPlugin = _interopRequireDefault(require("extract-text-webpack-plugin"));

var _pathMapping = _interopRequireDefault(require("rxjs/_esm5/path-mapping"));

var _getStaticBasePath = _interopRequireDefault(require("../util/getStaticBasePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var resolve = mod => require.resolve(mod); // eslint-disable-next-line complexity


var _default = function _default() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var staticPath = (0, _getStaticBasePath.default)(config);
  var env = config.env || 'development';
  var wpIntegrationOptions = {
    basePath: config.basePath,
    env: config.env,
    webpack: _webpack.default
  };
  var basePath = config.basePath || process.cwd();
  var skipMinify = config.skipMinify || false;

  var reactPath = _resolveFrom.default.silent(basePath, 'react');

  var reactDomPath = _resolveFrom.default.silent(basePath, 'react-dom');

  var missing = [!reactPath && '`react`', !reactDomPath && '`react-dom`'].filter(Boolean);

  if (!reactPath || !reactDomPath) {
    var missingErr = [`Could not find ${missing.join(', ')} dependencies in project directory`, 'These need to be declared in `package.json` and be installed for Sanity to work'].join('\n');
    throw new Error(missingErr);
  }

  var babelConfig = tryRead(_path.default.join(basePath, '.babelrc'));
  var isProd = env === 'production';
  var cssExtractor = new _extractTextWebpackPlugin.default({
    filename: 'css/main.css',
    allChunks: true,
    ignoreOrder: true,
    disable: !isProd
  });
  var postcssLoader = {
    loader: resolve('postcss-loader'),
    options: {
      config: {
        path: _path.default.join(__dirname, 'postcss.config.js')
      }
    }
  };
  var cssLoaderLocation = resolve('@sanity/css-loader');
  var baseCssLoader = `${cssLoaderLocation}?modules&localIdentName=[name]_[local]_[hash:base64:5]&importLoaders=1`;
  var cssLoader = isProd && !skipMinify ? `${baseCssLoader}&minimize` : `${baseCssLoader}&sourceMap`;
  var commonChunkPlugin = (typeof config.commonChunkPlugin === 'undefined' || config.commonChunkPlugin) && new _webpack.default.optimize.CommonsChunkPlugin({
    name: 'vendor',
    filename: 'js/vendor.bundle.js'
  });
  return {
    entry: {
      app: [!isProd && resolve('react-hot-loader/patch'), resolve('normalize.css'), _path.default.join(__dirname, '..', 'browser', isProd ? 'entry.js' : 'entry-dev.js')].filter(Boolean),
      vendor: ['react', 'react-dom']
    },
    output: {
      path: config.outputPath || _path.default.join(__dirname, '..', '..', 'dist'),
      filename: 'js/[name].bundle.js',
      publicPath: `${staticPath}/`
    },
    resolve: {
      alias: _objectSpread({
        react: _path.default.dirname(reactPath),
        'react-dom': _path.default.dirname(reactDomPath),
        moment$: 'moment/moment.js'
      }, (0, _pathMapping.default)())
    },
    module: {
      rules: [{
        test: /\.jsx?/,
        exclude: /(packages\/@sanity|node_modules|bower_components)/,
        use: {
          loader: resolve('babel-loader'),
          options: babelConfig || {
            presets: [resolve('@babel/preset-react'), [resolve('@babel/preset-env'), require('./babel-env-config')]],
            plugins: [resolve('@babel/plugin-proposal-class-properties'), !isProd && resolve('react-hot-loader/babel')].filter(Boolean),
            cacheDirectory: true
          }
        }
      }, {
        test: /\.css(\?|$)/,
        oneOf: [{
          resourceQuery: /raw/,
          // foo.css?raw
          use: isProd ? _extractTextWebpackPlugin.default.extract({
            fallback: {
              loader: resolve('style-loader'),
              options: {
                hmr: false
              }
            },
            use: [{
              loader: resolve('@sanity/css-loader'),
              options: {
                importLoaders: 1,
                minimize: true,
                sourceMap: true
              }
            }]
          }) : [resolve('style-loader'), {
            loader: resolve('@sanity/css-loader'),
            options: {
              importLoaders: 1
            }
          }]
        }, {
          use: isProd ? _extractTextWebpackPlugin.default.extract({
            use: [cssLoader, postcssLoader]
          }) : [resolve('style-loader'), cssLoader, postcssLoader]
        }]
      }, {
        test: /\.(jpe?g|png|gif|svg|webp|woff|woff2|ttf|eot|otf)$/,
        use: {
          loader: resolve('file-loader'),
          options: {
            name: 'assets/[name]-[hash].[ext]'
          }
        }
      }, _v.default.getPartLoader(wpIntegrationOptions)]
    },
    profile: config.profile || false,
    plugins: [_v.default.getEnvPlugin(wpIntegrationOptions), new _webpack.default.ContextReplacementPlugin(/moment[/\\]locale$/, /en|nb/), _v.default.getPartResolverPlugin(wpIntegrationOptions), cssExtractor, commonChunkPlugin].filter(Boolean)
  };
};

exports.default = _default;

function tryRead(filePath) {
  try {
    // eslint-disable-next-line no-sync
    var content = _fs.default.readFileSync(filePath);

    return JSON.parse(content);
  } catch (err) {
    return null;
  }
}