"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _NavBar = _interopRequireDefault(require("./NavBar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable complexity */

/* eslint-disable max-depth */

/* eslint-disable no-lonely-if */
function getNextState(state, mostRight, winWidth) {
  var showLabel = state.showLabel,
      showLabelMinWidth = state.showLabelMinWidth,
      showToolSwitcher = state.showToolSwitcher,
      showToolSwitcherMinWidth = state.showToolSwitcherMinWidth;
  var mostRightIsVisible = mostRight && mostRight <= winWidth;
  var nextState = {
    winWidth
  };

  if (mostRightIsVisible) {
    // most-right element is within viewport
    if (showLabel) {
      if (showLabelMinWidth === -1 || winWidth < showLabelMinWidth) {
        nextState.showLabelMinWidth = winWidth;
      }
    } else if (showLabelMinWidth < winWidth) {
      nextState.showLabel = true;
    }

    if (showToolSwitcher) {
      if (showToolSwitcherMinWidth === -1 || winWidth < showToolSwitcherMinWidth) {
        nextState.showToolSwitcherMinWidth = winWidth;
      }
    } else if (showToolSwitcherMinWidth < winWidth) {
      nextState.showToolSwitcher = true;
    }
  } else {
    // most-right element is NOT within viewport
    if (showLabel) {
      nextState.showLabel = false;
    } else if (showToolSwitcher) {
      nextState.showToolSwitcher = false;
    }
  }

  return nextState;
}
/* eslint-enable complexity */

/* eslint-enable max-depth */

/* eslint-enable no-lonely-if */


class NavBarContainer extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      showLabel: false,
      showLabelMinWidth: -1,
      showToolSwitcher: false,
      showToolSwitcherMinWidth: -1,
      winWidth: -1
    });

    _defineProperty(this, "loginStatusElement", null);

    _defineProperty(this, "searchElement", null);

    _defineProperty(this, "tickAnimFrameId", null);

    _defineProperty(this, "tick", () => {
      this.handleFrame();
      this.tickAnimFrameId = window.requestAnimationFrame(this.tick);
    });

    _defineProperty(this, "handleSetLoginStatusElement", element => {
      this.loginStatusElement = element;
    });

    _defineProperty(this, "handleSetSearchElement", element => {
      this.searchElement = element;
    });
  }

  componentDidMount() {
    // Start an animation frame loop to check whether elements within the NavBar
    // exits the viewport at any time.
    this.tick();
  }
  /* eslint-disable complexity */


  componentDidUpdate(prevProps, prevState) {
    var _this$state = this.state,
        showLabel = _this$state.showLabel,
        showLabelMinWidth = _this$state.showLabelMinWidth,
        showToolSwitcher = _this$state.showToolSwitcher,
        showToolSwitcherMinWidth = _this$state.showToolSwitcherMinWidth;
    var didShowLabel = showLabelMinWidth === -1 && !prevState.showLabel && showLabel;
    var didShowToolSwitcher = showToolSwitcherMinWidth === -1 && !prevState.showToolSwitcher && showToolSwitcher;
    var didHideLabel = showToolSwitcherMinWidth === -1 && prevState.showLabel && !showLabel;

    if (didShowLabel || didShowToolSwitcher || didHideLabel) {
      this.handleCustomResize(window.innerWidth);
    }
  }
  /* eslint-enable complexity */


  componentWillUnmount() {
    if (this.io) {
      this.io.disconnect();
      this.io = null;
    }

    if (this.tickAnimFrameId) {
      window.cancelAnimationFrame(this.tickAnimFrameId);
      this.tickAnimFrameId = null;
    }
  }

  handleFrame() {
    var winWidth = window.innerWidth;

    if (winWidth !== this.state.winWidth) {
      this.handleCustomResize(winWidth);
    }
  }

  handleCustomResize(winWidth) {
    if (this.loginStatusElement) {
      var showToolSwitcher = this.state.showToolSwitcher; // console.log(this.searchElement)

      var mostRightRect = showToolSwitcher ? this.loginStatusElement.getBoundingClientRect() : this.searchElement.getBoundingClientRect();
      this.setState(state => {
        var nextState = getNextState(state, mostRightRect.left + mostRightRect.width, winWidth); // console.log(nextState)

        return nextState;
      });
    }
  }

  render() {
    var _this$state2 = this.state,
        showLabel = _this$state2.showLabel,
        showToolSwitcher = _this$state2.showToolSwitcher;
    return _react.default.createElement(_NavBar.default, _extends({}, this.props, {
      onSetLoginStatusElement: this.handleSetLoginStatusElement,
      onSetSearchElement: this.handleSetSearchElement,
      showLabel: showLabel,
      showToolSwitcher: showToolSwitcher
    }));
  }

}

var _default = NavBarContainer;
exports.default = _default;