"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _startCase2 = _interopRequireDefault(require("lodash/startCase"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _resolver = _interopRequireDefault(require("part:@sanity/data-aspects/resolver?"));

var _appLoadingScreen = _interopRequireDefault(require("part:@sanity/base/app-loading-screen"));

var _router = require("part:@sanity/base/router");

var _absolutes = _interopRequireDefault(require("all:part:@sanity/base/absolutes"));

var _documentActionUtils = require("part:@sanity/base/util/document-action-utils");

var _user = _interopRequireDefault(require("part:@sanity/base/user"));

var _DefaultLayout = _interopRequireDefault(require("./styles/DefaultLayout.css"));

var _RenderTool = _interopRequireDefault(require("./RenderTool"));

var _ActionModal = _interopRequireDefault(require("./ActionModal"));

var _NavBarContainer = _interopRequireDefault(require("./NavBarContainer"));

var _SchemaErrorReporter = require("./SchemaErrorReporter");

var _SideMenu = _interopRequireDefault(require("./SideMenu"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var dataAspects;

if (_resolver.default) {
  dataAspects = new _resolver.default(_schema.default);
}

function getDocumentTypeNames() {
  return dataAspects ? dataAspects.getInferredTypes() : _schema.default.getTypeNames().filter(typeName => {
    var schemaType = _schema.default.get(typeName);

    return schemaType.type && schemaType.type.name === 'document';
  });
}

var _default = (0, _router.withRouterHOC)((_temp = _class = class DefaultLayout extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      createMenuIsOpen: false,
      menuIsOpen: false,
      showLoadingScreen: true,
      searchIsOpen: false,
      loaded: false
    });

    _defineProperty(this, "handleClickCapture", event => {
      // Do not handle click if the event is not within DefaultLayout (portals)
      var rootTarget = event.target.closest(".".concat(_DefaultLayout.default.root));
      if (!rootTarget) return;

      if (this.state.menuIsOpen) {
        // Close SideMenu if the user clicks outside
        var menuTarget = event.target.closest(".".concat(_DefaultLayout.default.sideMenuContainer));

        if (!menuTarget) {
          event.preventDefault();
          event.stopPropagation();
          this.handleToggleMenu();
        }
      }
    });

    _defineProperty(this, "handleAnimationEnd", event => {
      this.setState({
        showLoadingScreen: false
      });
    });

    _defineProperty(this, "handleCreateButtonClick", () => {
      this.setState(prevState => ({
        createMenuIsOpen: !prevState.createMenuIsOpen
      }));
    });

    _defineProperty(this, "handleActionModalClose", () => {
      this.setState({
        createMenuIsOpen: false
      });
    });

    _defineProperty(this, "handleToggleMenu", () => {
      this.setState(prevState => ({
        menuIsOpen: !prevState.menuIsOpen
      }));
    });

    _defineProperty(this, "handleSwitchTool", () => {
      this.setState({
        menuIsOpen: false
      });
    });

    _defineProperty(this, "handleSearchOpen", () => {
      this.setState({
        searchIsOpen: true
      });
    });

    _defineProperty(this, "handleSearchClose", () => {
      this.setState({
        searchIsOpen: false
      });
    });

    _defineProperty(this, "setLoadingScreenElement", element => {
      this._loadingScreenElement = element;
    });

    _defineProperty(this, "renderContent", () => {
      var _this$props = this.props,
          tools = _this$props.tools,
          router = _this$props.router;
      var _this$state = this.state,
          createMenuIsOpen = _this$state.createMenuIsOpen,
          menuIsOpen = _this$state.menuIsOpen,
          searchIsOpen = _this$state.searchIsOpen;
      var modalActions = getDocumentTypeNames().map(typeName => _schema.default.get(typeName)).filter(type => (0, _documentActionUtils.isActionEnabled)(type, 'create')).map(type => ({
        title: dataAspects ? dataAspects.getDisplayName(type.name) : type.title || (0, _startCase2.default)(type.name),
        icon: dataAspects ? dataAspects.getIcon(type.name) : type.icon,
        params: {
          type: type.name
        }
      }));
      var isOverlayVisible = menuIsOpen || searchIsOpen;
      var className = _DefaultLayout.default.root;
      if (isOverlayVisible) className += " ".concat(_DefaultLayout.default.isOverlayVisible);
      return _react.default.createElement("div", {
        className: className,
        onClickCapture: this.handleClickCapture
      }, this.state.showLoadingScreen && _react.default.createElement("div", {
        className: this.state.loaded || document.visibilityState == 'hidden' ? _DefaultLayout.default.loadingScreenLoaded : _DefaultLayout.default.loadingScreen,
        ref: this.setLoadingScreenElement
      }, _react.default.createElement(_appLoadingScreen.default, {
        text: "Restoring Sanity"
      })), _react.default.createElement("div", {
        className: _DefaultLayout.default.navBar
      }, _react.default.createElement(_NavBarContainer.default, {
        tools: tools,
        onCreateButtonClick: this.handleCreateButtonClick,
        onToggleMenu: this.handleToggleMenu,
        onSwitchTool: this.handleSwitchTool,
        router: router,
        user: this.state.user,
        searchIsOpen: searchIsOpen
        /* eslint-disable-next-line react/jsx-handler-names */
        ,
        onUserLogout: _user.default.actions.logout,
        onSearchOpen: this.handleSearchOpen,
        onSearchClose: this.handleSearchClose
      })), _react.default.createElement("div", {
        className: _DefaultLayout.default.sideMenuContainer
      }, _react.default.createElement(_SideMenu.default, {
        activeToolName: router.state.tool,
        isOpen: menuIsOpen,
        onClose: this.handleToggleMenu
        /* eslint-disable-next-line react/jsx-handler-names */
        ,
        onSignOut: _user.default.actions.logout,
        onSwitchTool: this.handleSwitchTool,
        tools: this.props.tools,
        user: this.state.user
      })), _react.default.createElement("div", {
        className: _DefaultLayout.default.mainArea
      }, _react.default.createElement("div", {
        className: _DefaultLayout.default.toolContainer
      }, _react.default.createElement(_router.RouteScope, {
        scope: router.state.tool
      }, _react.default.createElement(_RenderTool.default, {
        tool: router.state.tool
      })))), createMenuIsOpen && _react.default.createElement(_ActionModal.default, {
        onClose: this.handleActionModalClose,
        actions: modalActions
      }), _absolutes.default.map((Abs, i) => _react.default.createElement(Abs, {
        key: i
      })));
    });
  }

  componentWillMount() {
    this.userSubscription = _user.default.currentUser.subscribe(event => this.setState({
      user: event.user
    }));
  }

  componentDidMount() {
    if (this._loadingScreenElement && this.state.showLoadingScreen) {
      this._loadingScreenElement.addEventListener('animationend', this.handleAnimationEnd, false);
    }
  }

  componentWillUnmount() {
    this.userSubscription.unsubscribe();

    if (this._loadingScreenElement) {
      this._loadingScreenElement.removeEventListener('animationend', this.handleAnimationEnd, false);
    }
  }

  componentDidUpdate(prevProps) {
    if (!this.state.loaded) {
      this.setState({
        loaded: true
      });
    }
  }

  render() {
    return _react.default.createElement(_SchemaErrorReporter.SchemaErrorReporter, null, this.renderContent);
  }

}, _defineProperty(_class, "propTypes", {
  router: _propTypes.default.shape({
    state: _propTypes.default.shape({
      tool: _propTypes.default.string
    }),
    navigate: _propTypes.default.func
  }).isRequired,
  tools: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string
  })).isRequired
}), _temp));

exports.default = _default;