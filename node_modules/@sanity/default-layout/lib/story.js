"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactInk = _interopRequireDefault(require("react-ink"));

var _storybook = require("part:@sanity/storybook");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _hamburgerIcon = _interopRequireDefault(require("part:@sanity/base/hamburger-icon"));

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _pluginIcon = _interopRequireDefault(require("part:@sanity/base/plugin-icon"));

var _viewColumnIcon = _interopRequireDefault(require("part:@sanity/base/view-column-icon"));

var _Branding = _interopRequireDefault(require("./components/Branding"));

var _ToolSwitcherWidget = _interopRequireDefault(require("./components/ToolSwitcherWidget"));

var _NotFound = _interopRequireDefault(require("./components/NotFound"));

var _LoginStatus = _interopRequireDefault(require("./components/LoginStatus"));

var _SearchField = _interopRequireDefault(require("./components/SearchField"));

var _SearchResults = _interopRequireDefault(require("./components/SearchResults"));

var _ToolSwitcherItem = _interopRequireDefault(require("./components/ToolSwitcherItem"));

var _NavBar = _interopRequireDefault(require("./components/styles/NavBar.css"));

var _DefaultLayout = _interopRequireDefault(require("./components/styles/DefaultLayout.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */

/* eslint-disable react/jsx-no-bind */
(0, _storybook.storiesOf)('[tool] Default layout').addDecorator(_knobs.withKnobs).add('Example', () => {
  var menuIsOpen = (0, _knobs.boolean)('menuIsOpen', false, 'props');
  var searchIsOpen = (0, _knobs.boolean)('searchIsOpen', false, 'props');
  var isOverlayVisible = menuIsOpen || searchIsOpen;
  var className = _DefaultLayout.default.root;
  if (isOverlayVisible) className += " ".concat(_DefaultLayout.default.isOverlayVisible);
  return _react.default.createElement("div", {
    className: className
  }, _react.default.createElement("div", {
    className: _DefaultLayout.default.navBar
  }, _react.default.createElement("div", {
    className: _NavBar.default.root
  }, _react.default.createElement("div", {
    className: _NavBar.default.hamburger
  }, _react.default.createElement("button", {
    className: _NavBar.default.hamburgerButton,
    type: "button",
    title: "Menu",
    onClick: () => console.log('onClick()')
  }, _react.default.createElement(_hamburgerIcon.default, null))), _react.default.createElement("a", {
    className: _NavBar.default.branding,
    href: "#",
    onClick: evt => evt.preventDefault()
  }, _react.default.createElement(_Branding.default, null)), _react.default.createElement("a", {
    className: _NavBar.default.createButton,
    onClick: () => console.log('onClick()')
  }, _react.default.createElement("span", {
    className: _NavBar.default.createButtonIcon
  }, _react.default.createElement(_plusIcon.default, null)), _react.default.createElement("span", {
    className: _NavBar.default.createButtonText
  }, "New"), _react.default.createElement(_reactInk.default, {
    duration: 200,
    opacity: 0.1,
    radius: 200
  })), _react.default.createElement("div", {
    className: _NavBar.default.search
  }, _react.default.createElement(_SearchField.default, {
    hotkeys: ['F'],
    isFocused: (0, _knobs.boolean)('searchIsFocused', false, 'props'),
    isOpen: searchIsOpen,
    results: _react.default.createElement(_SearchResults.default, {
      activeIndex: (0, _knobs.number)('searchActiveIndex', -1, 'props'),
      isLoading: (0, _knobs.boolean)('searchIsLoading', false, 'props'),
      items: [],
      query: '',
      renderItem: key => _react.default.createElement("div", {
        key: key,
        style: {
          padding: '0.5em 0.75em'
        }
      }, key)
    }),
    value: '',
    onChange: () => console.log('change')
  })), _react.default.createElement("div", {
    className: _NavBar.default.toolSwitcher
  }, _react.default.createElement(_ToolSwitcherWidget.default, {
    onSwitchTool: event => console.log('onSwitchTool()', event),
    tools: [{
      name: 'Desk tool',
      icon: _viewColumnIcon.default
    }, {
      name: 'Plugin 1',
      icon: _pluginIcon.default
    }, {
      name: 'Plugin 2',
      icon: _pluginIcon.default
    }],
    renderItem: tool => _react.default.createElement(_ToolSwitcherItem.default, {
      title: tool.name,
      icon: tool.icon
    })
  })), _react.default.createElement("div", {
    className: _NavBar.default.loginStatus
  }, _react.default.createElement(_LoginStatus.default, {
    user: {
      name: 'John Doe',
      profileImage: 'https://randomuser.me/api/portraits/men/12.jpg'
    },
    onLogout: () => console.log('logout')
  })))));
}).add('Branding', () => {
  return _react.default.createElement("div", {
    className: _DefaultLayout.default.navBar
  }, _react.default.createElement("div", {
    className: _NavBar.default.root
  }, _react.default.createElement("div", {
    className: _NavBar.default.branding
  }, _react.default.createElement(_Branding.default, null))));
}).add('Toolswitcher', () => {
  return _react.default.createElement("div", {
    className: _DefaultLayout.default.navBar
  }, _react.default.createElement("div", {
    className: _NavBar.default.root
  }, _react.default.createElement("div", {
    className: _NavBar.default.toolSwitcher
  }, _react.default.createElement(_ToolSwitcherWidget.default, {
    onSwitchTool: event => console.log('onSwitchTool()', event),
    tools: [{
      name: 'Desk tool',
      icon: _viewColumnIcon.default
    }, {
      name: 'Plugin 1',
      icon: _pluginIcon.default
    }, {
      name: 'Plugin 2',
      icon: _pluginIcon.default
    }],
    renderItem: tool => _react.default.createElement(_ToolSwitcherItem.default, {
      title: tool.name,
      icon: tool.icon
    })
  }))));
}).add('ToolSwitcherItem', () => {
  return _react.default.createElement("div", {
    className: _DefaultLayout.default.navBar
  }, _react.default.createElement("div", {
    className: _NavBar.default.root
  }, _react.default.createElement("div", {
    className: _NavBar.default.toolSwitcher
  }, _react.default.createElement(_ToolSwitcherItem.default, {
    title: (0, _knobs.text)('title (prop)', 'Desk tool'),
    icon: _viewColumnIcon.default
  }))));
}).add('Not Found', () => {
  return _react.default.createElement(_NotFound.default, null);
}).add('Login Status', () => {
  return _react.default.createElement("div", {
    className: _DefaultLayout.default.navBar
  }, _react.default.createElement("div", {
    className: _NavBar.default.root
  }, _react.default.createElement("div", {
    className: _NavBar.default.loginStatus
  }, _react.default.createElement(_LoginStatus.default, {
    user: {
      name: 'John Doe',
      profileImage: 'https://randomuser.me/api/portraits/men/12.jpg'
    },
    onLogout: () => console.log('logout')
  }))));
}).add('Search Field (mobile)', () => {
  var hasResults = (0, _knobs.boolean)('hasResults', false, 'props');
  var items = hasResults ? ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] : [];
  var query = (0, _knobs.text)('query', '', 'props');
  return _react.default.createElement("div", {
    style: {
      background: '#444',
      height: '100vh'
    }
  }, _react.default.createElement("div", {
    style: {
      background: '#fff',
      margin: '0 auto',
      position: 'relative'
    }
  }, _react.default.createElement(_SearchField.default, {
    isBleeding: true,
    isFocused: (0, _knobs.boolean)('isFocused', false, 'props'),
    isOpen: (0, _knobs.boolean)('isOpen', false, 'props'),
    results: _react.default.createElement(_SearchResults.default, {
      activeIndex: (0, _knobs.number)('activeIndex', -1, 'props'),
      isLoading: (0, _knobs.boolean)('isLoading', false, 'props'),
      items: items,
      query: query,
      renderItem: key => _react.default.createElement("div", {
        key: key,
        style: {
          padding: '0.75em 1em'
        }
      }, key)
    }),
    value: query,
    onChange: () => console.log('change')
  })));
}).add('Search Field (desktop)', () => {
  var hasResults = (0, _knobs.boolean)('hasResults', false, 'props');
  var items = hasResults ? ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] : [];
  var query = (0, _knobs.text)('query', '', 'props');
  return _react.default.createElement("div", null, _react.default.createElement("div", {
    className: _DefaultLayout.default.navBar
  }, _react.default.createElement("div", {
    className: _NavBar.default.root
  }, _react.default.createElement("div", {
    className: _NavBar.default.search
  }, _react.default.createElement(_SearchField.default, {
    hotkeys: ['F'],
    isFocused: (0, _knobs.boolean)('isFocused', false, 'props'),
    isOpen: (0, _knobs.boolean)('isOpen', false, 'props'),
    results: _react.default.createElement(_SearchResults.default, {
      activeIndex: (0, _knobs.number)('activeIndex', -1, 'props'),
      isLoading: (0, _knobs.boolean)('isLoading', false, 'props'),
      items: items,
      query: query,
      renderItem: key => _react.default.createElement("div", {
        key: key,
        style: {
          padding: '0.5em 0.75em'
        }
      }, key)
    }),
    value: query,
    onChange: () => console.log('change')
  })))));
});