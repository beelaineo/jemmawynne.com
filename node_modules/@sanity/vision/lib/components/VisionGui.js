"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _queryString = _interopRequireDefault(require("query-string"));

var _localState = require("../util/localState");

var _parseApiQueryString = _interopRequireDefault(require("../util/parseApiQueryString"));

var _tryParseParams = _interopRequireDefault(require("../util/tryParseParams"));

var _DelayedSpinner = _interopRequireDefault(require("./DelayedSpinner"));

var _QueryEditor = _interopRequireDefault(require("./QueryEditor"));

var _ParamsEditor = _interopRequireDefault(require("./ParamsEditor"));

var _ResultView = _interopRequireDefault(require("./ResultView"));

var _NoResultsDialog = _interopRequireDefault(require("./NoResultsDialog"));

var _QueryErrorDialog = _interopRequireDefault(require("./QueryErrorDialog"));

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _encodeQueryString = _interopRequireDefault(require("../util/encodeQueryString"));

require("codemirror/lib/codemirror.css?raw");

require("codemirror/theme/material.css?raw");

require("codemirror/addon/hint/show-hint.css?raw");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var sanityUrl = /\.api\.sanity\.io.*?(?:query|listen)\/(.*?)\?(.*)/;

var handleCopyUrl = () => {
  var emailLink = document.querySelector('#vision-query-url');
  emailLink.select();

  try {
    document.execCommand('copy');
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error('Unable to copy to clipboard :(');
  }
};

class VisionGui extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);
    var lastQuery = (0, _localState.getState)('lastQuery');
    var lastParams = (0, _localState.getState)('lastParams');
    var firstDataset = this.props.datasets[0] && this.props.datasets[0].name;
    var defaultDataset = context.client.config().dataset || firstDataset;
    var dataset = (0, _localState.getState)('dataset', defaultDataset);

    if (!this.props.datasets.some((_ref) => {
      var name = _ref.name;
      return name === dataset;
    })) {
      dataset = defaultDataset;
    }

    this._queryEditorContainer = _react.default.createRef();
    this._paramsEditorContainer = _react.default.createRef();
    this.subscribers = {};
    this.state = {
      query: lastQuery,
      params: lastParams && (0, _tryParseParams.default)(lastParams),
      rawParams: lastParams,
      queryInProgress: false,
      dataset
    };
    this.handleChangeDataset = this.handleChangeDataset.bind(this);
    this.handleListenExecution = this.handleListenExecution.bind(this);
    this.handleListenerMutation = this.handleListenerMutation.bind(this);
    this.handleQueryExecution = this.handleQueryExecution.bind(this);
    this.handleQueryChange = this.handleQueryChange.bind(this);
    this.handleParamsChange = this.handleParamsChange.bind(this);
    this.handlePaste = this.handlePaste.bind(this);
  }

  componentDidMount() {
    this.context.client.config({
      dataset: this.state.dataset
    });
    window.document.addEventListener('paste', this.handlePaste);
  }

  componentWillUnmount() {
    this.cancelQuery();
    this.cancelListener();
  }

  handlePaste(evt) {
    var data = evt.clipboardData.getData('text/plain');
    var match = data.match(sanityUrl);

    if (!match) {
      return;
    }

    var _match = _slicedToArray(match, 3),
        dataset = _match[1],
        urlQuery = _match[2];

    var qs = _queryString.default.parse(urlQuery);

    var parts;

    try {
      parts = (0, _parseApiQueryString.default)(qs);
    } catch (err) {
      console.warn('Error while trying to parse API URL: ', err.message); // eslint-disable-line no-console

      return; // Give up on error
    }

    if (this.context.client.config().dataset !== dataset) {
      this.handleChangeDataset({
        target: {
          value: dataset
        }
      });
    }

    evt.preventDefault();
    this.setState({
      query: parts.query,
      params: parts.params,
      rawParams: JSON.stringify(parts.params, null, 2)
    });
  }

  cancelQuery() {
    if (!this.subscribers.query) {
      return;
    }

    this.subscribers.query.unsubscribe();
    this.subscribers.query = null;
  }

  cancelListener() {
    if (!this.subscribers.listen) {
      return;
    }

    this.subscribers.listen.unsubscribe();
    this.subscribers.listen = null;
  }

  handleChangeDataset(evt) {
    var dataset = evt.target.value;
    (0, _localState.storeState)('dataset', dataset);
    this.setState({
      dataset
    });
    this.context.client.config({
      dataset
    });
    this.handleQueryExecution();
  }

  handleListenerMutation(mut) {
    // eslint-disable-next-line react/no-access-state-in-setstate
    var listenMutations = [mut].concat(this.state.listenMutations);

    if (listenMutations.length > 50) {
      listenMutations.pop();
    }

    this.setState({
      listenMutations
    });
  }

  handleListenExecution() {
    var _this$state = this.state,
        query = _this$state.query,
        params = _this$state.params,
        rawParams = _this$state.rawParams,
        listenInProgress = _this$state.listenInProgress;

    if (listenInProgress) {
      this.cancelListener();
      this.setState({
        listenInProgress: false
      });
      return;
    }

    var client = this.context.client;
    var paramsError = params instanceof Error && params;
    var url = client.getUrl(client.getDataUrl('listen', (0, _encodeQueryString.default)(query, params)));
    (0, _localState.storeState)('lastQuery', query);
    (0, _localState.storeState)('lastParams', rawParams);
    this.cancelQuery();
    this.setState({
      url,
      listenMutations: [],
      queryInProgress: false,
      listenInProgress: !paramsError && Boolean(query),
      error: paramsError || undefined,
      result: undefined,
      queryTime: null,
      e2eTime: null
    });

    if (!query || paramsError) {
      return;
    }

    this.subscribers.listen = client.listen(query, params, {}).subscribe({
      next: this.handleListenerMutation,
      error: _error => this.setState({
        error: _error,
        query,
        listenInProgress: false
      })
    });
  }

  handleQueryExecution() {
    var _this$state2 = this.state,
        query = _this$state2.query,
        params = _this$state2.params,
        rawParams = _this$state2.rawParams;
    var client = this.context.client.observable;
    var paramsError = params instanceof Error && params;
    (0, _localState.storeState)('lastQuery', query);
    (0, _localState.storeState)('lastParams', rawParams);
    this.cancelListener();
    this.setState({
      queryInProgress: !paramsError && Boolean(query),
      listenInProgress: false,
      listenMutations: [],
      error: paramsError || undefined,
      result: undefined,
      queryTime: null,
      e2eTime: null
    });

    if (!query || paramsError) {
      return;
    }

    var url = client.getUrl(client.getDataUrl('query', (0, _encodeQueryString.default)(query, params)));
    var queryStart = Date.now();
    this.subscribers.query = client.fetch(query, params, {
      filterResponse: false
    }).subscribe({
      next: res => this.setState({
        query,
        url,
        queryTime: res.ms,
        e2eTime: Date.now() - queryStart,
        result: res.result,
        queryInProgress: false,
        error: null
      }),
      error: _error2 => this.setState({
        error: _error2,
        query,
        queryInProgress: false
      })
    });
  }

  handleQueryChange(data) {
    this.setState({
      query: data.query
    });
  }

  handleParamsChange(data) {
    this.setState({
      rawParams: data.raw,
      params: data.parsed
    });
  }

  render() {
    var _this$context = this.context,
        client = _this$context.client,
        components = _this$context.components;
    var _this$state3 = this.state,
        error = _this$state3.error,
        result = _this$state3.result,
        url = _this$state3.url,
        query = _this$state3.query,
        queryInProgress = _this$state3.queryInProgress,
        listenInProgress = _this$state3.listenInProgress,
        queryTime = _this$state3.queryTime,
        e2eTime = _this$state3.e2eTime,
        listenMutations = _this$state3.listenMutations;
    var Button = components.Button,
        Select = components.Select;
    var styles = this.context.styles.visionGui;
    var dataset = client.config().dataset;
    var datasets = this.props.datasets.map(set => set.name);
    var hasResult = !error && !queryInProgress && typeof result !== 'undefined'; // Note that because of react-json-inspector, we need at least one
    // addressable, non-generated class name. Therefore;
    // leave `sanity-vision` untouched!

    var visionClass = ['sanity-vision', this.context.styles.visionGui.root].filter(Boolean).join(' ');
    var headerClass = ['sanity-vision', this.context.styles.visionGui.header].filter(Boolean).join(' ');
    return _react.default.createElement("div", {
      className: visionClass
    }, _react.default.createElement("div", {
      className: headerClass
    }, _react.default.createElement("div", {
      className: styles.headerLeft
    }, _react.default.createElement("label", {
      className: styles.datasetSelectorContainer
    }, _react.default.createElement("span", {
      className: styles.datasetLabel
    }, "Dataset"), _react.default.createElement(Select, {
      value: this.state.dataset || client.config().dataset,
      values: datasets,
      onChange: this.handleChangeDataset
    }))), typeof url === 'string' && _react.default.createElement("div", {
      className: styles.queryUrlContainer
    }, _react.default.createElement("div", null, "Query URL\xA0", _react.default.createElement("a", {
      onClick: handleCopyUrl,
      className: styles.queryUrlCopy
    }, "copy")), _react.default.createElement("div", {
      className: styles.queryUrlLine
    }, _react.default.createElement("input", {
      className: styles.queryUrl,
      readOnly: true,
      id: "vision-query-url",
      value: url
    }))), _react.default.createElement("div", {
      className: styles.queryTimingContainer
    }, typeof queryTime === 'number' && _react.default.createElement("p", {
      className: queryTime > 0.5 ? styles.queryTiming || 'queryTiming' : styles.queryTimingLong || 'queryTiming'
    }, "Query time", _react.default.createElement("br", null), _react.default.createElement("span", null, queryTime, "ms (end-to-end: ", e2eTime, "ms)"))), _react.default.createElement("div", {
      className: styles.headerFunctions
    }, _react.default.createElement(Button, {
      onClick: this.handleListenExecution,
      loading: listenInProgress,
      color: "white",
      inverted: true
    }, "Listen"), _react.default.createElement(Button, {
      onClick: this.handleQueryExecution,
      loading: queryInProgress,
      color: "primary"
    }, "Run query"))), _react.default.createElement("div", {
      className: styles.splitContainer
    }, _react.default.createElement(_reactSplitPane.default, {
      split: "vertical",
      minSize: 150,
      defaultSize: 400
    }, _react.default.createElement("div", {
      className: styles.edit
    }, _react.default.createElement(_reactSplitPane.default, {
      split: "horizontal",
      defaultSize: '80%'
    }, _react.default.createElement("div", {
      className: styles.inputContainer,
      ref: this._queryEditorContainer
    }, _react.default.createElement("h3", {
      className: styles.inputLabelQuery || 'query'
    }, "Query"), _react.default.createElement(_QueryEditor.default, {
      className: styles.queryEditor,
      value: this.state.query,
      onExecute: this.handleQueryExecution,
      onChange: this.handleQueryChange,
      schema: this.props.schema
    })), _react.default.createElement("div", {
      className: styles.inputContainer,
      ref: this._paramsEditorContainer
    }, _react.default.createElement("h3", {
      className: styles.inputLabelQuery || 'query'
    }, "Params"), _react.default.createElement(_ParamsEditor.default, {
      className: styles.paramsEditor,
      classNameInvalid: styles.paramsEditorInvalid,
      value: this.state.rawParams,
      onExecute: this.handleQueryExecution,
      onChange: this.handleParamsChange
    })))), _react.default.createElement("div", {
      className: styles.resultContainer
    }, _react.default.createElement("h3", {
      className: styles.inputLabelQuery || 'resultLabel'
    }, "Result"), _react.default.createElement("div", {
      className: styles.result
    }, queryInProgress && _react.default.createElement(_DelayedSpinner.default, null), error && _react.default.createElement(_QueryErrorDialog.default, {
      error: error
    }), hasResult && _react.default.createElement(_ResultView.default, {
      data: result,
      query: query
    }), Array.isArray(result) && result.length === 0 && _react.default.createElement("div", {
      className: styles.noResult
    }, _react.default.createElement(_NoResultsDialog.default, {
      query: query,
      dataset: dataset
    })), listenMutations && listenMutations.length > 0 && _react.default.createElement(_ResultView.default, {
      data: listenMutations
    }))))));
  }

}

VisionGui.propTypes = {
  schema: _propTypes.default.object,
  datasets: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string
  }))
};
VisionGui.contextTypes = {
  client: _propTypes.default.shape({
    fetch: _propTypes.default.func
  }).isRequired,
  styles: _propTypes.default.object,
  components: _propTypes.default.object
};
var _default = VisionGui;
exports.default = _default;