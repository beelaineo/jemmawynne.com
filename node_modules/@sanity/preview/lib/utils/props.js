"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = props;

var _rxjs = require("rxjs");

var _isObservable = _interopRequireDefault(require("is-observable"));

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function setKey(source, key, value) {
  return _objectSpread({}, source, {
    [key]: value
  });
}

function props() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return source => {
    return new _rxjs.Observable(observer => source.subscribe(observer)).pipe((0, _operators.switchMap)(object => {
      var keyObservables = Object.keys(object).map(key => {
        var value = object[key];
        return (0, _isObservable.default)(value) ? (0, _rxjs.from)(value).pipe((0, _operators.map)(val => [key, val])) : (0, _rxjs.of)([key, value]);
      });
      return options.wait ? (0, _rxjs.from)(keyObservables).pipe((0, _operators.combineAll)(), (0, _operators.map)(pairs => pairs.reduce((acc, _ref) => {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        return setKey(acc, key, value);
      }, {}))) : (0, _rxjs.from)(keyObservables).pipe((0, _operators.mergeAll)(), (0, _operators.scan)((acc, _ref3) => {
        var _ref4 = _slicedToArray(_ref3, 2),
            key = _ref4[0],
            value = _ref4[1];

        return setKey(acc, key, value);
      }, {}));
    }));
  };
}