"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fromEvent;

var _rxjs = require("rxjs");

var supportsPassive = () => {
  supportsPassive = () => false;

  try {
    var options = Object.defineProperty({}, 'passive', {
      // eslint-disable-next-line getter-return
      get() {
        supportsPassive = () => true;
      }

    });
    window.addEventListener('test', null, options);
    window.removeEventListener('test', null, options);
  } catch (e) {} // eslint-disable-line no-empty


  return supportsPassive();
};

function fromEvent(target, eventType, options) {
  if (typeof options === 'boolean') {
    throw new TypeError('The third argument to fromEvent(..) should be an EventListenerOptions object, not a boolean');
  }

  var compatOptions = options;

  if (options && !supportsPassive()) {
    if (__DEV__) {
      // eslint-disable-next-line no-console
      console.warn('This browser does not support EventListenerOptions, only `options.capture` will be used when calling addEventListener');
    }

    compatOptions = options.capture;
  }

  return new _rxjs.Observable(observer => {
    var listener = event => observer.next(event);

    target.addEventListener(eventType, listener, compatOptions); // console.log('add', eventType, options)

    return () => {
      // console.log('remove', eventType, options)
      target.removeEventListener(eventType, listener, compatOptions);
    };
  });
}