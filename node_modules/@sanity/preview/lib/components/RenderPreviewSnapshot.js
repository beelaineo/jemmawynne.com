"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RenderPreviewSnapshot;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _previewResolver = _interopRequireDefault(require("part:@sanity/base/preview-resolver?"));

var _SanityDefaultPreview = _interopRequireDefault(require("./SanityDefaultPreview"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Set this to true for debugging preview subscriptions
var DEBUG = false;

function resolvePreview(type) {
  var fromPreview = (0, _get2.default)(type, 'preview.component');

  if (fromPreview) {
    return fromPreview;
  }

  var custom = _previewResolver.default && (0, _previewResolver.default)(type);
  return custom || _SanityDefaultPreview.default;
}

function RenderPreviewSnapshot(props) {
  var snapshot = props.snapshot,
      type = props.type,
      isLive = props.isLive,
      layout = props.layout,
      rest = _objectWithoutProperties(props, ["snapshot", "type", "isLive", "layout"]);

  var PreviewComponent = resolvePreview(type); // TODO: Bjoerge: Check for image type with "is()"

  var renderAsBlockImage = layout === 'block' && type && type.name === 'image';

  var preview = _react.default.createElement(PreviewComponent // Render media always until we have schema functionality for determining if there is media
  , _extends({
    media: () => undefined
  }, rest, {
    value: snapshot,
    icon: type && type.icon,
    layout: layout,
    isPlaceholder: !snapshot,
    _renderAsBlockImage: renderAsBlockImage
  }));

  if (DEBUG) {
    return _react.default.createElement("div", null, _react.default.createElement("span", {
      style: {
        position: 'absolute',
        right: 24,
        top: 2
      }
    }, isLive ? '‚ö°Ô∏è' : 'üí§'), preview);
  }

  return preview;
}

RenderPreviewSnapshot.propTypes = {
  snapshot: _propTypes.default.object,
  type: _propTypes.default.object,
  isLive: _propTypes.default.bool,
  layout: _propTypes.default.string
};