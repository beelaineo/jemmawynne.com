"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observeForPreview;

var _resolveRefType = _interopRequireDefault(require("./resolveRefType"));

var _prepareForPreview = _interopRequireWildcard(require("./prepareForPreview"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _observePaths = _interopRequireDefault(require("./observePaths"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function is(typeName, type) {
  return type.name === typeName || type.type && is(typeName, type.type);
} // Takes a value and its type and prepares a snapshot for it that can be passed to a preview component


function observeForPreview(value, type, fields, viewOptions) {
  if (is('reference', type)) {
    // if the value is of type reference, but has no _ref property, we cannot prepare any value for the preview
    // and the most sane thing to do is to return `null` for snapshot
    if (!value._ref) {
      return (0, _rxjs.of)({
        snapshot: null
      });
    } // Previewing references actually means getting the referenced value,
    // and preview using the preview config of its type
    // todo: We need a way of knowing the type of the referenced value by looking at the reference record alone


    return (0, _resolveRefType.default)(value, type).pipe((0, _operators.switchMap)(refType => refType ? observeForPreview(value, refType, fields) : (0, _rxjs.of)({
      type: type,
      snapshot: null
    })));
  }

  var selection = type.preview.select;

  if (selection) {
    var configFields = Object.keys(selection);
    var targetFields = fields ? configFields.filter(fieldName => fields.includes(fieldName)) : configFields;
    var paths = targetFields.map(key => selection[key].split('.'));
    return (0, _observePaths.default)(value, paths).pipe((0, _operators.map)(snapshot => ({
      type: type,
      snapshot: snapshot && (0, _prepareForPreview.default)(snapshot, type, viewOptions)
    })));
  }

  return (0, _rxjs.of)({
    type: type,
    snapshot: (0, _prepareForPreview.invokePrepare)(type, value, viewOptions)
  });
}