"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prepareForPreview;
exports.invokePrepare = void 0;

var _uniqBy2 = _interopRequireDefault(require("lodash/uniqBy"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var identity = v => v;

var PRESERVE_KEYS = ['_id', '_type', '_upload'];
var EMPTY = [];

var errorCollector = (() => {
  var errorsByType = {};
  return {
    add: (type, value, error) => {
      if (!errorsByType[type.name]) {
        errorsByType[type.name] = [];
      }

      errorsByType[type.name].push({
        error: error,
        type: type,
        value
      });
    },

    getAll() {
      return errorsByType;
    },

    clear() {
      errorsByType = {};
    }

  };
})();

var reportErrors = (0, _debounce2.default)(() => {
  /* eslint-disable no-console */
  var errorsByType = errorCollector.getAll();
  var uniqueErrors = (0, _flatten2.default)(Object.keys(errorsByType).map(typeName => {
    var entries = errorsByType[typeName];
    return (0, _uniqBy2.default)(entries, entry => entry.error.message);
  }));
  var errorCount = uniqueErrors.length;

  if (errorCount === 0) {
    return;
  }

  console.groupCollapsed(`%cHeads up! Got ${errorCount === 1 ? 'error' : `${errorCount} errors`} while preparing data for preview. Click for details.` + ' This may be a hard failure in production and cause your Studio to crash.', 'color: #ff7e7c');
  Object.keys(errorsByType).forEach(typeName => {
    var entries = errorsByType[typeName];
    var first = entries[0];
    console.group(`Check the preview config for schema type "${typeName}": %o`, first.type.preview);
    var uniqued = (0, _uniqBy2.default)(entries, entry => entry.error.message);
    uniqued.forEach(entry => {
      if (entry.error.type === 'returnValueError') {
        var hasPrepare = typeof entry.type.preview.prepare === 'function';
        var value = entry.value,
            error = entry.error;
        console.log(`Encountered an invalid ${hasPrepare ? 'return value when calling prepare(%o)' : 'value targeted by preview.select'}:`, value);
        console.error(error);
      }

      if (entry.error.type === 'prepareError') {
        var _value = entry.value,
            _error = entry.error;
        console.log('Encountered an error when calling prepare(%o):', _value);
        console.error(_error);
      }
    });
    console.groupEnd();
  });
  console.groupEnd();
  errorCollector.clear();
  /* eslint-enable no-console */
}, 1000);

var isRenderable = fieldName => value => {
  var type = typeof value;

  if (value === null || type === 'undefined' || type === 'string' || type === 'number' || type === 'boolean') {
    return EMPTY;
  }

  return [assignType('returnValueError', new Error(`The "${fieldName}" field should be a string, number, boolean, undefined or null, instead saw ${inspect(value)}`))];
};

var FIELD_NAME_VALIDATORS = {
  media: () => {
    // not sure how to validate media as it would  possibly involve executing a function and check the
    // return value
    return EMPTY;
  },
  title: isRenderable('title'),
  subtitle: isRenderable('subtitle'),
  description: isRenderable('description'),
  imageUrl: isRenderable('imageUrl'),
  date: isRenderable('date')
};

function inspect(val) {
  var prefixType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if ((0, _isPlainObject2.default)(val)) {
    var keys = Object.keys(val);
    var ellipse = keys.length > 3 ? '...' : '';
    var prefix = `object with keys `;
    return `${prefixType ? prefix : ''}{${keys.slice(0, 3).join(', ')}${ellipse}}`;
  }

  if (Array.isArray(val)) {
    var _ellipse = val.length > 3 ? '...' : '';

    var _prefix = `array with `;
    return `${prefixType ? _prefix : ''}[${val.map(v => inspect(v, false))}${_ellipse}]`;
  }

  return `the ${typeof val} ${val}`;
}

function validateFieldValue(fieldName, fieldValue) {
  if (typeof fieldValue === 'undefined') {
    return EMPTY;
  }

  var validator = FIELD_NAME_VALIDATORS[fieldName];
  return validator && validator(fieldValue) || EMPTY;
}

function assignType(type, error) {
  return Object.assign(error, {
    type
  });
}

function validatePreparedValue(preparedValue) {
  if (!(0, _isPlainObject2.default)(preparedValue)) {
    return [assignType('returnValueError', new Error(`Invalid return value. Expected a plain object with at least a 'title' field, instead saw ${inspect(preparedValue)}`))];
  }

  return Object.keys(preparedValue).reduce((acc, fieldName) => {
    return [...acc, ...validateFieldValue(fieldName, preparedValue[fieldName])];
  }, EMPTY);
}

function validateReturnedPreview(result) {
  return _objectSpread({}, result, {
    errors: [...result.errors, ...validatePreparedValue(result.returnValue)]
  });
}

function invokePrepareChecked(type, value, viewOptions) {
  var prepare = type.preview.prepare;

  try {
    return {
      returnValue: prepare ? prepare(value, viewOptions) : value,
      errors: EMPTY
    };
  } catch (error) {
    return {
      returnValue: null,
      errors: [assignType(error, 'prepareError')]
    };
  }
}

function invokePrepareUnchecked(type, value, viewOptions) {
  return {
    selectedValue: value,
    returnValue: (type.preview.prepare || identity)(value, viewOptions),
    errors: EMPTY
  };
}

var invokePrepare = __DEV__ ? invokePrepareChecked : invokePrepareUnchecked;
exports.invokePrepare = invokePrepare;

function withErrors(result, type, selectedValue) {
  result.errors.forEach(error => errorCollector.add(type, selectedValue, error));
  reportErrors();
  return _constants.INVALID_PREVIEW_CONFIG;
}

function prepareForPreview(rawValue, type, viewOptions) {
  var selection = type.preview.select;
  var targetKeys = Object.keys(selection);
  var selectedValue = targetKeys.reduce((acc, key) => {
    acc[key] = (0, _get2.default)(rawValue, selection[key]);
    return acc;
  }, {});
  var prepareResult = invokePrepare(type, selectedValue, viewOptions);

  if (prepareResult.errors.length > 0) {
    return withErrors(prepareResult, type, selectedValue);
  }

  var returnValueResult = validateReturnedPreview(invokePrepare(type, selectedValue, viewOptions));
  return returnValueResult.errors.length > 0 ? withErrors(returnValueResult, type, selectedValue) : _objectSpread({}, (0, _pick2.default)(rawValue, PRESERVE_KEYS), prepareResult.returnValue);
}