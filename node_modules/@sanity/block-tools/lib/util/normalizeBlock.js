"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeBlock;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _randomKey = _interopRequireDefault(require("./randomKey"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// For a block with _type 'block' (text), join spans where possible
function normalizeBlock(block) {
  var newIndex = 0;

  if (!block._key) {
    block._key = (0, _randomKey.default)(12);
  }

  if (block._type !== 'block') {
    return block;
  }

  if (!block.children) {
    block.children = [];
  }

  if (!block.markDefs) {
    block.markDefs = [];
  }

  var lastChild = block.children.slice(-1)[0];

  if (!lastChild) {
    // A block must at least have an empty span type child
    block.children = [{
      _type: 'span',
      _key: "".concat(block._key, 0),
      text: '',
      marks: []
    }];
    return block;
  }

  block.children = block.children.filter((child, index) => {
    var previousChild = block.children[index - 1];

    if (previousChild && child._type === 'span' && previousChild._type === 'span' && (0, _isEqual2.default)(previousChild.marks, child.marks)) {
      if (lastChild && lastChild === child && child.text === '' && block.children.length > 1) {
        return false;
      }

      previousChild.text += child.text;
      return false;
    }

    return child;
  }).map(child => {
    child._key = "".concat(block._key).concat(newIndex++);

    if (child._type === 'span' && !child.marks) {
      child.marks = [];
    }

    return child;
  });
  return block;
}