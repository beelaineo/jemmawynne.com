"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = blocksToEditorValue;

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _randomKey = _interopRequireDefault(require("../util/randomKey"));

var _resolveJsType = _interopRequireDefault(require("../util/resolveJsType"));

var _blockContentTypeFeatures = _interopRequireDefault(require("../util/blockContentTypeFeatures"));

var _normalizeBlock = _interopRequireDefault(require("../util/normalizeBlock"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var EMPTY_TEXT_NODE = {
  object: 'text',
  leaves: [{
    object: 'leaf',
    text: '',
    marks: []
  }]
};

function resolveTypeName(value) {
  var jsType = (0, _resolveJsType.default)(value);
  return jsType === 'object' && '_type' in value && value._type || jsType;
}

function hasKeys(obj) {
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      return true;
    }
  }

  return false;
}

function toRawMark(markName) {
  return {
    object: 'mark',
    type: markName
  };
}

function sanitySpanToRawSlateBlockNode(span, sanityBlock, blockContentFeatures, childIndex) {
  // Inline object
  if (span._type !== 'span') {
    var _spanKey = "".concat(sanityBlock._key).concat(childIndex());

    span._key = _spanKey;
    return {
      object: 'inline',
      isVoid: true,
      key: _spanKey,
      type: span._type,
      data: {
        value: span,
        _key: _spanKey
      },
      nodes: [EMPTY_TEXT_NODE]
    };
  }

  var text = span.text,
      _span$marks = span.marks,
      marks = _span$marks === void 0 ? [] : _span$marks;
  var schemaDecorators = blockContentFeatures.decorators.map(decorator => decorator.value);
  var decorators = marks.filter(mark => schemaDecorators.includes(mark));
  var annotationKeys = marks.filter(mark => decorators.indexOf(mark) === -1 && sanityBlock.markDefs.map(def => def._key).includes(mark));
  var annotations;

  if (annotationKeys.length) {
    annotations = {};
    annotationKeys.forEach(key => {
      var annotation = sanityBlock.markDefs.find(def => def._key === key);

      if (annotations && annotation) {
        annotations[annotation._type] = annotation;
      }
    });
  }

  var leaf = {
    object: 'leaf',
    text: text,
    marks: (0, _uniq2.default)(decorators.concat(annotationKeys).filter(Boolean)).map(toRawMark)
  };

  if (!annotations) {
    return {
      object: 'text',
      leaves: [leaf],
      key: "".concat(sanityBlock._key).concat(childIndex())
    };
  }

  var spanKey = "".concat(sanityBlock._key).concat(childIndex());
  return {
    object: 'inline',
    isVoid: false,
    type: 'span',
    key: spanKey,
    data: {
      _key: spanKey,
      annotations: annotations
    },
    nodes: [{
      object: 'text',
      leaves: [leaf]
    }]
  };
} // Block type object


function sanityBlockToRawNode(sanityBlock, blockContentFeatures) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var children = sanityBlock.children,
      _type = sanityBlock._type,
      markDefs = sanityBlock.markDefs,
      rest = _objectWithoutProperties(sanityBlock, ["children", "_type", "markDefs"]);

  if (!sanityBlock._key) {
    sanityBlock._key = (0, _randomKey.default)(12);
  }

  var restData = {};

  if (hasKeys(rest)) {
    restData = {
      data: _objectSpread({
        _type,
        _key: sanityBlock._key
      }, rest) // Check if we should allow listItem if present

    };
    var listItem = restData.data.listItem;

    if (listItem && !blockContentFeatures.lists.find(list => list.value === listItem)) {
      delete restData.data.listItem;
    } // Check if we should allow style if present


    var style = restData.data.style;

    if (style && !blockContentFeatures.styles.find(_style => _style.value === style)) {
      restData.data.style = 'normal';
    }
  }

  var index = 0;

  var childIndex = () => {
    return index++;
  };

  var block = _objectSpread({
    object: 'block',
    key: sanityBlock._key,
    isVoid: false,
    type: 'contentBlock'
  }, restData, {
    nodes: children.length > 0 ? children.map(child => sanitySpanToRawSlateBlockNode(child, sanityBlock, blockContentFeatures, childIndex)) : [EMPTY_TEXT_NODE]
  });

  if (options.normalize) {
    return (0, _normalizeBlock.default)(block);
  }

  return block;
} // Embedded object


function sanityBlockItemToRaw(blockItem, blockContentFeatures) {
  if (!blockItem._key) {
    blockItem._key = (0, _randomKey.default)(12);
  }

  var type = blockContentFeatures.types.blockObjects.map(objType => objType.name).concat('block').includes(blockItem._type) ? blockItem._type : '__unknown';
  return {
    object: 'block',
    key: blockItem._key,
    type,
    isVoid: true,
    data: {
      value: blockItem,
      _key: blockItem._key
    },
    nodes: [EMPTY_TEXT_NODE]
  };
}

function sanityBlockItemToRawNode(blockItem, type, blockContentFeatures, options) {
  var blockItemType = resolveTypeName(blockItem);
  return blockItemType === 'block' ? sanityBlockToRawNode(blockItem, blockContentFeatures, options) : sanityBlockItemToRaw(blockItem, blockContentFeatures, options);
}

function sanityBlocksArrayToRawNodes(blockArray, type, blockContentFeatures) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return blockArray.map(item => sanityBlockItemToRawNode(item, type, blockContentFeatures, options));
}

function blocksToEditorValue(array, type) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var blockContentFeatures = (0, _blockContentTypeFeatures.default)(type);
  return {
    object: 'value',
    data: {},
    document: {
      key: (0, _randomKey.default)(12),
      object: 'document',
      data: {},
      nodes: array && array.length > 0 ? sanityBlocksArrayToRawNodes(array, type, blockContentFeatures, options) : []
    }
  };
}