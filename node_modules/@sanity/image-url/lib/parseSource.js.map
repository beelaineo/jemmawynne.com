{"version":3,"sources":["../src/parseSource.js"],"names":["parseSource","source","image","isUrl","asset","_ref","urlToId","_id","url","crop","hotspot","applyDefaults","test","parts","split","slice","replace","result","Object","assign","left","top","bottom","right","x","y","height","width"],"mappings":";;;;;;;;;AAAA;AACA;AACe,SAASA,WAAT,CAAqBC,MAArB,EAA6B;AAC1C,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAED,MAAIC,KAAJ;;AAEA,MAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8BE,KAAK,CAACF,MAAD,CAAvC,EAAiD;AAC/C;AACAC,IAAAA,KAAK,GAAG;AACNE,MAAAA,KAAK,EAAE;AAACC,QAAAA,IAAI,EAAEC,OAAO,CAACL,MAAD;AAAd;AADD,KAAR;AAGD,GALD,MAKO,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AACrC;AACAC,IAAAA,KAAK,GAAG;AACNE,MAAAA,KAAK,EAAE;AAACC,QAAAA,IAAI,EAAEJ;AAAP;AADD,KAAR;AAGD,GALM,MAKA,IAAI,OAAOA,MAAM,CAACI,IAAd,KAAuB,QAA3B,EAAqC;AAC1C;AACAH,IAAAA,KAAK,GAAG;AACNE,MAAAA,KAAK,EAAEH;AADD,KAAR;AAGD,GALM,MAKA,IAAIA,MAAM,CAACM,GAAX,EAAgB;AACrB;AACAL,IAAAA,KAAK,GAAG;AACNE,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAEJ,MAAM,CAACM;AADR;AADD,KAAR;AAKD,GAPM,MAOA,IAAIN,MAAM,CAACG,KAAP,IAAgBH,MAAM,CAACG,KAAP,CAAaI,GAA7B,IAAoC,CAACP,MAAM,CAACG,KAAP,CAAaC,IAAtD,EAA4D;AACjEH,IAAAA,KAAK,GAAG;AACNE,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAEC,OAAO,CAACL,MAAM,CAACG,KAAP,CAAaI,GAAd;AADR;AADD,KAAR;AAKD,GANM,MAMA,IAAI,QAAOP,MAAM,CAACG,KAAd,MAAwB,QAA5B,EAAsC;AAC3CF,IAAAA,KAAK,GAAGD,MAAR;AACD,GAFM,MAEA;AACL;AACA;AACA,WAAO,IAAP;AACD;;AAED,MAAIA,MAAM,CAACQ,IAAX,EAAiB;AACfP,IAAAA,KAAK,CAACO,IAAN,GAAaR,MAAM,CAACQ,IAApB;AACD;;AACD,MAAIR,MAAM,CAACS,OAAX,EAAoB;AAClBR,IAAAA,KAAK,CAACQ,OAAN,GAAgBT,MAAM,CAACS,OAAvB;AACD;;AAED,SAAOC,aAAa,CAACT,KAAD,CAApB;AACD;;AAED,SAASC,KAAT,CAAeK,GAAf,EAAoB;AAClB,SAAO,eAAeI,IAAf,WAAuBJ,GAAvB,EAAP;AACD;;AAED,SAASF,OAAT,CAAiBE,GAAjB,EAAsB;AACpB,MAAMK,KAAK,GAAGL,GAAG,CAACM,KAAJ,CAAU,GAAV,EAAeC,KAAf,CAAqB,CAAC,CAAtB,CAAd;AACA,SAAO,gBAASF,KAAK,CAAC,CAAD,CAAd,EAAoBG,OAApB,CAA4B,aAA5B,EAA2C,KAA3C,CAAP;AACD,C,CAED;;;AACA,SAASL,aAAT,CAAuBT,KAAvB,EAA8B;AAC5B,MAAIA,KAAK,CAACO,IAAN,IAAcP,KAAK,CAACQ,OAAxB,EAAiC;AAC/B,WAAOR,KAAP;AACD,GAH2B,CAK5B;;;AACA,MAAMe,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjB,KAAlB,CAAf;;AAEA,MAAI,CAACe,MAAM,CAACR,IAAZ,EAAkB;AAChBQ,IAAAA,MAAM,CAACR,IAAP,GAAc;AACZW,MAAAA,IAAI,EAAE,CADM;AAEZC,MAAAA,GAAG,EAAE,CAFO;AAGZC,MAAAA,MAAM,EAAE,CAHI;AAIZC,MAAAA,KAAK,EAAE;AAJK,KAAd;AAMD;;AAED,MAAI,CAACN,MAAM,CAACP,OAAZ,EAAqB;AACnBO,IAAAA,MAAM,CAACP,OAAP,GAAiB;AACfc,MAAAA,CAAC,EAAE,GADY;AAEfC,MAAAA,CAAC,EAAE,GAFY;AAGfC,MAAAA,MAAM,EAAE,GAHO;AAIfC,MAAAA,KAAK,EAAE;AAJQ,KAAjB;AAMD;;AAED,SAAOV,MAAP;AACD","sourcesContent":["// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source) {\n  if (!source) {\n    return null\n  }\n\n  let image\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)}\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source}\n    }\n  } else if (typeof source._ref === 'string') {\n    // We just got passed an asset directly\n    image = {\n      asset: source\n    }\n  } else if (source._id) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id\n      }\n    }\n  } else if (source.asset && source.asset.url && !source.asset._ref) {\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url)\n      }\n    }\n  } else if (typeof source.asset === 'object') {\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  if (source.crop) {\n    image.crop = source.crop\n  }\n  if (source.hotspot) {\n    image.hotspot = source.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image) {\n  if (image.crop && image.hotspot) {\n    return image\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = Object.assign({}, image)\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0\n    }\n  }\n\n  return result\n}\n"],"file":"parseSource.js"}