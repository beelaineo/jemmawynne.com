"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _find2 = _interopRequireDefault(require("lodash/find"));

var _semver = _interopRequireDefault(require("semver"));

var _chalk = _interopRequireDefault(require("chalk"));

var _package = require("../../package.json");

var _dynamicRequire = _interopRequireDefault(require("./dynamicRequire"));

var _getUpgradeCommand = _interopRequireDefault(require("./getUpgradeCommand"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (baseCommands, corePath, options = {}) => {
  if (!corePath) {
    return baseCommands;
  }

  const {
    cwd,
    workDir
  } = options;
  const core = (0, _dynamicRequire.default)(corePath);

  if (core.requiredCliVersionRange && !_semver.default.satisfies(_semver.default.coerce(_package.version), core.requiredCliVersionRange)) {
    const upgradeCmd = _chalk.default.yellow((0, _getUpgradeCommand.default)({
      cwd,
      workDir
    }));
    /* eslint-disable no-console, no-process-exit */


    console.error(`The version of @sanity/core installed in this project requires @sanity/cli @ ${_chalk.default.green(core.requiredCliVersionRange)}. Currently installed version is ${_chalk.default.red(_package.version)}.\n\nPlease upgrade by running:\n\n  ${upgradeCmd}\n\n`);
    process.exit(1);
    /* eslint-enable no-console, no-process-exit */
  }

  const merged = baseCommands.concat(core.commands).map(addDefaultGroup); // Remove duplicate commands when within the same group,
  // the last defined commands with the given name wins

  return merged.reverse().reduce((cmds, cmd) => {
    if (!(0, _find2.default)(cmds, {
      name: cmd.name,
      group: cmd.group
    })) {
      cmds.push(cmd);
    }

    return cmds;
  }, []);
};

exports.default = _default;

function addDefaultGroup(cmd) {
  if (!cmd.group) {
    cmd.group = 'default';
  }

  return cmd;
}