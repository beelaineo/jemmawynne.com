"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _gitconfiglocal = _interopRequireDefault(require("gitconfiglocal"));

var _gitUserInfo = _interopRequireDefault(require("git-user-info"));

var _promisePropsRecursive = _interopRequireDefault(require("promise-props-recursive"));

var _es6Promisify = require("es6-promisify");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (workDir, {
  isPlugin,
  context
}) => {
  const cwd = process.cwd();
  const isSanityRoot = workDir === cwd;
  return (0, _promisePropsRecursive.default)({
    author: getUserInfo(context),
    // Don't try to use git remote from main Sanity project for plugins
    gitRemote: isPlugin && isSanityRoot ? '' : resolveGitRemote(cwd),
    // Don't try to guess plugin name if we're initing from Sanity root
    projectName: isPlugin && isSanityRoot ? '' : _path.default.basename(cwd),
    // If we're initing a plugin, don't use description from Sanity readme
    description: getProjectDescription({
      isSanityRoot,
      isPlugin,
      outputDir: cwd
    })
  });
};

exports.default = _default;
const getGitConfig = (0, _es6Promisify.promisify)(_gitconfiglocal.default);

function resolveGitRemote(cwd) {
  return _fsExtra.default.stat(_path.default.join(cwd, '.git')).then(() => getGitConfig(cwd)).then(cfg => cfg.remote && cfg.remote.origin && cfg.remote.origin.url).catch(() => null);
}

function getUserInfo(context) {
  const user = (0, _gitUserInfo.default)();

  if (!user) {
    return getSanityUserInfo(context);
  }

  if (user.name && user.email) {
    return `${user.name} <${user.email}>`;
  }

  return undefined;
}

function getSanityUserInfo(context) {
  const client = context.apiClient({
    requireUser: false,
    requireProject: false
  });
  const hasToken = Boolean(client.config().token);

  if (!hasToken) {
    return null;
  }

  return client.users.getById('me').then(user => `${user.name} <${user.email}>`).catch(() => null);
}

async function getProjectDescription({
  isSanityRoot,
  isPlugin,
  outputDir
}) {
  const tryResolve = isSanityRoot && !isPlugin;

  if (!tryResolve) {
    return Promise.resolve('');
  } // Try to grab a project description from a standard Github-generated readme


  try {
    const readmePath = _path.default.join(outputDir, 'README.md');

    const readme = await _fsExtra.default.readFile(readmePath, {
      encoding: 'utf8'
    });
    const match = readme.match(/^# .*?\n+(\w.*?)(?:$|\n)/);
    return (match && match[1] || '').replace(/\.$/, '') || '';
  } catch (err) {
    return '';
  }
}