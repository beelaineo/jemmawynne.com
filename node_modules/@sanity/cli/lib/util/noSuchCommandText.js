"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _leven = _interopRequireDefault(require("leven"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const commonMistakes = {
  get: 'list'
};
const levenThreshold = 3;
const coreCommands = ['build', 'check', 'configcheck', 'cors', 'dataset', 'deploy', 'documents', 'exec', 'hook', 'start', 'uninstall'];
const helpText = `
Run the command again within a Sanity project directory, where "@sanity/core"
is installed as a dependency.`;

var _default = (cmdName, parentGroupName, groups) => {
  if (parentGroupName && groups[parentGroupName]) {
    return suggestCommand(cmdName, groups[parentGroupName], parentGroupName);
  }

  const isCoreCommand = coreCommands.includes(cmdName);

  if (isCoreCommand) {
    return `"${cmdName}" is not available outside of a Sanity project context.${helpText}`;
  }

  return suggestCommand(cmdName, groups ? groups.default : []);
};

exports.default = _default;

function suggestCommand(cmdName, group, parentGroupName = null) {
  // Try to find something similar
  const closest = group.map(command => (0, _leven.default)(command.name, cmdName)).reduce((current, distance, index) => distance < current.distance ? {
    index,
    distance
  } : current, {
    index: null,
    distance: +Infinity
  }); // Given we are within our target threshold, suggest the command

  let suggestCmd = '';

  if (closest.distance <= levenThreshold) {
    const cmdCandidate = group[closest.index];
    suggestCmd = cmdCandidate.name;
  } // Is this a common mistake that we can suggest an alias for?


  if (!suggestCmd && commonMistakes[cmdName]) {
    suggestCmd = commonMistakes[cmdName];
  }

  const input = _chalk.default.cyan(`"${cmdName}"`);

  const suggest = _chalk.default.green(`"${suggestCmd}"`);

  const help = _chalk.default.cyan('"sanity --help"');

  const didYouMean = suggestCmd ? `Did you mean ${suggest}? ` : ' ';
  return parentGroupName ? `${input} is not a subcommand of "sanity ${parentGroupName}". ${didYouMean}See ${help}` : `${input} is not a sanity command. ${didYouMean}See ${help}`;
}