"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = initPlugin;

var _addPluginToManifest = _interopRequireDefault(require("@sanity/util/lib/addPluginToManifest"));

var _bootstrapFromTemplate = _interopRequireDefault(require("../../actions/init-plugin/bootstrapFromTemplate"));

var _debug = _interopRequireDefault(require("../../debug"));

var _pluginTemplates = _interopRequireDefault(require("./pluginTemplates"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

async function initPlugin(args, context, initOpts = {}) {
  const {
    output,
    prompt
  } = context;
  const [, specifiedTemplateUrl] = args.argsWithoutOptions;
  output.print('This utility will walk you through creating a new Sanity plugin.');
  output.print('Press ^C at any time to quit.\n');
  const hasTemplateUrl = /^https?:\/\//.test(specifiedTemplateUrl || '');

  if (hasTemplateUrl) {
    (0, _debug.default)('User provided template URL: %s', specifiedTemplateUrl);
    return bootstrapFromUrl(context, specifiedTemplateUrl);
  }

  let specifiedTemplate = null;

  if (specifiedTemplateUrl) {
    specifiedTemplate = _pluginTemplates.default.find(tpl => tpl.value === specifiedTemplateUrl);
  }

  if (specifiedTemplate) {
    (0, _debug.default)('User wanted template "%s", match found at %s', specifiedTemplateUrl, specifiedTemplate.url);
    return bootstrapFromUrl(context, specifiedTemplate.url);
  } else if (specifiedTemplateUrl) {
    throw new Error(`Cannot find template with name "${specifiedTemplateUrl}"`);
  }

  const templateChoices = _pluginTemplates.default.map(({
    value,
    name
  }) => ({
    value,
    name
  }));

  const selected = await prompt.single({
    message: 'Select template to use',
    type: 'list',
    choices: templateChoices
  });
  specifiedTemplate = _pluginTemplates.default.find(tpl => tpl.value === selected);
  (0, _debug.default)('User selected template URL: %s', specifiedTemplate.url);
  return bootstrapFromUrl(context, specifiedTemplate.url);
}

async function bootstrapFromUrl(context, url) {
  const {
    output,
    prompt,
    yarn,
    workDir
  } = context;
  (0, _debug.default)('Bootstrapping from URL: %s', url);
  const {
    name,
    outputPath,
    inPluginsPath,
    dependencies
  } = await (0, _bootstrapFromTemplate.default)(context, url);

  if (inPluginsPath) {
    const addIt = await prompt.single({
      type: 'confirm',
      message: 'Enable plugin in current Sanity installation?',
      default: true
    });

    if (addIt) {
      await (0, _addPluginToManifest.default)(workDir, name.replace(/^sanity-plugin-/, ''));
    }
  }

  if (dependencies) {
    const dependencyString = JSON.stringify(dependencies, null, 2).split('\n').slice(1, -1).join('\n').replace(/"/g, '');
    output.print('\nThe following dependencies are required for this template:');
    output.print(`${dependencyString}\n`);
  }

  if (dependencies && inPluginsPath) {
    const addDeps = await prompt.single({
      type: 'confirm',
      message: 'Install dependencies in current project?',
      default: true
    });

    if (addDeps) {
      const deps = Object.keys(dependencies).map(dep => `${dep}@${dependencies[dep]}`);
      await yarn(['add'].concat(deps), _objectSpread({}, output, {
        rootDir: workDir
      }));
      output.print('Dependencies installed.');
      output.print('Remember to remove them from `package.json` if you no longer need them!');
    }
  }

  output.print(`\nSuccess! Plugin initialized at ${outputPath}`);
}