"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _getUserConfig = _interopRequireDefault(require("../../util/getUserConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  name: 'logout',
  signature: 'logout',
  description: 'Logs out of the Sanity.io session',

  async action(args, {
    output,
    prompt,
    apiClient
  }) {
    const cfg = (0, _getUserConfig.default)();
    const token = cfg.get('authToken');
    const type = cfg.get('authType');

    if (!token) {
      output.print(_chalk.default.red('No login credentials found'));
      return;
    }

    if (token && type !== 'provisional') {
      logout(cfg);
      return;
    }

    if (type === 'provisional') {
      output.print(_chalk.default.yellow.inverse('[WARN]') + _chalk.default.yellow(' You are currently logged in as a temporary user!'));
      output.print(_chalk.default.yellow("Logging out will make it super hard to claim your beautiful project :'("));
    }

    const confirm = await prompt.single({
      type: 'confirm',
      message: 'Are you sure you want to log out?',
      default: false
    });

    if (!confirm) {
      output.print(_chalk.default.red('Aborted'));
      return;
    }

    logout(cfg);

    async function logout() {
      const client = apiClient({
        requireUser: false,
        requireProject: false
      });

      if (token) {
        try {
          await client.request({
            uri: '/auth/logout',
            method: 'POST'
          });
        } catch (err) {
          output.error(_chalk.default.red(`Failed to communicate with the Sanity API:\n${err.message}`));
          return;
        }
      }

      cfg.delete('authType');
      cfg.delete('authToken');
      output.print(_chalk.default.green('Logged out'));
    }
  }

};
exports.default = _default;