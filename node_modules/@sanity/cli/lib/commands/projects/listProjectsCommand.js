"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  size,
  sortBy
} = require('lodash');

const headings = ['id', 'members', 'name', 'url', 'created'];
const helpText = `
Options
  --sort <field> Sort output by specified column
  --order <asc/desc> Sort output ascending/descending

Examples
  # List projects
  sanity projects list

  # List projects sorted by member count, ascending
  sanity projects list --sort=members --order=asc
`;
const defaultFlags = {
  sort: 'created',
  order: 'desc'
};
var _default = {
  name: 'list',
  group: 'projects',
  signature: '',
  helpText,
  description: 'Lists projects connected to your user',
  action: async (args, context) => {
    const {
      apiClient,
      output,
      chalk
    } = context;

    const flags = _objectSpread({}, defaultFlags, args.extOptions);

    const client = apiClient({
      requireUser: true,
      requireProject: false
    });
    const projects = await client.request({
      method: 'GET',
      uri: '/projects'
    });
    const ordered = sortBy(projects.map(({
      displayName,
      id,
      members = [],
      studioHost = '',
      createdAt
    }) => {
      const studio = studioHost ? `https://${studioHost}.sanity.studio` : 'Not deployed';
      return [id, members.length, displayName, studio, createdAt];
    }), [headings.indexOf(flags.sort)]);
    const rows = flags.order === 'asc' ? ordered : ordered.reverse();
    const maxWidths = rows.reduce((max, row) => row.map((current, index) => Math.max(size(current), max[index])), headings.map(str => size(str)));

    const printRow = row => row.map((col, i) => `${col}`.padEnd(maxWidths[i])).join('   ');

    output.print(chalk.cyan(printRow(headings)));
    rows.forEach(row => output.print(printRow(row)));
  }
};
exports.default = _default;