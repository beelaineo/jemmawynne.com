"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _default = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _LoadingPane = _interopRequireDefault(require("./styles/LoadingPane.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getWaitMessages(path) {
  var thresholds = [{
    ms: 300,
    message: 'Loading…'
  }, {
    ms: 5000,
    message: 'Still loading…'
  }];

  if (__DEV__) {
    var message = ['Check console for errors?', 'Is your observable/promise resolving?', path.length > 0 ? "Structure path: ".concat(path.join(' ➝ ')) : ''];
    thresholds.push({
      ms: 10000,
      message: message.join('\n')
    });
  }

  var src = (0, _rxjs.of)(null);
  return (0, _rxjs.merge)(...thresholds.map((_ref) => {
    var ms = _ref.ms,
        message = _ref.message;
    return src.pipe((0, _operators.mapTo)(message), (0, _operators.delay)(ms));
  }));
}

class LoadingPane extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      message: 'Loading…'
    });

    _defineProperty(this, "updateStatus", message => {
      this.setState({
        message
      });
    });
  }

  componentDidMount() {
    this.subscription = getWaitMessages(this.props.path).subscribe(this.updateStatus);
  }

  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  render() {
    var _this$props = this.props,
        isSelected = _this$props.isSelected,
        isCollapsed = _this$props.isCollapsed,
        onCollapse = _this$props.onCollapse,
        onExpand = _this$props.onExpand;
    var message = this.state.message;
    return _react.default.createElement(_default.default, {
      title: '\u00a0' // Non-breaking space
      ,
      isScrollable: false,
      isSelected: isSelected,
      isCollapsed: isCollapsed,
      onCollapse: onCollapse,
      onExpand: onExpand,
      index: this.props.index
    }, _react.default.createElement("div", {
      className: _LoadingPane.default.root
    }, _react.default.createElement(_spinner.default, {
      center: true,
      message: message
    })));
  }

}

exports.default = LoadingPane;

_defineProperty(LoadingPane, "propTypes", {
  isSelected: _propTypes.default.bool.isRequired,
  isCollapsed: _propTypes.default.bool.isRequired,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func,
  path: _propTypes.default.arrayOf(_propTypes.default.string),
  index: _propTypes.default.number
});

_defineProperty(LoadingPane, "defaultProps", {
  path: [],
  onExpand: undefined,
  onCollapse: undefined
});