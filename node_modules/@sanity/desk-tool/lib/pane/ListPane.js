"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _router = require("part:@sanity/base/router");

var _default2 = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/lists/default-style"));

var _PaneItem = _interopRequireDefault(require("./PaneItem"));

var _ListView = _interopRequireDefault(require("./ListView"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line react/prefer-stateless-function
var _default = (0, _router.withRouterHOC)((_temp = _class = class ListPane extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "getLinkStateForItem", name => {
      var _this$props = this.props,
          router = _this$props.router,
          index = _this$props.index;
      var panes = (router.state.panes || []).slice(0, index).concat(name);
      return {
        panes
      };
    });

    _defineProperty(this, "shouldShowIconForItem", item => {
      var paneShowIcons = this.props.displayOptions.showIcons;
      var itemShowIcon = item.displayOptions && item.displayOptions.showIcon; // Specific true/false on item should have presedence over list setting

      if (typeof itemShowIcon !== 'undefined') {
        return itemShowIcon === false ? false : item.icon;
      } // If no item setting is defined, defer to the pane settings


      return paneShowIcons === false ? false : item.icon;
    });
  }

  itemIsSelected(item) {
    var _this$props2 = this.props,
        router = _this$props2.router,
        index = _this$props2.index;
    var selected = (router.state.panes || [])[index];
    return item.id === selected;
  }

  render() {
    var _this$props3 = this.props,
        title = _this$props3.title,
        styles = _this$props3.styles,
        className = _this$props3.className,
        defaultLayout = _this$props3.defaultLayout,
        items = _this$props3.items,
        index = _this$props3.index,
        menuItems = _this$props3.menuItems,
        menuItemGroups = _this$props3.menuItemGroups,
        isSelected = _this$props3.isSelected,
        isCollapsed = _this$props3.isCollapsed,
        onCollapse = _this$props3.onCollapse,
        onExpand = _this$props3.onExpand;
    return _react.default.createElement(_default2.default, {
      index: index,
      title: title,
      styles: styles,
      className: className,
      isSelected: isSelected,
      isCollapsed: isCollapsed,
      onCollapse: onCollapse,
      onExpand: onExpand,
      menuItems: menuItems,
      menuItemGroups: menuItemGroups
    }, _react.default.createElement(_ListView.default, {
      layout: defaultLayout
    }, items.map(item => item.type === 'divider' ? _react.default.createElement("hr", {
      key: item.id,
      className: _defaultStyle.default.divider
    }) : _react.default.createElement(_PaneItem.default, {
      key: item.id,
      id: item.id,
      index: index,
      value: item,
      icon: this.shouldShowIconForItem(item),
      layout: defaultLayout,
      isSelected: this.itemIsSelected(item),
      getLinkState: this.getLinkStateForItem,
      schemaType: item.schemaType
    }))));
  }

}, _defineProperty(_class, "propTypes", {
  index: _propTypes.default.number.isRequired,
  title: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  styles: _propTypes.default.object,
  // eslint-disable-line react/forbid-prop-types
  router: _propTypes.default.shape({
    state: _propTypes.default.shape({
      panes: _propTypes.default.arrayOf(_propTypes.default.string)
    })
  }).isRequired,
  defaultLayout: _propTypes.default.string,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    type: _propTypes.default.string.isRequired,
    schemaType: _propTypes.default.shape({
      name: _propTypes.default.string
    })
  })),
  menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string.isRequired
  })),
  menuItemGroups: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  })),
  displayOptions: _propTypes.default.shape({
    showIcons: _propTypes.default.bool
  }),
  isSelected: _propTypes.default.bool.isRequired,
  isCollapsed: _propTypes.default.bool.isRequired,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func
}), _defineProperty(_class, "defaultProps", {
  className: '',
  items: [],
  menuItems: [],
  menuItemGroups: [],
  displayOptions: {},
  styles: undefined,
  onExpand: undefined,
  onCollapse: undefined,
  defaultLayout: undefined
}), _temp));

exports.default = _default;