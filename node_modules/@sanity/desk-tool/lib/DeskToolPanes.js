"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sumBy2 = _interopRequireDefault(require("lodash/sumBy"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _splitController = _interopRequireDefault(require("part:@sanity/components/panes/split-controller"));

var _splitPaneWrapper = _interopRequireDefault(require("part:@sanity/components/panes/split-pane-wrapper"));

var _resolvePanes = require("./utils/resolvePanes");

var _LoadingPane = _interopRequireDefault(require("./pane/LoadingPane"));

var _Pane = _interopRequireDefault(require("./pane/Pane"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var COLLAPSED_WIDTH = 55;
var BREAKPOINT_SCREEN_MEDIUM = 512;

var fromWindowEvent = eventName => new _rxjs.Observable(subscriber => {
  var handler = event => subscriber.next(event);

  window.addEventListener(eventName, handler);
  return () => {
    window.removeEventListener(eventName, handler);
  };
});

var orientationChange$ = fromWindowEvent('orientationchange');
var resize$ = fromWindowEvent('resize');
var windowWidth$ = (0, _rxjs.merge)(orientationChange$, resize$).pipe((0, _operators.share)(), (0, _operators.debounceTime)(50), (0, _operators.map)(() => window.innerWidth));

function getPaneMinSize(pane) {
  return pane.type === 'document' ? 500 : 320;
}

function getPaneDefaultSize(pane) {
  return pane.type === 'document' ? 672 : 350;
}

class DeskToolPanes extends _react.default.Component {
  constructor() {
    var _this;

    super(...arguments);
    _this = this;

    _defineProperty(this, "state", {
      collapsedPanes: [],
      windowWidth: typeof window === 'undefined' ? 1000 : window.innerWidth,
      isMobile: typeof window !== 'undefined' && window.innerWidth < BREAKPOINT_SCREEN_MEDIUM
    });

    _defineProperty(this, "userCollapsedPanes", []);

    _defineProperty(this, "handlePaneCollapse", index => {
      if (this.state.isMobile || this.props.panes.length === 1) {
        return;
      }

      this.userCollapsedPanes[index] = true;
      this.handleAutoCollapse(this.state.windowWidth, undefined, this.userCollapsedPanes);
    });

    _defineProperty(this, "handlePaneExpand", index => {
      if (this.state.isMobile || this.props.panes.length === 1) {
        return;
      }

      this.userCollapsedPanes[index] = false;
      this.handleAutoCollapse(this.state.windowWidth, index, this.userCollapsedPanes);
    });

    _defineProperty(this, "handleAutoCollapse", function (windowWidth, paneWantExpand) {
      var userCollapsedPanes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var _this$props = _this.props,
          autoCollapse = _this$props.autoCollapse,
          panes = _this$props.panes;
      var isMobile = _this.state.isMobile;
      var paneToForceExpand = typeof paneWantExpand === 'number' ? paneWantExpand : panes.length - 1;

      if (isMobile || !autoCollapse || !panes || panes.length === 0) {
        return;
      }

      var autoCollapsedPanes = [];
      var totalMinSize = (0, _sumBy2.default)(panes, pane => getPaneMinSize(pane));
      var remainingMinSize = totalMinSize;
      remainingMinSize -= getPaneMinSize(panes[paneToForceExpand]);
      autoCollapsedPanes[paneToForceExpand] = false;
      userCollapsedPanes[paneToForceExpand] = false;

      if (totalMinSize > windowWidth) {
        panes.forEach((pane, i) => {
          if (paneToForceExpand != i) {
            if (remainingMinSize > windowWidth - getPaneMinSize(panes[paneToForceExpand])) {
              autoCollapsedPanes[i] = true;
              remainingMinSize -= getPaneMinSize(pane) - COLLAPSED_WIDTH;
            }
          }
        });
      } // Respect userCollapsed before autoCollapsed


      var collapsedPanes = panes.map((pane, i) => userCollapsedPanes[i] || autoCollapsedPanes[i]);

      _this.setState({
        collapsedPanes
      });
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.panes.length != prevProps.panes.length) {
      this.userCollapsedPanes = [];
      this.handleAutoCollapse(this.state.windowWidth, undefined, this.userCollapsedPanes);
    }

    var paneToForceExpand; // Expand new panes

    this.props.panes.map((pane, i) => {
      if (prevProps.panes[i] !== pane) {
        paneToForceExpand = i;
      }
    });

    if (paneToForceExpand) {
      this.handleAutoCollapse(this.state.windowWidth, paneToForceExpand, this.userCollapsedPanes);
    }
  }

  componentDidMount() {
    var _this$props2 = this.props,
        autoCollapse = _this$props2.autoCollapse,
        panes = _this$props2.panes;

    if (autoCollapse) {
      this.resizeSubscriber = windowWidth$.pipe((0, _operators.distinctUntilChanged)()).subscribe(windowWidth => {
        this.setState({
          windowWidth,
          isMobile: windowWidth < BREAKPOINT_SCREEN_MEDIUM
        });
        this.handleAutoCollapse(windowWidth, undefined, this.userCollapsedPanes);
      });

      if (window) {
        this.handleAutoCollapse(window.innerWidth, panes.length - 1, this.userCollapsedPanes);
      }
    }
  }

  componentWillUnmount() {
    if (this.props.autoCollapse && this.resizeSubscriber) {
      this.resizeSubscriber.unsubscribe();
    }
  }

  renderPanes() {
    var _this$props3 = this.props,
        panes = _this$props3.panes,
        keys = _this$props3.keys;
    var isMobile = this.state.isMobile;
    var path = [];
    return panes.map((pane, i) => {
      var isCollapsed = !isMobile && this.state.collapsedPanes[i];
      var paneKey = "".concat(i, "-").concat(keys[i - 1] || 'root'); // Same pane might appear multiple times, so use index as tiebreaker

      var wrapperKey = pane === _resolvePanes.LOADING ? "loading-".concat(i) : "".concat(i, "-").concat(pane.id);
      path.push(pane.id || "[".concat(i, "]"));
      return _react.default.createElement(_splitPaneWrapper.default, {
        key: wrapperKey,
        isCollapsed: !!isCollapsed,
        minSize: getPaneMinSize(pane),
        defaultSize: getPaneDefaultSize(pane)
      }, pane === _resolvePanes.LOADING ? _react.default.createElement(_LoadingPane.default, {
        key: paneKey // Use key to force rerendering pane on ID change
        ,
        path: path,
        index: i,
        onExpand: this.handlePaneExpand,
        onCollapse: this.handlePaneCollapse,
        isCollapsed: !!isCollapsed,
        isSelected: i === panes.length - 1
      }) : _react.default.createElement(_Pane.default, _extends({
        key: paneKey // Use key to force rerendering pane on ID change
        ,
        index: i,
        itemId: keys[i - 1],
        onExpand: this.handlePaneExpand,
        onCollapse: this.handlePaneCollapse,
        isCollapsed: !!isCollapsed,
        isSelected: i === panes.length - 1
      }, pane)));
    });
  }

  render() {
    var isMobile = this.state.isMobile;
    return _react.default.createElement(_splitController.default, {
      isMobile: isMobile,
      autoCollapse: this.props.autoCollapse,
      collapsedWidth: COLLAPSED_WIDTH,
      onCheckCollapse: this.handleCheckCollapse
    }, this.renderPanes());
  }

}

exports.default = DeskToolPanes;

_defineProperty(DeskToolPanes, "propTypes", {
  keys: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  autoCollapse: _propTypes.default.bool,
  panes: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  }), _propTypes.default.symbol])).isRequired
});