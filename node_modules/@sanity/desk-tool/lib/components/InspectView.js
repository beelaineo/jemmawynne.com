"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

require("./styles/JSONInspector.css");

var _InspectView = _interopRequireDefault(require("./styles/InspectView.css"));

var _reactJsonInspector = _interopRequireDefault(require("react-json-inspector"));

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _radio = _interopRequireDefault(require("part:@sanity/components/selects/radio"));

var _hashlru = _interopRequireDefault(require("hashlru"));

var _settings = _interopRequireDefault(require("../settings"));

var _reactPropsStream = require("react-props-stream");

var _DocTitle = _interopRequireDefault(require("./DocTitle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var lru = (0, _hashlru.default)(1000);

function isExpanded(keyPath, value) {
  var cached = lru.get(keyPath);

  if (cached === undefined) {
    lru.set(keyPath, Array.isArray(value) || (0, _isObject2.default)(value));
    return isExpanded(keyPath, value);
  }

  return cached;
}

function toggleExpanded(event) {
  var path = event.path;
  var current = lru.get(path);

  if (current === undefined) {
    // something is wrong
    return;
  }

  lru.set(path, !current);
}

function selectElement(element) {
  var sel = window.getSelection();
  sel.removeAllRanges();
  var range = document.createRange();
  range.selectNodeContents(element);
  sel.addRange(range);
}

function select(event) {
  selectElement(event.currentTarget);
}

function maybeSelectAll(event) {
  var selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey);

  if (!selectAll) {
    return;
  }

  event.preventDefault();
  selectElement(event.currentTarget);
}

var VIEW_MODE_PARSED = {
  id: 'parsed',
  title: 'Parsed'
};
var VIEW_MODE_RAW = {
  id: 'raw',
  title: 'JSON'
};
var VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW];

var viewModeSettings = _settings.default.forKey('inspect-view-preferred-view-mode');

function mapReceivedPropsToChildProps(props$) {
  var onViewModeChange = nextViewMode => viewModeSettings.set(nextViewMode.id);

  var viewModeSetting$ = viewModeSettings.listen('parsed').pipe((0, _operators.map)(id => VIEW_MODES.find(mode => mode.id === id)));
  return (0, _rxjs.combineLatest)(props$, viewModeSetting$).pipe((0, _operators.map)((_ref) => {
    var _ref2 = _slicedToArray(_ref, 2),
        props = _ref2[0],
        viewMode = _ref2[1];

    return _objectSpread({}, props, {
      viewMode,
      onViewModeChange
    });
  }));
}

function InspectView(props) {
  var value = props.value,
      viewMode = props.viewMode,
      onClose = props.onClose,
      onViewModeChange = props.onViewModeChange;
  return _react.default.createElement(_fullscreen.default, {
    showHeader: true,
    title: _react.default.createElement("span", null, "Inspecting", ' ', _react.default.createElement("em", null, _react.default.createElement(_DocTitle.default, {
      document: value
    }))),
    onClose: onClose
  }, _react.default.createElement("div", {
    className: _InspectView.default.toolbar
  }, _react.default.createElement(_radio.default, {
    value: viewMode,
    items: VIEW_MODES,
    onChange: onViewModeChange
  })), _react.default.createElement("div", {
    className: _InspectView.default.content
  }, viewMode === VIEW_MODE_PARSED && _react.default.createElement(_reactJsonInspector.default, {
    isExpanded: isExpanded,
    onClick: toggleExpanded,
    data: value
  }), viewMode === VIEW_MODE_RAW && _react.default.createElement("pre", {
    className: _InspectView.default.raw,
    tabIndex: 0,
    onKeyDown: maybeSelectAll,
    onDoubleClick: select,
    onFocus: select
  }, JSON.stringify(value, null, 2))));
}

InspectView.propTypes = {
  value: _propTypes.default.object,
  onClose: _propTypes.default.func,
  onViewModeChange: _propTypes.default.func,
  viewMode: _propTypes.default.shape({
    id: _propTypes.default.string,
    title: _propTypes.default.string
  })
};

var _default = (0, _reactPropsStream.withPropsStream)(mapReceivedPropsToChildProps, InspectView);

exports.default = _default;