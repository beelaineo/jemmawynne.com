"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assignWith2 = _interopRequireDefault(require("lodash/assignWith"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _preview = require("part:@sanity/base/preview");

var _NotPublishedStatus = _interopRequireDefault(require("./NotPublishedStatus"));

var _DraftStatus = _interopRequireDefault(require("./DraftStatus"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isLiveEditEnabled = schemaType => schemaType.liveEdit === true;

var getStatusIndicator = (draft, published) => {
  if (draft) {
    return _DraftStatus.default;
  }

  return published ? null : _NotPublishedStatus.default;
};

var getMissingDocumentFallback = item => ({
  title: _react.default.createElement("span", {
    style: {
      fontStyle: 'italic'
    }
  }, item.title || 'Missing document'),
  subtitle: _react.default.createElement("span", {
    style: {
      fontStyle: 'italic'
    }
  }, item.title ? "Missing document ID: ".concat(item._id) : "Document ID: ".concat(item._id)),
  media: _warningIcon.default
});

var getValueWithFallback = (_ref) => {
  var value = _ref.value,
      draft = _ref.draft,
      published = _ref.published;
  var snapshot = draft || published;

  if (!snapshot) {
    return getMissingDocumentFallback(value);
  }

  return (0, _assignWith2.default)({}, snapshot, value, (objValue, srcValue) => {
    return typeof srcValue === 'undefined' ? objValue : srcValue;
  });
};

class DocumentPaneItemPreview extends _react.default.Component {
  constructor(props) {
    super();

    _defineProperty(this, "state", {});

    var value = props.value,
        schemaType = props.schemaType;
    var title = value.title;
    var sync = true;
    this.subscription = (0, _rxjs.concat)((0, _rxjs.of)({
      isLoading: true
    }), (0, _rxjs.combineLatest)([isLiveEditEnabled(schemaType) ? (0, _rxjs.of)({
      snapshot: null
    }) : (0, _preview.observeForPreview)({
      _id: (0, _draftUtils.getDraftId)(value._id)
    }, schemaType), (0, _preview.observeForPreview)({
      _id: (0, _draftUtils.getPublishedId)(value._id)
    }, schemaType)]).pipe((0, _operators.map)((_ref2) => {
      var _ref3 = _slicedToArray(_ref2, 2),
          draft = _ref3[0],
          published = _ref3[1];

      return {
        draft: draft.snapshot ? _objectSpread({
          title
        }, draft.snapshot) : null,
        published: published.snapshot ? _objectSpread({
          title
        }, published.snapshot) : null,
        isLoading: false
      };
    }))).subscribe(state => {
      if (sync) {
        this.state = state;
      } else {
        this.setState(state);
      }
    });
    sync = false;
  }

  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  render() {
    var _this$props = this.props,
        value = _this$props.value,
        schemaType = _this$props.schemaType,
        layout = _this$props.layout,
        icon = _this$props.icon;
    var _this$state = this.state,
        draft = _this$state.draft,
        published = _this$state.published,
        isLoading = _this$state.isLoading;
    return _react.default.createElement(_preview.SanityDefaultPreview, {
      value: getValueWithFallback({
        isLoading,
        value,
        schemaType,
        draft,
        published
      }),
      isPlaceholder: isLoading,
      icon: icon,
      layout: layout,
      type: schemaType,
      status: isLoading ? null : getStatusIndicator(draft, published)
    });
  }

}

exports.default = DocumentPaneItemPreview;
DocumentPaneItemPreview.propTypes = {
  layout: _propTypes.default.string,
  icon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool]),
  value: _propTypes.default.object,
  schemaType: _propTypes.default.object
};