"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withDocument;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _LoadingPane = _interopRequireDefault(require("../pane/LoadingPane"));

var _ErrorPane = _interopRequireDefault(require("../pane/ErrorPane"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Resolves the type for a document if not present
function withDocument(Pane) {
  var _class, _temp;

  return _temp = _class = class WithDocumentType extends _react.default.PureComponent {
    constructor(props) {
      super(props);
      var _props$options = props.options,
          id = _props$options.id,
          type = _props$options.type;
      this.state = {
        type: type || undefined
      };

      if (!type) {
        this.subscription = _client.default.observable.fetch('*[_id == $id][0]._type', {
          id
        }).subscribe(schemaType => this.setState({
          type: schemaType
        }));
      }
    }

    componentWillUnmount() {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    }

    render() {
      var type = this.state.type; // We already have a type from props, maintain prop referential identity

      if (this.props.options.type) {
        return _react.default.createElement(Pane, this.props);
      } // We have resolved a type, use it


      if (type) {
        return _react.default.createElement(Pane, _extends({}, this.props, {
          options: _objectSpread({}, this.props.options, {
            type
          })
        }));
      } // Document did not exist


      if (type === null) {
        return _react.default.createElement(_ErrorPane.default, null, "Document with ID ", _react.default.createElement("code", null, this.props.options.id), " not found");
      } // Undecided, still loading type from server


      return _react.default.createElement(_LoadingPane.default, this.props);
    }

  }, _defineProperty(_class, "displayName", "withDocumentType(".concat(Pane.displayName || Pane.name, ")")), _defineProperty(_class, "propTypes", {
    isSelected: _propTypes.default.bool.isRequired,
    isCollapsed: _propTypes.default.bool.isRequired,
    onExpand: _propTypes.default.func,
    onCollapse: _propTypes.default.func,
    path: _propTypes.default.arrayOf(_propTypes.default.string),
    options: _propTypes.default.shape({
      id: _propTypes.default.string.isRequired,
      type: _propTypes.default.string
    }).isRequired
  }), _defineProperty(_class, "defaultProps", {
    path: [],
    onExpand: undefined,
    onCollapse: undefined
  }), _temp;
}