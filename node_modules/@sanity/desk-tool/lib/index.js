"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _viewColumnIcon = _interopRequireDefault(require("part:@sanity/base/view-column-icon"));

var _uuid = _interopRequireDefault(require("@sanity/uuid"));

var _router = require("part:@sanity/base/router");

var _DeskTool = _interopRequireDefault(require("./DeskTool"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function toState(pathSegment) {
  return (pathSegment || '').split(';').filter(Boolean);
}

function toPath(panes) {
  return panes.join(';');
}

var state = {
  activePanes: []
};

function setActivePanes(panes) {
  state.activePanes = panes;
}

function DeskToolPaneStateSyncer(props) {
  return _react.default.createElement(_DeskTool.default, _extends({}, props, {
    onPaneChange: setActivePanes
  }));
}

var _default = {
  router: (0, _router.route)('/', [(0, _router.route)('/edit/:type/:editDocumentId'), (0, _router.route)({
    path: '/:panes',
    // Legacy URLs, used to handle redirects
    children: [(0, _router.route)('/:action', (0, _router.route)('/:legacyEditDocumentId'))],
    transform: {
      panes: {
        toState,
        toPath
      }
    }
  })]),

  canHandleIntent(intentName, params) {
    return intentName === 'edit' && params.id || intentName === 'create' && params.type;
  },

  getIntentState(intentName, params, currentState) {
    var paneIds = currentState && currentState.panes || [];
    var activePanes = state.activePanes || [];
    var editDocumentId = params.id || (0, _uuid.default)(); // Loop through open panes and see if any of them can handle the intent

    for (var i = activePanes.length - 1; i >= 0; i--) {
      var pane = activePanes[i];

      if (pane.canHandleIntent && pane.canHandleIntent(intentName, params)) {
        return {
          panes: paneIds.slice(0, i).concat(editDocumentId)
        };
      }
    }

    return {
      editDocumentId,
      type: params.type || '*'
    };
  },

  title: 'Desk',
  name: 'desk',
  icon: _viewColumnIcon.default,
  component: DeskToolPaneStateSyncer
};
exports.default = _default;