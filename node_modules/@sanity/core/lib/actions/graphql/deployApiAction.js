"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var getSanitySchema = require('./getSanitySchema');

var extractFromSanitySchema = require('./extractFromSanitySchema');

var generateTypeQueries = require('./generateTypeQueries');

var generateTypeFilters = require('./generateTypeFilters');

var SchemaError = require('./SchemaError');

module.exports =
/*#__PURE__*/
function () {
  var _deployApiActions = _asyncToGenerator(function* (args, context) {
    var apiClient = context.apiClient,
        workDir = context.workDir,
        output = context.output,
        prompt = context.prompt;
    var flags = args.extOptions;
    var client = apiClient({
      requireUser: true,
      requireProject: true
    });
    var dataset = flags.dataset || client.config().dataset;
    var enablePlayground = typeof flags.playground === 'undefined' ? yield prompt.single({
      type: 'confirm',
      message: "Do you want to enable a GraphQL playground?",
      default: true
    }) : flags.playground;
    var spinner = output.spinner('Generating GraphQL schema').start();
    var schema;

    try {
      var sanitySchema = getSanitySchema(workDir);
      var extracted = extractFromSanitySchema(sanitySchema);
      var filters = generateTypeFilters(extracted.types);
      var queries = generateTypeQueries(extracted.types, filters);
      var types = extracted.types.concat(filters);
      schema = {
        types,
        queries,
        interfaces: extracted.interfaces
      };
    } catch (err) {
      spinner.fail();

      if (err instanceof SchemaError) {
        err.print(output);
        process.exit(1); // eslint-disable-line no-process-exit
      }

      throw err;
    }

    spinner.succeed();
    spinner = output.spinner('Deploying GraphQL API').start();

    try {
      var response = yield client.request({
        url: "/apis/graphql/".concat(dataset, "/default"),
        method: 'PUT',
        body: {
          enablePlayground,
          schema
        },
        maxRedirects: 0
      });
      spinner.succeed();
      output.print('GraphQL API deployed to:');
      output.print(client.getUrl(response.location.replace(/^\/(v1|v\d{4}-\d{2}-\d{2})\//, '/')));
    } catch (err) {
      spinner.fail();
      throw err;
    }
  });

  function deployApiActions(_x, _x2) {
    return _deployApiActions.apply(this, arguments);
  }

  return deployApiActions;
}();