"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

module.exports =
/*#__PURE__*/
function () {
  var _deleteApiAction = _asyncToGenerator(function* (args, context) {
    var apiClient = context.apiClient,
        output = context.output,
        prompt = context.prompt;
    var client = apiClient({
      requireUser: true,
      requireProject: true
    });

    if (!(yield prompt.single({
      type: 'confirm',
      message: "Are you absolutely sure you want to delete the current GraphQL API?",
      default: false
    }))) {
      return;
    }

    var dataset = client.config().dataset;

    try {
      yield client.request({
        url: "/apis/graphql/".concat(dataset, "/default"),
        method: 'DELETE'
      });
    } catch (err) {
      throw err;
    }

    output.print('GraphQL API deleted');
  });

  function deleteApiAction(_x, _x2) {
    return _deleteApiAction.apply(this, arguments);
  }

  return deleteApiAction;
}();