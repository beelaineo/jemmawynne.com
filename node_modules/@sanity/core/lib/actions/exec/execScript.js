"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var spawn = require('child_process').spawn;

var path = require('path');

var fse = require('fs-extra');

module.exports =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (args) {
    // In case of specifying --with-user-token <file.js>, use the "token" as the script
    var script = args.argsWithoutOptions[0] || args.extOptions['with-user-token'];
    var withToken = Boolean(args.extOptions['with-user-token']);
    var scriptPath = path.resolve(script);

    if (!script) {
      throw new Error('SCRIPT must be provided. `sanity exec <script>`');
    }

    if (!(yield fse.exists(scriptPath))) {
      throw new Error("".concat(scriptPath, " does not exist"));
    }

    var babel = require.resolve('./babel');

    var loader = require.resolve('./pluginLoader');

    var nodeArgs = ['-r', babel, '-r', loader].concat(withToken ? ['-r', require.resolve('./configClient')] : []).concat(scriptPath).concat(args.extraArguments || []);
    var proc = spawn(process.argv[0], nodeArgs, {
      stdio: 'inherit'
    });
    proc.on('close', process.exit);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();