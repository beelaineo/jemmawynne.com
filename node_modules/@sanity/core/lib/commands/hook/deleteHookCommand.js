"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'delete',
  group: 'hook',
  signature: '[NAME]',
  description: 'Delete a hook within your project',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      var apiClient = context.apiClient;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
          name = _args$argsWithoutOpti[0];

      var client = apiClient();
      var hookId = yield promptForHook(name, context);

      try {
        yield client.request({
          method: 'DELETE',
          uri: "/hooks/".concat(hookId)
        });
      } catch (err) {
        throw new Error("Hook deletion failed:\n".concat(err.message));
      }
    });

    function action(_x, _x2) {
      return _action.apply(this, arguments);
    }

    return action;
  }()
};
exports.default = _default;

function promptForHook(_x3, _x4) {
  return _promptForHook.apply(this, arguments);
}

function _promptForHook() {
  _promptForHook = _asyncToGenerator(function* (specified, context) {
    var specifiedName = specified && specified.toLowerCase();
    var prompt = context.prompt,
        apiClient = context.apiClient;
    var client = apiClient();
    var hooks = yield client.request({
      uri: '/hooks',
      json: true
    });

    if (specifiedName) {
      var selected = hooks.filter(hook => hook.name.toLowerCase() === specifiedName)[0];

      if (!selected) {
        throw new Error("Hook with name \"".concat(specified, " not found\""));
      }

      return selected.id;
    }

    var choices = hooks.map(hook => ({
      value: hook.id,
      name: hook.name
    }));
    return prompt.single({
      message: 'Select hook to delete',
      type: 'list',
      choices
    });
  });
  return _promptForHook.apply(this, arguments);
}