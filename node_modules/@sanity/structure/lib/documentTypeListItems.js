"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const memoize_one_1 = require("memoize-one");
const Schema_1 = require("./parts/Schema");
const DataAspects_1 = require("./parts/DataAspects");
const Icon_1 = require("./parts/Icon");
const MenuItem_1 = require("./MenuItem");
const Sort_1 = require("./Sort");
const ListItem_1 = require("./ListItem");
const Editor_1 = require("./Editor");
const documentActionUtils_1 = require("./parts/documentActionUtils");
const DocumentTypeList_1 = require("./DocumentTypeList");
const PlusIcon = Icon_1.getPlusIcon();
const ListIcon = Icon_1.getListIcon();
const DetailsIcon = Icon_1.getDetailsIcon();
const getDataAspectsForSchema = memoize_one_1.default(DataAspects_1.dataAspects);
exports.DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent');
function shouldShowIcon(schemaType) {
    const preview = schemaType.preview;
    return Boolean(preview && (preview.prepare || (preview.select && preview.select.media)));
}
function getDocumentTypeListItems(schema = Schema_1.defaultSchema) {
    const resolver = getDataAspectsForSchema(schema);
    const types = resolver.getDocumentTypes();
    return types.map(typeName => getDocumentTypeListItem(typeName, schema));
}
exports.getDocumentTypeListItems = getDocumentTypeListItems;
function getDocumentTypeListItem(typeName, schema = Schema_1.defaultSchema) {
    const type = schema.get(typeName);
    if (!type) {
        throw new Error(`Schema type with name "${typeName}" not found`);
    }
    const resolver = getDataAspectsForSchema(schema);
    const title = resolver.getDisplayName(typeName);
    return new ListItem_1.ListItemBuilder()
        .id(typeName)
        .title(title)
        .schemaType(type)
        .child(getDocumentTypeList(typeName, schema));
}
exports.getDocumentTypeListItem = getDocumentTypeListItem;
function getDocumentTypeList(typeName, schema = Schema_1.defaultSchema) {
    const type = schema.get(typeName);
    if (!type) {
        throw new Error(`Schema type with name "${typeName}" not found`);
    }
    const resolver = getDataAspectsForSchema(schema);
    const title = resolver.getDisplayName(typeName);
    const showIcons = shouldShowIcon(type);
    const canCreate = documentActionUtils_1.isActionEnabled(type, 'create');
    const intentChecker = (intentName, params) => Boolean(intentName === 'edit' && params && params.id && params.type === typeName) ||
        Boolean(intentName === 'create' && params && params.type === typeName);
    intentChecker.identity = exports.DEFAULT_INTENT_HANDLER;
    return new DocumentTypeList_1.DocumentTypeListBuilder()
        .id(typeName)
        .title(title)
        .filter('_type == $type')
        .params({ type: typeName })
        .schemaType(type)
        .showIcons(showIcons)
        .defaultOrdering(Sort_1.DEFAULT_SELECTED_ORDERING_OPTION.by)
        .menuItemGroups([
        { id: 'sorting', title: 'Sort' },
        { id: 'layout', title: 'Layout' },
        { id: 'actions', title: 'Actions' }
    ])
        .child((documentId) => new Editor_1.EditorBuilder()
        .id('editor')
        .schemaType(type)
        .documentId(documentId))
        .canHandleIntent(intentChecker)
        .menuItems([
        // Create new (from action button)
        ...(canCreate
            ? [
                new MenuItem_1.MenuItemBuilder()
                    .title(`Create new ${title}`)
                    .icon(PlusIcon)
                    .intent({ type: 'create', params: { type: typeName } })
                    .showAsAction({ whenCollapsed: true })
            ]
            : []),
        // Sort by <Y>
        ...MenuItem_1.getOrderingMenuItemsForSchemaType(type),
        // Display as <Z>
        new MenuItem_1.MenuItemBuilder()
            .group('layout')
            .title('List')
            .icon(ListIcon)
            .action('setLayout')
            .params({ layout: 'default' }),
        new MenuItem_1.MenuItemBuilder()
            .group('layout')
            .title('Details')
            .icon(DetailsIcon)
            .action('setLayout')
            .params({ layout: 'detail' }),
        // Create new (from menu)
        ...(canCreate
            ? [
                new MenuItem_1.MenuItemBuilder()
                    .group('actions')
                    .title('Create newâ€¦')
                    .icon(PlusIcon)
                    .intent({ type: 'create', params: { type: typeName } })
            ]
            : [])
    ]);
}
exports.getDocumentTypeList = getDocumentTypeList;

//# sourceMappingURL=documentTypeListItems.js.map
