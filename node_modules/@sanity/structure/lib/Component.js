"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const SerializeError_1 = require("./SerializeError");
const MenuItem_1 = require("./MenuItem");
const MenuItemGroup_1 = require("./MenuItemGroup");
function getFunctionName(fn) {
    return typeof fn.displayName === 'string' ? fn.displayName : fn.name;
}
class ComponentBuilder {
    constructor(spec) {
        this.spec = spec ? spec : {};
    }
    id(id) {
        return this.clone({ id });
    }
    getId() {
        return this.spec.id;
    }
    title(title) {
        return this.clone({ title, id: this.spec.id || lodash_1.camelCase(title) });
    }
    getTitle() {
        return this.spec.title;
    }
    component(component) {
        return this.clone({ component, id: this.spec.id || getFunctionName(component) });
    }
    getComponent() {
        return this.spec.component;
    }
    menuItems(menuItems) {
        return this.clone({ menuItems });
    }
    getMenuItems() {
        return this.spec.menuItems;
    }
    menuItemGroups(menuItemGroups) {
        return this.clone({ menuItemGroups });
    }
    getMenuItemGroups() {
        return this.spec.menuItemGroups;
    }
    serialize(options = { path: [] }) {
        const { id, title, component } = this.spec;
        if (!id) {
            throw new SerializeError_1.SerializeError('`id` is required for `component` structure item', options.path, options.index).withHelpUrl(SerializeError_1.HELP_URL.ID_REQUIRED);
        }
        if (!component) {
            throw new SerializeError_1.SerializeError('`component` is required for `component` structure item', options.path, options.index).withHelpUrl(SerializeError_1.HELP_URL.ID_REQUIRED);
        }
        return {
            id,
            title,
            type: 'component',
            component,
            menuItems: (this.spec.menuItems || []).map((item, i) => MenuItem_1.maybeSerializeMenuItem(item, i, options.path)),
            menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) => MenuItemGroup_1.maybeSerializeMenuItemGroup(item, i, options.path))
        };
    }
    clone(withSpec) {
        const builder = new ComponentBuilder();
        builder.spec = Object.assign({}, this.spec, (withSpec || {}));
        return builder;
    }
}
exports.ComponentBuilder = ComponentBuilder;

//# sourceMappingURL=Component.js.map
