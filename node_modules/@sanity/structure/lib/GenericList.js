"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const Layout_1 = require("./Layout");
const MenuItem_1 = require("./MenuItem");
const MenuItemGroup_1 = require("./MenuItemGroup");
const SerializeError_1 = require("./SerializeError");
function noChildResolver() {
    return undefined;
}
class GenericListBuilder {
    constructor() {
        this.spec = {};
    }
    id(id) {
        return this.clone({ id });
    }
    getId() {
        return this.spec.id;
    }
    title(title) {
        return this.clone({ title, id: this.spec.id || lodash_1.camelCase(title) });
    }
    getTitle() {
        return this.spec.title;
    }
    defaultLayout(defaultLayout) {
        return this.clone({ defaultLayout });
    }
    getDefaultLayout() {
        return this.spec.defaultLayout;
    }
    menuItems(menuItems) {
        return this.clone({ menuItems });
    }
    getMenuItems() {
        return this.spec.menuItems;
    }
    menuItemGroups(menuItemGroups) {
        return this.clone({ menuItemGroups });
    }
    getMenuItemGroups() {
        return this.spec.menuItemGroups;
    }
    child(child) {
        return this.clone({ child });
    }
    getChild() {
        return this.spec.child;
    }
    canHandleIntent(canHandleIntent) {
        return this.clone({ canHandleIntent });
    }
    getCanHandleIntent() {
        return this.spec.canHandleIntent;
    }
    showIcons(enabled) {
        return this.clone({
            displayOptions: Object.assign({}, (this.spec.displayOptions || {}), { showIcons: enabled })
        });
    }
    getShowIcons() {
        return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined;
    }
    serialize(options = { path: [] }) {
        const id = this.spec.id || '';
        const path = options.path;
        const defaultLayout = this.spec.defaultLayout;
        if (defaultLayout && !Layout_1.layoutOptions.includes(defaultLayout)) {
            throw new SerializeError_1.SerializeError(`\`layout\` must be one of ${Layout_1.layoutOptions.map(item => `"${item}"`).join(', ')}`, path, id || options.index, this.spec.title);
        }
        return {
            id,
            title: this.spec.title,
            type: 'genericList',
            defaultLayout,
            child: this.spec.child || noChildResolver,
            canHandleIntent: this.spec.canHandleIntent,
            displayOptions: this.spec.displayOptions,
            menuItems: (this.spec.menuItems || []).map((item, i) => MenuItem_1.maybeSerializeMenuItem(item, i, path)),
            menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) => MenuItemGroup_1.maybeSerializeMenuItemGroup(item, i, path))
        };
    }
    clone(withSpec) {
        const builder = new this.constructor();
        return builder;
    }
}
exports.GenericListBuilder = GenericListBuilder;

//# sourceMappingURL=GenericList.js.map
