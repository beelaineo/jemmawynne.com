"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const SerializeError_1 = require("./SerializeError");
class EditorBuilder {
    constructor(spec) {
        this.spec = spec ? spec : {};
    }
    id(id) {
        return this.clone({ id });
    }
    getId() {
        return this.spec.id;
    }
    title(title) {
        return this.clone({ title, id: this.spec.id || lodash_1.camelCase(title) });
    }
    getTitle() {
        return this.spec.title;
    }
    documentId(documentId) {
        return this.clone({
            options: Object.assign({}, (this.spec.options || {}), { id: documentId })
        });
    }
    getDocumentId() {
        return this.spec.options && this.spec.options.id;
    }
    schemaType(documentType) {
        return this.clone({
            options: Object.assign({}, (this.spec.options || {}), { type: typeof documentType === 'string' ? documentType : documentType.name })
        });
    }
    getSchemaType() {
        return this.spec.options && this.spec.options.type;
    }
    serialize({ path, index, hint } = { path: [] }) {
        const { id, options } = this.spec;
        if (typeof id !== 'string' || !id) {
            throw new SerializeError_1.SerializeError('`id` is required for editor nodes', path, index, hint).withHelpUrl(SerializeError_1.HELP_URL.ID_REQUIRED);
        }
        if (!options || !options.id) {
            throw new SerializeError_1.SerializeError('document id (`id`) is required for editor nodes', path, id, hint).withHelpUrl(SerializeError_1.HELP_URL.DOCUMENT_ID_REQUIRED);
        }
        return Object.assign({}, this.spec, { id, type: 'document', options: { id: options.id, type: options.type } });
    }
    clone(withSpec = {}) {
        const builder = new EditorBuilder();
        const options = Object.assign({}, (this.spec.options || {}), (withSpec.options || {}));
        builder.spec = Object.assign({}, this.spec, withSpec, { options });
        return builder;
    }
}
exports.EditorBuilder = EditorBuilder;

//# sourceMappingURL=Editor.js.map
