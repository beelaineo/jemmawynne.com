"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DocumentList_1 = require("./DocumentList");
const documentTypeListItems_1 = require("./documentTypeListItems");
// 1:1 with document list builder, but when modifying key parameters (filter, params, child)
// remove canHandleIntent function since we can't guarantee child editor can handle intent
class DocumentTypeListBuilder extends DocumentList_1.DocumentListBuilder {
    constructor(spec) {
        super();
        this.spec = spec ? spec : {};
    }
    filter(filter) {
        return this.cloneWithoutDefaultIntentHandler({
            options: Object.assign({}, (this.spec.options || {}), { filter })
        });
    }
    params(params) {
        return this.cloneWithoutDefaultIntentHandler({
            options: Object.assign({}, (this.spec.options || { filter: '' }), { params })
        });
    }
    schemaType(type) {
        return this.cloneWithoutDefaultIntentHandler({
            schemaTypeName: typeof type === 'string' ? type : type.name
        });
    }
    child(child) {
        return this.cloneWithoutDefaultIntentHandler({ child });
    }
    clone(withSpec) {
        const builder = new DocumentTypeListBuilder();
        builder.spec = Object.assign({}, this.spec, (withSpec || {}));
        return builder;
    }
    cloneWithoutDefaultIntentHandler(withSpec) {
        const builder = new DocumentTypeListBuilder();
        const canHandleIntent = this.spec.canHandleIntent;
        const shouldOverride = canHandleIntent && canHandleIntent.identity === documentTypeListItems_1.DEFAULT_INTENT_HANDLER;
        const override = shouldOverride ? { canHandleIntent: undefined } : {};
        builder.spec = Object.assign({}, this.spec, (withSpec || {}), override);
        return builder;
    }
}
exports.DocumentTypeListBuilder = DocumentTypeListBuilder;

//# sourceMappingURL=DocumentTypeList.js.map
