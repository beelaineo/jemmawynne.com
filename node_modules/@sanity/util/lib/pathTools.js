"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pathIsEmpty = pathIsEmpty;
exports.expandHome = expandHome;
exports.absolutify = absolutify;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _os = _interopRequireDefault(require("os"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function pathIsEmpty(_x) {
  return _pathIsEmpty.apply(this, arguments);
}

function _pathIsEmpty() {
  _pathIsEmpty = _asyncToGenerator(function* (dir) {
    try {
      var content = yield _fsExtra.default.readdir(absolutify(dir));
      return content.length === 0;
    } catch (err) {
      if (err.code === 'ENOENT') {
        return true;
      }

      throw err;
    }
  });
  return _pathIsEmpty.apply(this, arguments);
}

function expandHome(filePath) {
  if (filePath.charCodeAt(0) === 126
  /* ~ */
  ) {
      if (filePath.charCodeAt(1) === 43
      /* + */
      ) {
          return _path.default.join(process.cwd(), filePath.slice(2));
        }

      var home = _os.default.homedir();

      return home ? _path.default.join(home, filePath.slice(1)) : filePath;
    }

  return filePath;
}

function absolutify(dir) {
  var pathName = expandHome(dir);
  return _path.default.isAbsolute(pathName) ? pathName : _path.default.resolve(process.cwd(), pathName);
}