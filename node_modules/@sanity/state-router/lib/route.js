"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = route;

var _parseRoute = _interopRequireDefault(require("./parseRoute"));

var _resolveStateFromPath = _interopRequireDefault(require("./resolveStateFromPath"));

var _resolvePathFromState = _interopRequireDefault(require("./resolvePathFromState"));

var _paramsEncoding = require("./utils/paramsEncoding");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function normalizeChildren(children) {
  if (Array.isArray(children) || typeof children === 'function') {
    return children;
  }

  return children ? [children] : [];
}

function isRoute(val) {
  return val && '_isRoute' in val;
}

function normalizeArgs(path, childrenOrOpts, children) {
  if (typeof path === 'object') {
    return path;
  }

  if (Array.isArray(childrenOrOpts) || typeof childrenOrOpts === 'function' || isRoute(childrenOrOpts)) {
    return {
      path,
      children: normalizeChildren(childrenOrOpts)
    };
  }

  if (children) {
    return _objectSpread({
      path
    }, childrenOrOpts, {
      children: normalizeChildren(children)
    });
  }

  return _objectSpread({
    path
  }, childrenOrOpts);
}

function route(routeOrOpts, childrenOrOpts, children) {
  return createNode(normalizeArgs(routeOrOpts, childrenOrOpts, children));
}

route.scope = function scope(scopeName, ...rest) {
  const options = normalizeArgs(...rest);
  return createNode(_objectSpread({}, options, {
    scope: scopeName
  }));
};

function normalize(...paths) {
  return paths.reduce((acc, path) => acc.concat(path.split('/')), []).filter(Boolean);
}

route.intents = function intents(base) {
  const basePath = normalize(base).join('/');
  return route(`${basePath}/:intent`, [route(':params', {
    transform: {
      params: {
        toState: _paramsEncoding.decodeParams,
        toPath: _paramsEncoding.encodeParams
      }
    }
  })]);
};

const EMPTY_STATE = {};

function isRoot(pathname) {
  const parts = pathname.split('/');

  for (let i = 0; i < parts.length; i++) {
    if (parts[i]) {
      return false;
    }
  }

  return true;
}

function createNode(options) {
  const path = options.path,
        scope = options.scope,
        transform = options.transform,
        children = options.children;

  if (!path) {
    throw new TypeError('Missing path');
  }

  const parsedRoute = (0, _parseRoute.default)(path);
  return {
    _isRoute: true,
    // todo: make a Router class instead
    scope,
    route: parsedRoute,
    children: children || [],
    transform,

    encode(state) {
      return (0, _resolvePathFromState.default)(this, state);
    },

    decode(_path) {
      return (0, _resolveStateFromPath.default)(this, _path);
    },

    isRoot: isRoot,

    isNotFound(pathname) {
      return this.decode(pathname) === null;
    },

    getBasePath() {
      return this.encode(EMPTY_STATE);
    },

    getRedirectBase(pathname) {
      if (isRoot(pathname)) {
        const basePath = this.getBasePath(); // Check if basepath is something different than given

        if (pathname !== basePath) {
          return basePath;
        }
      }

      return null;
    }

  };
}