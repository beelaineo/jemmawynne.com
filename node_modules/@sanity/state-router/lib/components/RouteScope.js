"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _isEmpty = _interopRequireDefault(require("../utils/isEmpty"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function addScope(routerState, scope, scopedState) {
  return scopedState && _objectSpread({}, routerState, {
    [scope]: scopedState
  });
}

class RouteScope extends _react.default.Component {
  constructor(props, context) {
    super();

    _defineProperty(this, "props", void 0);

    _defineProperty(this, "__internalRouter", void 0);

    _defineProperty(this, "getScopedState", () => {
      const scope = this.props.scope;
      const parentInternalRouter = this.context.__internalRouter;
      return parentInternalRouter.getState()[scope];
    });

    _defineProperty(this, "resolvePathFromState", nextState => {
      const parentInternalRouter = this.context.__internalRouter;
      const scope = this.props.scope;
      const nextStateScoped = (0, _isEmpty.default)(nextState) ? {} : addScope(parentInternalRouter.getState(), scope, nextState);
      return parentInternalRouter.resolvePathFromState(nextStateScoped);
    });

    _defineProperty(this, "navigate", (nextState, options) => {
      const parentInternalRouter = this.context.__internalRouter;
      const nextScopedState = addScope(parentInternalRouter.getState(), this.props.scope, nextState);
      parentInternalRouter.navigate(nextScopedState, options);
    });

    const _parentInternalRouter = context.__internalRouter;
    this.__internalRouter = _objectSpread({}, _parentInternalRouter, {
      resolvePathFromState: this.resolvePathFromState,
      navigate: this.navigate,
      getState: this.getScopedState
    });
  }

  getChildContext() {
    return {
      __internalRouter: this.__internalRouter
    };
  }

  render() {
    return this.props.children;
  }

}

exports.default = RouteScope;

_defineProperty(RouteScope, "childContextTypes", RouteScope.contextTypes = {
  __internalRouter: _propTypes.default.object
});