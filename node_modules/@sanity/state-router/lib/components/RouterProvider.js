"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _nanoPubsub = _interopRequireDefault(require("nano-pubsub"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RouterProvider extends _react.default.Component {
  constructor(props) {
    super();

    _defineProperty(this, "props", void 0);

    _defineProperty(this, "__internalRouter", void 0);

    _defineProperty(this, "_state", void 0);

    _defineProperty(this, "navigateUrl", (url, options = {}) => {
      const onNavigate = this.props.onNavigate;
      onNavigate(url, options);
    });

    _defineProperty(this, "navigateState", (nextState, options = {}) => {
      this.navigateUrl(this.resolvePathFromState(nextState), options);
    });

    _defineProperty(this, "navigateIntent", (intentName, params, options = {}) => {
      this.navigateUrl(this.resolveIntentLink(intentName, params), options);
    });

    _defineProperty(this, "getState", () => this._state);

    _defineProperty(this, "resolvePathFromState", state => {
      return this.props.router.encode(state);
    });

    _defineProperty(this, "resolveIntentLink", (intentName, params) => {
      return this.props.router.encode({
        intent: intentName,
        params
      });
    });

    this._state = props.state;
    this.__internalRouter = {
      resolvePathFromState: this.resolvePathFromState,
      resolveIntentLink: this.resolveIntentLink,
      navigateUrl: this.navigateUrl,
      navigate: this.navigateState,
      navigateIntent: this.navigateIntent,
      getState: this.getState,
      channel: (0, _nanoPubsub.default)()
    };
  }

  getChildContext() {
    return {
      __internalRouter: this.__internalRouter
    };
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.state !== nextProps.state) {
      this._state = nextProps.state;

      this.__internalRouter.channel.publish(nextProps.state);
    }
  }

  render() {
    return this.props.children;
  }

}

exports.default = RouterProvider;

_defineProperty(RouterProvider, "childContextTypes", {
  __internalRouter: _propTypes.default.object
});