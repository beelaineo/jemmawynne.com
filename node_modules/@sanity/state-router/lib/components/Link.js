"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireDefault(require("react"));

var _internalRouterContextTypeCheck = _interopRequireDefault(require("./internalRouterContextTypeCheck"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isLeftClickEvent(event) {
  return event.button === 0;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

class Link extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "props", void 0);

    _defineProperty(this, "context", void 0);

    _defineProperty(this, "_element", void 0);

    _defineProperty(this, "handleClick", event => {
      if (!this.context.__internalRouter) {
        return;
      }

      if (event.isDefaultPrevented()) {
        return;
      }

      const _this$props = this.props,
            onClick = _this$props.onClick,
            href = _this$props.href,
            target = _this$props.target,
            replace = _this$props.replace;

      if (onClick) {
        onClick(event);
      }

      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
        return;
      } // If target prop is set (e.g. to "_blank") let browser handle link.


      if (target) {
        return;
      }

      event.preventDefault();

      this.context.__internalRouter.navigateUrl(href, {
        replace
      });
    });

    _defineProperty(this, "setElement", element => {
      if (element) {
        this._element = element;
      }
    });
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  render() {
    return _react.default.createElement("a", _extends({}, (0, _omit2.default)(this.props, 'replace'), {
      onClick: this.handleClick,
      ref: this.setElement
    }));
  }

}

exports.default = Link;

_defineProperty(Link, "defaultProps", {
  replace: false
});

_defineProperty(Link, "contextTypes", {
  __internalRouter: _internalRouterContextTypeCheck.default
});