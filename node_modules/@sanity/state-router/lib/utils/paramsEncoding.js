"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeParams = decodeParams;
exports.encodeParams = encodeParams;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function decodeParams(pathsegment) {
  return pathsegment.split(';').reduce((params, pair) => {
    const _pair$split = pair.split('='),
          _pair$split2 = _slicedToArray(_pair$split, 2),
          key = _pair$split2[0],
          value = _pair$split2[1];

    params[key] = value;
    return params;
  }, {});
}

function encodeParams(params) {
  return Object.keys(params).map(key => `${key}=${params[key]}`).join(';');
}