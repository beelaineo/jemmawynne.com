"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WithReferringDocuments = void 0;

var _document = _interopRequireDefault(require("part:@sanity/base/datastore/document"));

var _reactPropsStream = require("react-props-stream");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var loadProps = receivedProps$ => receivedProps$.pipe((0, _operators.distinctUntilChanged)((prev, next) => prev.id === next.id), (0, _operators.switchMap)(receivedProps => (0, _rxjs.concat)((0, _rxjs.of)(_objectSpread({}, receivedProps, {
  referringDocuments: [],
  isLoading: true
})), _document.default.query('*[references($docId)] [0...101]', {
  docId: receivedProps.id
}).pipe((0, _operators.map)(event => _objectSpread({}, receivedProps, {
  referringDocuments: event.documents,
  isLoading: false
}))))));

var WithReferringDocuments = (0, _reactPropsStream.withPropsStream)(loadProps, (_ref) => {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return children(props);
});
exports.WithReferringDocuments = WithReferringDocuments;