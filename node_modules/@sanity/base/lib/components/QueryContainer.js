"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var _reactPropsStream = require("react-props-stream");

var _listenQuery = require("./listenQuery");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var INITIAL_CHILD_PROPS = {
  result: null,
  error: false
};

var createResultChildProps = documents => ({
  result: {
    documents
  },
  loading: false,
  error: false
});

var createErrorChildProps = error => ({
  result: null,
  loading: false,
  error
}); // todo: split into separate standalone parts so that behavior can be re-used


var _default = (0, _reactPropsStream.streamingComponent)(receivedProps$ => {
  var _createEventHandler = (0, _reactPropsStream.createEventHandler)(),
      _createEventHandler2 = _slicedToArray(_createEventHandler, 2),
      onRetry$ = _createEventHandler2[0],
      onRetry = _createEventHandler2[1];

  var queryProps$ = receivedProps$.pipe((0, _operators.map)(props => ({
    query: props.query,
    params: props.params
  })), (0, _operators.distinctUntilChanged)(_reactFastCompare.default), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
  var queryResults$ = queryProps$.pipe((0, _operators.switchMap)(queryProps => {
    var query$ = (0, _listenQuery.listenQuery)(queryProps.query, queryProps.params).pipe((0, _operators.map)(createResultChildProps), (0, _operators.share)());
    return (0, _rxjs.merge)((0, _rxjs.of)({
      loading: true
    }).pipe((0, _operators.delay)(400), (0, _operators.takeUntil)(query$)), query$);
  }));
  var childProps$ = queryResults$.pipe((0, _operators.startWith)(INITIAL_CHILD_PROPS), (0, _operators.catchError)((err, caught$) => (0, _rxjs.concat)((0, _rxjs.of)(createErrorChildProps(err)), onRetry$.pipe((0, _operators.take)(1), (0, _operators.mergeMapTo)(caught$)))), (0, _operators.scan)((prev, next) => _objectSpread({}, prev, next)));
  return (0, _rxjs.combineLatest)(receivedProps$, childProps$).pipe((0, _operators.map)((_ref) => {
    var _ref2 = _slicedToArray(_ref, 2),
        receivedProps = _ref2[0],
        queryResult = _ref2[1];

    var children = receivedProps.children,
        mapFn = receivedProps.mapFn;

    if (typeof mapFn === 'function') {
      // eslint-disable-next-line no-console
      console.warn('The mapFn prop of the <QueryContainer/> is removed.');
    }

    return children(_objectSpread({}, queryResult, {
      onRetry
    }));
  }));
});

exports.default = _default;