"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _intl = require("part:@sanity/base/locale/intl");

var _formatters = require("part:@sanity/base/locale/formatters");

var _languageResolver = require("part:@sanity/base/language-resolver");

var _localeMessageFetcher = _interopRequireDefault(require("part:@sanity/base/locale-message-fetcher"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SanityIntlProvider extends _react.default.Component {
  constructor(props) {
    super(props);
    this.catchError = this.catchError.bind(this);
    this.state = {
      messages: null,
      language: null,
      error: null
    };
  }

  catchError(err) {
    console.error(err); // eslint-disable-line no-console

    this.setState({
      error: err
    });
  }

  componentDidMount() {
    var supportedLanguages = this.props.supportedLanguages;
    (0, _languageResolver.resolveLanguage)(supportedLanguages).then(language => {
      _localeMessageFetcher.default.fetchLocalizedMessages(language).then(localizedMessages => {
        var languagePrefix = language.split('-')[0];

        var localeData = require("react-intl/locale-data/".concat(languagePrefix));

        (0, _intl.addLocaleData)(localeData); // In order to get a proper stacktrace on rendering errors,
        // we need to move this out of the current call stack

        this.mountTimer = setTimeout(() => {
          this.setState({
            messages: localizedMessages,
            language: language
          });
        }, 0);
      }).catch(this.catchError);
    }).catch(this.catchError);
  }

  componentWillUnmount() {
    clearTimeout(this.mountTimer);
  }

  render() {
    var _this$state = this.state,
        messages = _this$state.messages,
        language = _this$state.language,
        error = _this$state.error;

    if (error) {
      return _react.default.createElement("div", null, _react.default.createElement("h2", null, "Error fetching locale data"), _react.default.createElement("code", null, _react.default.createElement("pre", null, error.stack)));
    }

    if (!messages) {
      return _react.default.createElement(_spinner.default, {
        fullscreen: true,
        message: "Loading locale messages..."
      });
    }

    return _react.default.createElement(_intl.IntlProvider, {
      locale: language,
      messages: messages
    }, _react.default.createElement(_formatters.IntlWrapper, null, this.props.children));
  }

}

SanityIntlProvider.propTypes = {
  children: _propTypes.default.node,
  supportedLanguages: _propTypes.default.arrayOf(_propTypes.default.string)
};
var _default = SanityIntlProvider;
exports.default = _default;