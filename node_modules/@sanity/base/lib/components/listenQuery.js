"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listenQuery = void 0;

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fetch = (query, params) => (0, _rxjs.defer)(() => _client.default.observable.fetch(query, params));

var listen = (query, params) => (0, _rxjs.defer)(() => _client.default.listen(query, params, {
  events: ['welcome', 'mutation', 'reconnect'],
  includeResult: false
})); // todo: promote as building block for better re-use
// todo: optimize by patching collection in-place


var listenQuery = (query, params) => {
  var fetchOnce$ = fetch(query, params);
  var events$ = listen(query, params).pipe((0, _operators.share)());
  var mutations$ = events$.pipe((0, _operators.filter)(ev => ev.type === 'mutation'));
  return (0, _rxjs.concat)(events$.pipe((0, _operators.mergeMap)(first => {
    if (first.type === 'welcome') {
      return fetchOnce$;
    }

    return (0, _rxjs.throwError)(new Error(first.type === 'reconnect' ? // if the first event is not welcome, it is most likely a reconnect and
    'Could not establish EventSource connection' : // if it's not a reconnect something is very wrong
    "Received unexpected type of first event \"".concat(first.type, "\"")));
  }), (0, _operators.take)(1)), mutations$.pipe((0, _operators.auditTime)(1000), (0, _operators.switchMapTo)(fetchOnce$)));
};

exports.listenQuery = listenQuery;