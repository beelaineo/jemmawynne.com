"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMessage = exports.formatHTMLMessage = exports.formatRelative = exports.formatPlural = exports.formatNumber = exports.formatTime = exports.formatDate = exports.IntlWrapper = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _intl = require("part:@sanity/base/locale/intl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var intl = null;

class IntlWrapper extends _react.default.Component {
  componentWillMount() {
    intl = this.context.intl;
  }

  componentWillUpdate() {
    intl = this.context.intl;
  }

  render() {
    return _react.default.createElement("div", null, this.props.children);
  }

}

exports.IntlWrapper = IntlWrapper;

_defineProperty(IntlWrapper, "contextTypes", {
  intl: _intl.intlShape
});

_defineProperty(IntlWrapper, "propTypes", {
  children: _propTypes.default.node.isRequired
});

var proxies = ['formatDate', 'formatTime', 'formatRelative', 'formatNumber', 'formatPlural', 'formatMessage', 'formatHTMLMessage'].reduce((target, fnName) => {
  target[fnName] = function () {
    if (!intl) {
      throw new Error('IntlWrapper must be mounted before using format* functions');
    }

    return intl[fnName](...arguments);
  };

  return target;
}, {});
var formatDate = proxies.formatDate;
exports.formatDate = formatDate;
var formatTime = proxies.formatTime;
exports.formatTime = formatTime;
var formatNumber = proxies.formatNumber;
exports.formatNumber = formatNumber;
var formatPlural = proxies.formatPlural;
exports.formatPlural = formatPlural;
var formatRelative = proxies.formatRelative;
exports.formatRelative = formatRelative;

var formatHTMLMessage = (desc, values) => {
  return typeof desc === 'string' ? proxies.formatHTMLMessage({
    id: desc
  }, values) : proxies.formatHTMLMessage(desc, values);
};

exports.formatHTMLMessage = formatHTMLMessage;

var formatMessage = (desc, values) => {
  return typeof desc === 'string' ? proxies.formatMessage({
    id: desc
  }, values) : proxies.formatMessage(desc, values);
};

exports.formatMessage = formatMessage;