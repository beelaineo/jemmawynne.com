"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createLocationStore;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _Location = _interopRequireDefault(require("../utils/Location"));

var _history = require("history");

var _createActions = _interopRequireDefault(require("../utils/createActions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noop = () => {}; // eslint-disable-line no-empty-function


var history = (0, _history.createBrowserHistory)();

function readLocation() {
  return _Location.default.parse(document.location.href);
}

var interceptors = [];

function navigate(nextUrl, options) {
  if (interceptors.length > 0) {
    var cancelled = false;
    var nextNavigation = {
      nextUrl: nextUrl,

      cancel() {
        cancelled = true;
      }

    };
    interceptors.some(interceptor => {
      interceptor(nextNavigation);
      return !cancelled;
    });

    if (cancelled) {
      return {
        progress: new _rxjs.Observable(noop)
      };
    }
  }

  if (options.replace) {
    history.replace(nextUrl);
  } else {
    history.push(nextUrl);
  }

  return {
    progress: new _rxjs.Observable(noop)
  };
}

var locationChange$ = new _rxjs.Observable(observer => {
  return history.listen(() => observer.next(readLocation()));
}).pipe((0, _operators.map)(location => ({
  type: 'change',
  location: location
})), (0, _operators.share)());

function createLocationStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var eventStream = new _rxjs.Observable(observer => {
    var subscription = locationChange$.subscribe(observer);
    observer.next({
      type: 'snapshot',
      location: readLocation()
    });
    return subscription;
  });
  return {
    state: eventStream,

    intercept(interceptor) {
      interceptors.push(interceptor);
      return () => {
        interceptors.splice(interceptors.indexOf(interceptor), 1);
      };
    },

    actions: (0, _createActions.default)({
      navigate
    })
  };
}