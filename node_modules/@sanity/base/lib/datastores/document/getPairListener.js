"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPairListener = getPairListener;

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DOCS_QUERY = "{\n \"published\": *[_id == $publishedId][0],\n \"draft\": *[_id == $draftId][0]\n}";

function fetchDocumentSnapshots(_ref) {
  var publishedId = _ref.publishedId,
      draftId = _ref.draftId;
  return _client.default.observable.fetch(DOCS_QUERY, {
    publishedId,
    draftId
  });
}

function createSnapshotEvent(documentId, document) {
  return {
    type: 'snapshot',
    documentId: documentId,
    document
  };
}

function getPairListener(idPair) {
  var publishedId = idPair.publishedId,
      draftId = idPair.draftId;
  return (0, _rxjs.defer)(() => _client.default.observable.listen("*[_id == $publishedId || _id == $draftId]", {
    publishedId,
    draftId
  }, {
    includeResult: false,
    events: ['welcome', 'mutation', 'reconnect']
  })).pipe((0, _operators.concatMap)(event => event.type === 'welcome' ? fetchDocumentSnapshots({
    publishedId,
    draftId
  }).pipe((0, _operators.concatMap)(snapshots => [createSnapshotEvent(draftId, snapshots.draft), createSnapshotEvent(publishedId, snapshots.published)])) : (0, _rxjs.of)(event)));
}