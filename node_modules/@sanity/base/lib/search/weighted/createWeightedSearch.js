"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWeightedSearch = createWeightedSearch;

var _union2 = _interopRequireDefault(require("lodash/union"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _flow2 = _interopRequireDefault(require("lodash/flow"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _toLower2 = _interopRequireDefault(require("lodash/toLower"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _operators = require("rxjs/operators");

var _searchUtils = require("../../util/searchUtils");

var _draftUtils = require("../../util/draftUtils");

var _applyWeights = require("./applyWeights");

var _tokenize = require("../common/tokenize");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var combinePaths = (0, _flow2.default)([_flatten2.default, _union2.default, _compact2.default]);

var toGroqParams = terms => terms.reduce((acc, term, i) => {
  acc["t".concat(i)] = "".concat(term, "*"); // "t" is short for term

  return acc;
}, {});

function createWeightedSearch(types, client) {
  var searchSpec = types.map(type => {
    return {
      typeName: type.name,
      paths: type.__experimental_search.map(config => ({
        weight: config.weight,
        path: (0, _searchUtils.joinPath)(config.path)
      }))
    };
  });
  var combinedSearchPaths = combinePaths(searchSpec.map(configForType => configForType.paths.map(opt => opt.path)));
  var selections = searchSpec.map(spec => "_type == \"".concat(spec.typeName, "\" => {").concat(spec.paths.map((cfg, i) => "\"w".concat(i, "\": ").concat(cfg.path)), "}")); // this is the actual search function that takes the search string and returns the hits

  return function search(queryString) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var terms = (0, _uniq2.default)((0, _compact2.default)((0, _tokenize.tokenize)((0, _toLower2.default)(queryString))));
    var constraints = terms.map((term, i) => combinedSearchPaths.map(joinedPath => "".concat(joinedPath, " match $t").concat(i)));
    var filters = ['_type in $types', opts.includeDrafts === false && "!(_id in path('drafts.**'))", ...constraints.map(constraint => "(".concat(constraint.join('||'), ")"))].filter(Boolean);
    var query = "*[".concat(filters.join('&&'), "][0...$limit]{_type, _id, ...select(").concat(selections.join(',\n'), ")}");
    return client.observable.fetch(query, _objectSpread({}, toGroqParams(terms), {
      types: searchSpec.map(spec => spec.typeName),
      limit: 1000
    })).pipe((0, _operators.map)(_draftUtils.removeDupes), (0, _operators.map)(hits => (0, _applyWeights.applyWeights)(searchSpec, hits, terms)), (0, _operators.map)(hits => (0, _sortBy2.default)(hits, hit => -hit.score)), (0, _operators.map)(hits => hits.slice(0, 100)));
  };
}