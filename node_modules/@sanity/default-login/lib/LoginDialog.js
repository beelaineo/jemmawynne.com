"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _authenticationFetcher = _interopRequireDefault(require("part:@sanity/base/authentication-fetcher"));

var _defaultLogin = _interopRequireDefault(require("config:@sanity/default-login"));

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _loginDialogContent = _interopRequireDefault(require("part:@sanity/base/login-dialog-content"));

var _generateHelpUrl = _interopRequireDefault(require("@sanity/generate-help-url"));

var _LoginDialog = _interopRequireDefault(require("./styles/LoginDialog.css"));

var _cancelWrap = _interopRequireDefault(require("./cancelWrap"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LoginDialog extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      providers: [],
      isLoaded: false,
      shouldRedirect: false,
      error: null
    });

    _defineProperty(this, "handleLoginButtonClicked", (provider, evnt) => {
      evnt.preventDefault();
      this.redirectToProvider(provider);
    });

    _defineProperty(this, "handleErrorDialogClosed", () => {
      this.setState({
        error: null
      });
    });
  }

  componentDidMount() {
    this.getProviders = (0, _cancelWrap.default)(_authenticationFetcher.default.getProviders());
    this.getProviders.promise.then(providers => this.setState({
      providers: providers,
      isLoaded: true,
      shouldRedirect: providers.length === 1 && _defaultLogin.default.providers.redirectOnSingle
    })).catch(err => this.setState({
      error: err
    }));
  }

  componentWillUnmount() {
    this.getProviders.cancel();
  }

  componentDidUpdate() {
    var _this$state = this.state,
        providers = _this$state.providers,
        isLoaded = _this$state.isLoaded,
        shouldRedirect = _this$state.shouldRedirect;

    if (isLoaded && shouldRedirect) {
      this.redirectToProvider(providers[0]);
    }
  }

  redirectToProvider(provider) {
    var projectId = this.props.projectId;
    var currentUrl = encodeURIComponent(window.location.toString());
    var params = [`origin=${currentUrl}`, projectId && `projectId=${projectId}`].filter(Boolean);

    if (provider.custom && !provider.supported) {
      this.setState({
        error: {
          message: 'This project is missing the required "thirdPartyLogin" ' + 'feature to support custom logins.',
          link: (0, _generateHelpUrl.default)('third-party-login')
        }
      });
      return;
    }

    window.location = `${provider.url}?${params.join('&')}`;
  }

  render() {
    var _this$state2 = this.state,
        error = _this$state2.error,
        providers = _this$state2.providers,
        isLoaded = _this$state2.isLoaded,
        shouldRedirect = _this$state2.shouldRedirect;
    var _this$props = this.props,
        title = _this$props.title,
        description = _this$props.description,
        SanityLogo = _this$props.SanityLogo;

    if (error) {
      return _react.default.createElement(_fullscreen.default, {
        color: "danger",
        title: "Error",
        isOpen: true,
        centered: true,
        onClose: this.handleErrorDialogClosed
      }, _react.default.createElement("div", {
        className: _LoginDialog.default.error
      }, error.message, error.link && _react.default.createElement("p", null, _react.default.createElement("a", {
        href: error.link
      }, "Read more"))));
    }

    if (isLoaded && providers.length === 0) {
      return _react.default.createElement("div", null, "No providers configured");
    }

    if (isLoaded && !shouldRedirect) {
      return _react.default.createElement(_loginDialogContent.default, {
        title: title,
        description: description,
        providers: providers,
        SanityLogo: SanityLogo,
        onLoginButtonClick: this.handleLoginButtonClicked
      });
    }

    return null;
  }

}

exports.default = LoginDialog;

_defineProperty(LoginDialog, "propTypes", {
  title: _propTypes.default.node.isRequired,
  description: _propTypes.default.node,
  projectId: _propTypes.default.string,
  SanityLogo: _propTypes.default.func
});

_defineProperty(LoginDialog, "defaultProps", {
  description: null,
  projectId: null,
  SanityLogo: null
});