"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _configSanity = _interopRequireDefault(require("config:sanity"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _brandLogo = _interopRequireDefault(require("part:@sanity/base/brand-logo?"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _CookieTest = _interopRequireDefault(require("./styles/CookieTest.css"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var projectName = _configSanity.default.project && _configSanity.default.project.name || '';

var checkCookies = () => {
  return _client.default.request({
    method: 'post',
    uri: '/auth/testCookie',
    withCredentials: true
  }).then(() => {
    return _client.default.request({
      uri: '/auth/testCookie',
      withCredentials: true
    }).then(() => true).catch(() => false);
  }).then(result => ({
    isCookieError: !result
  })).catch(error => ({
    error
  }));
};

class CookieTest extends _react.PureComponent {
  constructor() {
    super(...arguments);
    this.state = {
      isLoading: true
    };
  }

  componentWillMount() {
    checkCookies().then(res => this.setState({
      result: res,
      isLoading: false
    }));
  }

  renderWhiteListForm() {
    // eslint-disable-line class-methods-use-this
    var _this$props = this.props,
        SanityLogo = _this$props.SanityLogo,
        sanityLogo = _this$props.sanityLogo;
    var redirectTo = `${_client.default.clientConfig.url}/auth/whitelist?redirectTo=${encodeURIComponent(window.location.toString())}`;
    return _react.default.createElement("div", {
      className: _CookieTest.default.root
    }, _react.default.createElement("div", {
      className: _CookieTest.default.inner
    }, SanityLogo && _react.default.createElement("div", {
      className: _CookieTest.default.sanityLogo
    }, _react.default.createElement(SanityLogo, null)), sanityLogo && !SanityLogo && _react.default.createElement("div", {
      className: _CookieTest.default.sanityLogo
    }, sanityLogo), _react.default.createElement("div", {
      className: _CookieTest.default.branding
    }, _react.default.createElement("h1", {
      className: _brandLogo.default ? _CookieTest.default.projectNameHidden : _CookieTest.default.projectName
    }, projectName), _brandLogo.default && _react.default.createElement("div", {
      className: _CookieTest.default.brandLogoContainer
    }, _react.default.createElement(_brandLogo.default, {
      projectName: projectName
    }))), _react.default.createElement("div", {
      className: _CookieTest.default.title
    }, _react.default.createElement("h2", null, "Accept the Cookie")), _react.default.createElement("div", {
      className: _CookieTest.default.description
    }, _react.default.createElement("p", null, "Your browser didn't accept our cookie so we're having trouble logging you in."), _react.default.createElement("p", null, "You can explicitly accept it though by clicking below.")), _react.default.createElement("form", {
      method: "post",
      className: _CookieTest.default.acceptCookieForm,
      action: `${_client.default.clientConfig.url}/auth/testCookie`,
      encType: "application/x-www-form-urlencoded"
    }, _react.default.createElement("input", {
      type: "hidden",
      name: "redirectTo",
      value: redirectTo
    }), _react.default.createElement(_default2.default, {
      color: "success",
      inverted: true,
      type: "submit"
    }, "ACCEPT COOKIE"))));
  }

  render() {
    var _this$state = this.state,
        isLoading = _this$state.isLoading,
        result = _this$state.result;

    if (isLoading) {
      return _react.default.createElement(_spinner.default, {
        fullscreen: true,
        center: true
      });
    }

    if (result.isCookieError) {
      return this.renderWhiteListForm();
    }

    return _react.default.createElement("div", null, this.props.children);
  }

}

_defineProperty(CookieTest, "propTypes", {
  children: _propTypes.default.node.isRequired
});

CookieTest.propTypes = {
  sanityLogo: _propTypes.default.node,
  SanityLogo: _propTypes.default.func
};
var _default = CookieTest;
exports.default = _default;