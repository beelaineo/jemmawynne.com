"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _why = _interopRequireDefault(require("is-equal/why"));

var _withPatchSubscriber = _interopRequireDefault(require("./withPatchSubscriber"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (0, _withPatchSubscriber.default)((_temp = _class = class ValueSync extends _react.default.Component {
  constructor(props) {
    super();

    _defineProperty(this, "props", void 0);

    _defineProperty(this, "state", void 0);

    _defineProperty(this, "unsubscribe", void 0);

    _defineProperty(this, "checkDiff", (0, _debounce2.default)(() => {
      var propsVal = this.props.value;
      var stateVal = this.state.value ? this.props.serialize(this.state.value) : this.state.value;
      var notEqual = (0, _why.default)(propsVal, stateVal);

      if (notEqual) {
        // eslint-disable-next-line no-console
        console.warn('Serialized local input value (%o) out of sync with actual value (%o): %s', propsVal, stateVal, notEqual);
      }
    }, 5000));

    this.state = {
      value: props.deserialize(props.value)
    };
    this.unsubscribe = props.subscribe((_ref) => {
      var snapshot = _ref.snapshot,
          patches = _ref.patches,
          shouldReset = _ref.shouldReset;

      if (shouldReset) {
        // eslint-disable-next-line no-console
        console.warn('Serialized local input value was reset due to a patch that targeted an ancestor');
        this.setState({
          value: props.deserialize(snapshot)
        });
      }

      this.receivePatches(patches);
    });
  }

  componentWillUnmount() {
    this.unsubscribe();
    this.checkDiff.cancel();
  }

  receivePatches(patches) {
    var applyPatch = this.props.applyPatch;
    this.setState(prevState => ({
      value: patches.reduce(applyPatch, prevState.value)
    }));
  }

  componentDidUpdate() {
    if (__DEV__) {
      this.checkDiff();
    }
  }

  render() {
    var value = this.state.value;
    return this.props.children(_objectSpread({}, this.props, {
      value
    }));
  }

}, _defineProperty(_class, "contextTypes", {
  getValuePath: _propTypes.default.func,
  formBuilder: _propTypes.default.any
}), _temp));

exports.default = _default;