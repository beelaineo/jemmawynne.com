"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withDocument;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function withDocument(ComposedComponent) {
  var _class, _temp;

  return _temp = _class = class WithDocument extends _react.default.PureComponent {
    constructor(props, context) {
      super();

      _defineProperty(this, "state", void 0);

      _defineProperty(this, "unsubscribe", void 0);

      _defineProperty(this, "setInput", input => {
        this._input = input;
      });

      var formBuilder = context.formBuilder;
      this.state = {
        document: formBuilder.getDocument()
      };
      this.unsubscribe = formBuilder.onPatch((_ref) => {
        var snapshot = _ref.snapshot;

        // we will also receive "delete"-patches, with {snapshot: null}. Don't pass null documents.
        if (snapshot) {
          this.setState({
            document: snapshot
          });
        }
      });
    }

    componentWillUnmount() {
      this.unsubscribe();
    }

    focus() {
      this._input.focus();
    }

    render() {
      return _react.default.createElement(ComposedComponent, _extends({
        ref: this.setInput,
        document: this.state.document
      }, this.props));
    }

  }, _defineProperty(_class, "displayName", "withDocument(".concat(ComposedComponent.displayName || ComposedComponent.name, ")")), _defineProperty(_class, "contextTypes", {
    formBuilder: _propTypes.default.any
  }), _temp;
}