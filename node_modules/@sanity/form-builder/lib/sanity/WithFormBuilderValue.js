"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _throttle2 = _interopRequireDefault(require("lodash/throttle"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _subscriptionManager = _interopRequireDefault(require("../utils/subscriptionManager"));

var _PatchEvent = _interopRequireDefault(require("../PatchEvent"));

var _formBuilderValueStore = require("./formBuilderValueStore");

var _SanityFormBuilderContext = _interopRequireDefault(require("./SanityFormBuilderContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getInitialState() {
  return {
    isLoading: true,
    isSaving: false,
    value: null,
    deletedSnapshot: null
  };
}

class WithFormBuilderValue extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "document", void 0);

    _defineProperty(this, "subscriptions", (0, _subscriptionManager.default)('documentEvents', 'commit'));

    _defineProperty(this, "state", getInitialState());

    _defineProperty(this, "patchChannel", _SanityFormBuilderContext.default.createPatchChannel());

    _defineProperty(this, "handleDocumentEvent", event => {
      switch (event.type) {
        case 'snapshot':
          {
            this.setState({
              isLoading: false,
              value: event.document ? event.document : null
            });
            break;
          }

        case 'rebase':
          {
            this.setState({
              value: event.document
            });
            break;
          }

        case 'mutation':
          {
            this.handleIncomingMutationEvent(event);
            break;
          }

        case 'create':
          {
            this.setState({
              value: event.document
            });
            break;
          }

        default:
          {
            // eslint-disable-next-line no-console
            console.log('Unhandled document event type "%s"', event.type, event);
          }
      }
    });

    _defineProperty(this, "commit", (0, _throttle2.default)(() => {
      this.setState({
        isSaving: true
      });
      this.subscriptions.replace('commit', this.document.commit().subscribe({
        next: () => {// todo
        },
        error: _error => {// todo
        },
        complete: () => {
          this.setState({
            isSaving: false
          });
        }
      }));
    }, 1000, {
      leading: true,
      trailing: true
    }));

    _defineProperty(this, "handleChange", event => {
      this.document.createIfNotExists({
        _id: this.props.documentId,
        _type: this.props.typeName
      });
      this.document.patch(event.patches);
      this.commit();
    });

    _defineProperty(this, "handleDelete", () => {
      this.document.delete();
      this.commit();
    });

    _defineProperty(this, "handleCreate", document => {
      this.document.create(document);
      this.commit();
    });
  }

  checkoutDocument(documentId) {
    this.document = (0, _formBuilderValueStore.checkout)(documentId);
    this.subscriptions.replace('documentEvents', this.document.events.subscribe({
      next: this.handleDocumentEvent // error: this.handleDocumentError

    }));
  }

  componentWillUnmount() {
    this.subscriptions.unsubscribeAll();
  }

  componentWillMount() {
    this.checkoutDocument(this.props.documentId);
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.documentId !== this.props.documentId) {
      this.setState(getInitialState());
      this.checkoutDocument(nextProps.documentId);
    }
  }

  handleIncomingMutationEvent(event) {
    // Broadcast incoming patches to input components that applies patches on their own
    // Note: This is *experimental* and likely to change in the near future
    this.patchChannel.receivePatches({
      patches: event.patches,
      snapshot: event.document
    });
    this.setState({
      deletedSnapshot: event.deletedSnapshot,
      value: event.document
    });
  }

  render() {
    var _this$props = this.props,
        typeName = _this$props.typeName,
        documentId = _this$props.documentId,
        schema = _this$props.schema,
        Component = _this$props.children;
    var _this$state = this.state,
        isLoading = _this$state.isLoading,
        isSaving = _this$state.isSaving,
        value = _this$state.value,
        deletedSnapshot = _this$state.deletedSnapshot;
    return _react.default.createElement(_SanityFormBuilderContext.default, {
      value: value,
      schema: schema,
      patchChannel: this.patchChannel
    }, _react.default.createElement(Component, {
      value: value,
      isLoading: isLoading,
      isSaving: isSaving,
      deletedSnapshot: deletedSnapshot,
      documentId: documentId,
      type: schema.get(typeName),
      onChange: this.handleChange,
      onDelete: this.handleDelete,
      onCreate: this.handleCreate
    }));
  }

}

exports.default = WithFormBuilderValue;

_defineProperty(WithFormBuilderValue, "childContextTypes", {
  formBuilder: _propTypes.default.object
});