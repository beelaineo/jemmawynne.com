"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uploadImage = _interopRequireDefault(require("./uploadImage"));

var _uploadFile = _interopRequireDefault(require("./uploadFile"));

var _patches = require("../../utils/patches");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var UPLOAD_IMAGE = {
  type: 'image',
  accepts: 'image/*',
  upload: (file, type, options) => (0, _uploadImage.default)(file, options)
};
var UPLOAD_FILE = {
  type: 'file',
  accepts: '',
  upload: (file, type, options) => (0, _uploadFile.default)(file, options)
};
var UPLOAD_TEXT = {
  type: 'string',
  accepts: 'text/*',
  upload: (file, type, options) => (0, _uploadFile.default)(file, options).map(content => ({
    patches: [(0, _patches.set)(content)]
  })) // Todo: promote this to a "first-class" form-builder abstraction
  // and make it possible to register custom uploaders

};
var uploaders = [UPLOAD_IMAGE, UPLOAD_TEXT, UPLOAD_FILE].map((uploader, i) => _objectSpread({}, uploader, {
  priority: i
}));
var _default = uploaders;
exports.default = _default;