"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArrayOfPrimitives = isArrayOfPrimitives;
exports.hasOptionsList = hasOptionsList;
exports.default = resolveArrayInput;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _OptionsArrayInput = _interopRequireDefault(require("../../inputs/OptionsArrayInput"));

var _BlockEditor = _interopRequireDefault(require("../../inputs/BlockEditor"));

var _ArrayOfPrimitivesInput = _interopRequireDefault(require("../../inputs/ArrayOfPrimitivesInput"));

var _TagsArrayInput = _interopRequireDefault(require("../../inputs/TagsArrayInput"));

var is = _interopRequireWildcard(require("../../utils/is"));

var _SanityArrayInput = _interopRequireDefault(require("../inputs/SanityArrayInput"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PRIMITIVES = ['string', 'number', 'boolean'];

function isArrayOfPrimitives(type) {
  return type.of.every(ofType => PRIMITIVES.includes(ofType.jsonType));
}

function isTagsArray(type) {
  return (0, _get2.default)(type.options, 'layout') === 'tags' && type.of.length === 1 && is.type('string', type.of[0]);
}

function hasBlocks(type) {
  return type.of.some(memberType => is.type('block', memberType));
}

function hasOptionsList(type) {
  return (0, _get2.default)(type.options, 'list');
}

function resolveArrayInput(type) {
  // Schema provides predefines list
  if (hasOptionsList(type)) {
    return _OptionsArrayInput.default;
  }

  if (isTagsArray(type)) {
    return _TagsArrayInput.default;
  } // Special component for array of primitive values


  if (isArrayOfPrimitives(type)) {
    return _ArrayOfPrimitivesInput.default;
  } // Use block editor if its an array that includes blocks


  if (hasBlocks(type)) {
    return _BlockEditor.default;
  } // use default


  return _SanityArrayInput.default;
}