"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveInputComponent;

var _customInputs = _interopRequireDefault(require("./customInputs"));

var _defaultInputs = _interopRequireDefault(require("./defaultInputs"));

var is = _interopRequireWildcard(require("../../utils/is"));

var _resolveReferenceInput = _interopRequireDefault(require("./resolveReferenceInput"));

var _resolveArrayInput = _interopRequireDefault(require("./resolveArrayInput"));

var _resolveStringInput = _interopRequireDefault(require("./resolveStringInput"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getExport(obj) {
  return obj && obj.__esModule ? obj.default : obj;
} // this is needed to avoid errors due to circular imports
// this can happen if a custom input component imports and tries
// to access something from the form-builder immediately (top-level)


var getCustomResolver = () => {
  var resolver = getExport(require('part:@sanity/form-builder/input-resolver?'));

  getCustomResolver = () => resolver;

  return resolver;
};

function resolveTypeVariants(type) {
  if (is.type('array', type)) {
    return (0, _resolveArrayInput.default)(type);
  }

  if (is.type('reference', type)) {
    return (0, _resolveReferenceInput.default)(type);
  } // String input with a select


  if (is.type('string', type)) {
    return (0, _resolveStringInput.default)(type);
  }

  return null;
}

function resolveInputComponent(type) {
  var customResolver = getCustomResolver();
  var custom = customResolver && customResolver(type);

  if (custom) {
    return custom;
  }

  if (type.inputComponent) {
    return type.inputComponent;
  }

  return resolveTypeVariants(type) || _customInputs.default[type.name] || _defaultInputs.default[type.name];
}