"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _Details = _interopRequireDefault(require("../common/Details"));

var _InvalidValueInput = _interopRequireDefault(require("./InvalidValueInput.css"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _converters = _interopRequireDefault(require("./converters"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var setAutoHeight = el => {
  if (el) {
    el.style.height = "".concat(Math.min(300, el.scrollHeight), "px");
    el.style.padding = "".concat(4, "px");
    el.style.overflow = 'auto';
  }
};

function getConverters(value, actualType, validTypes) {
  if (!(actualType in _converters.default)) {
    return [];
  }

  return Object.keys(_converters.default[actualType]).filter(targetType => validTypes.includes(targetType)).map(targetType => _objectSpread({
    from: actualType,
    to: targetType
  }, _converters.default[actualType][targetType])).filter(converter => converter.test(value));
}

class InvalidValue extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClearClick", () => {
      this.props.onChange(_PatchEvent.default.from((0, _PatchEvent.unset)()));
    });

    _defineProperty(this, "handleConvertTo", converted => {
      this.props.onChange(_PatchEvent.default.from((0, _PatchEvent.set)(converted)));
    });

    _defineProperty(this, "setElement", element => {
      this.element = element;
    });
  }

  focus() {
    if (this.element) {
      this.element.focus();
    }
  }

  renderValidTypes() {
    var validTypes = this.props.validTypes;

    if (validTypes.length === 1) {
      return _react.default.createElement("div", null, "Only content of type ", _react.default.createElement("code", null, validTypes[0]), " are valid here according to schema");
    }

    return _react.default.createElement("div", null, "Only the following types are valid here according to schema:", ' ', validTypes.map(validType => _react.default.createElement("li", {
      key: validType
    }, _react.default.createElement("code", null, validType))));
  }

  render() {
    var _this$props = this.props,
        value = _this$props.value,
        actualType = _this$props.actualType,
        validTypes = _this$props.validTypes;
    var converters = getConverters(value, actualType, validTypes);
    return _react.default.createElement("div", {
      className: _InvalidValueInput.default.root,
      tabIndex: 0,
      ref: this.setElement
    }, _react.default.createElement("h3", null, "Content has invalid type: ", _react.default.createElement("code", null, actualType)), _react.default.createElement(_Details.default, null, "Encountered a value of type ", _react.default.createElement("code", null, actualType), ".", this.renderValidTypes(), _react.default.createElement("h4", null, "The current value is:"), _react.default.createElement("textarea", {
      ref: setAutoHeight,
      className: _InvalidValueInput.default.currentValueDump,
      onFocus: e => e.target.select(),
      readOnly: true,
      value: value && typeof value === 'object' ? JSON.stringify(value, null, 2) : value
    }), converters.map(converter => _react.default.createElement(_default.default, {
      key: "".concat(converter.from, "-").concat(converter.to),
      onClick: () => this.handleConvertTo(converter.convert(value)),
      color: "primary"
    }, "Convert value to ", converter.to))), _react.default.createElement("div", {
      className: _InvalidValueInput.default.removeButtonWrapper
    }, _react.default.createElement(_default.default, {
      onClick: this.handleClearClick,
      color: "danger"
    }, "Remove value")));
  }

}

exports.default = InvalidValue;

_defineProperty(InvalidValue, "propTypes", {
  actualType: _propTypes.default.string,
  validTypes: _propTypes.default.array,
  value: _propTypes.default.any,
  onChange: _propTypes.default.func
});