"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _moment = _interopRequireDefault(require("moment"));

var _reactDatepicker = _interopRequireDefault(require("react-datepicker"));

require("react-datepicker/dist/react-datepicker-cssmodules.css");

var _default = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/textinputs/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _calendarIcon = _interopRequireDefault(require("part:@sanity/base/calendar-icon"));

var _BaseDateTimeInput = _interopRequireDefault(require("./styles/BaseDateTimeInput.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getFormat = (dateFormat, timeFormat) => dateFormat + (timeFormat ? " ".concat(timeFormat) : '');

class BaseDateTimeInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_datepicker", void 0);

    _defineProperty(this, "state", {
      inputValue: null,
      isDialogOpen: false
    });

    _defineProperty(this, "handleInputChange", event => {
      var inputValue = event.currentTarget.value;
      var _this$props = this.props,
          onChange = _this$props.onChange,
          dateFormat = _this$props.dateFormat,
          timeFormat = _this$props.timeFormat;
      var parsed = (0, _moment.default)(inputValue, getFormat(dateFormat, timeFormat), true);

      if (parsed.isValid()) {
        this.setState({
          inputValue: null
        });
        onChange(parsed);
      } else {
        this.setState({
          inputValue: inputValue
        });
      }
    });

    _defineProperty(this, "handleDialogChange", nextMoment => {
      var onChange = this.props.onChange;
      onChange(nextMoment);
      this.setState({
        inputValue: null,
        isDialogOpen: false
      });
    });

    _defineProperty(this, "handleSetNow", event => {
      this.handleDialogChange((0, _moment.default)());
    });

    _defineProperty(this, "setDatePicker", datePicker => {
      this._datepicker = datePicker;
    });

    _defineProperty(this, "handleInputKeyDown", event => {
      if (event && event.key === 'Enter') {
        this.handleOpen();
      }

      return event;
    });

    _defineProperty(this, "handleButtonClick", event => {
      this.focus();
      this.handleOpen();
    });

    _defineProperty(this, "handleOpen", event => {
      this.setState({
        isDialogOpen: true
      });
    });

    _defineProperty(this, "handleClose", () => {
      this.setState({
        isDialogOpen: false
      });
    });

    _defineProperty(this, "handleBlur", event => {
      this.handleClose();
      this.setState({
        inputValue: null
      });

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    });

    _defineProperty(this, "handleFocus", event => {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    });

    _defineProperty(this, "renderPopperContainer", (_ref) => {
      var children = _ref.children;
      var isDialogOpen = this.state.isDialogOpen;
      return _reactDom.default.createPortal(_react.default.createElement("div", {
        className: isDialogOpen ? _BaseDateTimeInput.default.portal : _BaseDateTimeInput.default.portalClosed
      }, children), document.body);
    });
  }

  focus() {
    if (this._datepicker) {
      this._datepicker.input.focus();
    }
  }

  render() {
    var _this$props2 = this.props,
        value = _this$props2.value,
        markers = _this$props2.markers,
        dateOnly = _this$props2.dateOnly,
        dateFormat = _this$props2.dateFormat,
        timeFormat = _this$props2.timeFormat,
        title = _this$props2.title,
        description = _this$props2.description,
        todayLabel = _this$props2.todayLabel,
        readOnly = _this$props2.readOnly,
        timeStep = _this$props2.timeStep,
        level = _this$props2.level;
    var _this$state = this.state,
        inputValue = _this$state.inputValue,
        isDialogOpen = _this$state.isDialogOpen;
    var format = getFormat(dateFormat, timeFormat);
    var placeholder = this.props.placeholder || "e.g. ".concat((0, _moment.default)().format(format));
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    return _react.default.createElement(_default.default, {
      markers: markers,
      label: title,
      level: level,
      description: description
    }, readOnly && _react.default.createElement(_default2.default, {
      customValidity: errors.length > 0 ? errors[0].item.message : '',
      readOnly: true,
      value: value ? value.format(format) : ''
    }), !readOnly && _react.default.createElement("div", {
      className: errors.length > 0 ? _BaseDateTimeInput.default.rootError : _BaseDateTimeInput.default.root
    }, _react.default.createElement("div", {
      className: _BaseDateTimeInput.default.inputWrapper
    }, _react.default.createElement(_reactDatepicker.default, {
      onKeyDown: isDialogOpen ? undefined : this.handleInputKeyDown,
      autoFocus: false,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      showMonthDropdown: true,
      showYearDropdown: true,
      disabledKeyboardNavigation: !isDialogOpen,
      selected: value || undefined,
      placeholderText: placeholder,
      calendarClassName: _BaseDateTimeInput.default.datepicker,
      popperClassName: _BaseDateTimeInput.default.popper,
      popperContainer: this.renderPopperContainer,
      popperProps: {
        positionFixed: true
      },
      className: _BaseDateTimeInput.default.input,
      onClickOutside: this.handleClose,
      onChange: this.handleDialogChange,
      onChangeRaw: this.handleInputChange,
      value: inputValue ? inputValue : value && value.format(format),
      showTimeSelect: !dateOnly,
      dateFormat: dateFormat,
      timeFormat: timeFormat,
      timeIntervals: timeStep,
      ref: this.setDatePicker,
      dropdownMode: "select",
      todayButton: _react.default.createElement(_default3.default, {
        color: "primary",
        onClick: this.handleSetNow
      }, todayLabel)
    })), _react.default.createElement("div", {
      className: _BaseDateTimeInput.default.buttonWrapper
    }, _react.default.createElement(_default3.default, {
      color: "primary",
      bleed: true,
      onClick: this.handleButtonClick,
      icon: _calendarIcon.default,
      kind: "simple"
    }, "Select"))));
  }

}

exports.default = BaseDateTimeInput;