"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

require("react-datepicker/dist/react-datepicker-cssmodules.css");

var _react = _interopRequireDefault(require("react"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _BaseDateTimeInput = _interopRequireDefault(require("./BaseDateTimeInput"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_DATE_FORMAT = 'YYYY-MM-DD';
var DEFAULT_TIME_FORMAT = 'HH:mm';

function parseOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    dateFormat: options.dateFormat || DEFAULT_DATE_FORMAT,
    timeFormat: options.timeFormat || DEFAULT_TIME_FORMAT,
    timeStep: 'timeStep' in options && Number(options.timeStep) || 15,
    calendarTodayLabel: options.calendarTodayLabel || 'Now'
  };
}

class DateInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "baseDateTimeInputRef", null);

    _defineProperty(this, "handleChange", nextMoment => {
      var patch = nextMoment ? (0, _PatchEvent.set)(nextMoment.toDate().toJSON()) : (0, _PatchEvent.unset)();
      this.props.onChange(_PatchEvent.default.from([patch]));
    });

    _defineProperty(this, "setBaseInput", baseInput => {
      this.baseDateTimeInputRef = baseInput;
    });
  }

  focus() {
    if (this.baseDateTimeInputRef) {
      this.baseDateTimeInputRef.focus();
    }
  }

  render() {
    var _this$props = this.props,
        value = _this$props.value,
        markers = _this$props.markers,
        type = _this$props.type,
        readOnly = _this$props.readOnly,
        level = _this$props.level;
    var title = type.title,
        description = type.description;
    var momentValue = value ? (0, _moment.default)(value) : null;
    var options = parseOptions(type.options);
    return _react.default.createElement(_BaseDateTimeInput.default, {
      ref: this.setBaseInput,
      value: momentValue,
      readOnly: readOnly,
      level: level,
      title: title,
      description: description,
      placeholder: type.placeholder,
      markers: markers,
      dateFormat: options.dateFormat,
      timeFormat: options.timeFormat,
      timeStep: options.timeStep,
      todayLabel: options.calendarTodayLabel,
      onChange: this.handleChange
    });
  }

}

exports.default = DateInput;