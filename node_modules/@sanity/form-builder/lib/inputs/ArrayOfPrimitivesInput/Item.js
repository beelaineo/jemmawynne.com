"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _FormBuilderInput = require("../../FormBuilderInput");

var _Item = _interopRequireDefault(require("./styles/Item.css"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _trashIcon = _interopRequireDefault(require("part:@sanity/base/trash-icon"));

var _status = _interopRequireDefault(require("part:@sanity/components/validation/status"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _getEmptyValue = _interopRequireDefault(require("./getEmptyValue"));

var _sortable = require("part:@sanity/components/lists/sortable");

var _barsIcon = _interopRequireDefault(require("part:@sanity/base/bars-icon"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DragHandle = (0, _sortable.createDragHandle)(() => _react.default.createElement("span", {
  className: _Item.default.dragHandle
}, _react.default.createElement(_barsIcon.default, null)));

class Item extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleRemove", () => {
      var _this$props = this.props,
          index = _this$props.index,
          onRemove = _this$props.onRemove;
      onRemove(index);
    });

    _defineProperty(this, "handleKeyPress", event => {
      var _this$props2 = this.props,
          index = _this$props2.index,
          onEnterKey = _this$props2.onEnterKey;

      if (event.key === 'Enter') {
        onEnterKey(index);
      }
    });

    _defineProperty(this, "handleKeyUp", event => {
      var _this$props3 = this.props,
          index = _this$props3.index,
          onRemove = _this$props3.onRemove,
          onEscapeKey = _this$props3.onEscapeKey,
          value = _this$props3.value;

      if (event.shiftKey && event.key === 'Backspace' && value === '') {
        onRemove(index);
      }

      if (event.key === 'Escape') {
        onEscapeKey(index);
      }
    });

    _defineProperty(this, "handleChange", patchEvent => {
      var _this$props4 = this.props,
          onChange = _this$props4.onChange,
          type = _this$props4.type,
          index = _this$props4.index;
      onChange(_PatchEvent.default.from(patchEvent.patches.map(patch => // Map direct unset patches to empty value instead in order to not *remove* elements as the user clears out the value
      patch.path.length === 0 && patch.type === 'unset' ? (0, _PatchEvent.set)((0, _getEmptyValue.default)(type)) : patch)).prefixAll(index));
    });
  }

  render() {
    var _this$props5 = this.props,
        value = _this$props5.value,
        level = _this$props5.level,
        markers = _this$props5.markers,
        index = _this$props5.index,
        focusPath = _this$props5.focusPath,
        onFocus = _this$props5.onFocus,
        onBlur = _this$props5.onBlur,
        type = _this$props5.type,
        readOnly = _this$props5.readOnly,
        isSortable = _this$props5.isSortable;
    return _react.default.createElement("div", {
      className: _Item.default.root
    }, isSortable && !readOnly && _react.default.createElement(DragHandle, {
      className: _Item.default.dragHandle
    }), _react.default.createElement("div", {
      className: _Item.default.input
    }, _react.default.createElement(_FormBuilderInput.FormBuilderInput, {
      value: value,
      path: [index],
      markers: markers,
      focusPath: focusPath,
      onFocus: onFocus,
      onBlur: onBlur,
      type: type,
      readOnly: readOnly || type.readOnly,
      onKeyUp: this.handleKeyUp,
      onKeyPress: this.handleKeyPress,
      onChange: this.handleChange,
      level: level
    })), _react.default.createElement("div", {
      className: _Item.default.functions
    }, _react.default.createElement("div", {
      className: _Item.default.validationStatus
    }, _react.default.createElement(_status.default, {
      markers: markers
    })), !readOnly && _react.default.createElement("div", null, _react.default.createElement(_default.default, {
      kind: "simple",
      className: _Item.default.deleteButton,
      icon: _trashIcon.default,
      title: "Delete",
      onClick: this.handleRemove
    }))));
  }

}

exports.default = Item;