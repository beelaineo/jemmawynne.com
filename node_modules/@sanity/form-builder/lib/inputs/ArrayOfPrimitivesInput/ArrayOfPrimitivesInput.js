"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _default = require("part:@sanity/components/lists/default");

var _sortable = require("part:@sanity/components/lists/sortable");

var _functions = _interopRequireDefault(require("part:@sanity/form-builder/input/array/functions"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _PatchEvent = require("../../PatchEvent");

var _paths = require("@sanity/util/paths");

var _resolveTypeName = require("../../utils/resolveTypeName");

var _InvalidValueInput = _interopRequireDefault(require("../InvalidValueInput"));

var _ArrayOfPrimitivesInput = _interopRequireDefault(require("./styles/ArrayOfPrimitivesInput.css"));

var _getEmptyValue = _interopRequireDefault(require("./getEmptyValue"));

var _Item = _interopRequireDefault(require("./Item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function move(arr, from, to) {
  var copy = arr.slice();
  var val = copy[from];
  copy.splice(from, 1);
  copy.splice(to, 0, val);
  return copy;
}

function insertAt(arr, index, item) {
  var copy = arr.slice();
  copy.splice(index + 1, 0, item);
  return copy;
}

class ArrayOfPrimitivesInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_element", void 0);

    _defineProperty(this, "_lastAddedIndex", -1);

    _defineProperty(this, "handleAppend", itemValue => {
      var _this$props = this.props,
          _this$props$value = _this$props.value,
          value = _this$props$value === void 0 ? [] : _this$props$value,
          onFocus = _this$props.onFocus;
      this.set(value.concat(itemValue));
      onFocus([value.length]);
    });

    _defineProperty(this, "handlePrepend", itemValue => {
      var _this$props2 = this.props,
          _this$props2$value = _this$props2.value,
          value = _this$props2$value === void 0 ? [] : _this$props2$value,
          onFocus = _this$props2.onFocus;
      this.set([itemValue].concat(value));
      onFocus([value.length]);
    });

    _defineProperty(this, "handleRemoveItem", index => {
      this.removeAt(index);
    });

    _defineProperty(this, "handleItemChange", event => {
      this._lastAddedIndex = -1;
      this.props.onChange(event);
    });

    _defineProperty(this, "handleItemEnterKey", index => {
      this.insertAt(index, this.props.type.of[0]);
      this._lastAddedIndex = index + 1;
    });

    _defineProperty(this, "handleItemEscapeKey", index => {
      var value = this.props.value;

      if (index === this._lastAddedIndex && value[index] === '') {
        this.removeAt(index);
      }
    });

    _defineProperty(this, "handleSortEnd", event => {
      var value = this.props.value;
      var oldIndex = event.oldIndex,
          newIndex = event.newIndex;
      this.set(move(value, oldIndex, newIndex));
    });

    _defineProperty(this, "renderItem", (item, index) => {
      var _this$props3 = this.props,
          type = _this$props3.type,
          level = _this$props3.level,
          markers = _this$props3.markers,
          value = _this$props3.value,
          focusPath = _this$props3.focusPath,
          _onChange = _this$props3.onChange,
          onFocus = _this$props3.onFocus,
          readOnly = _this$props3.readOnly,
          onBlur = _this$props3.onBlur;
      var typeName = (0, _resolveTypeName.resolveTypeName)(item);
      var itemMemberType = this.getMemberType(typeName);

      if (!itemMemberType) {
        return _react.default.createElement(_InvalidValueInput.default, {
          key: index,
          actualType: typeName,
          validTypes: type.of.map(memberType => memberType.name),
          onChange: ev => _onChange(ev.prefixAll(index)),
          value: value
        });
      }

      var isSortable = (0, _get2.default)(type, 'options.sortable') !== false;
      var ListItem = isSortable ? _sortable.Item : _default.Item;
      var filteredMarkers = markers.filter(marker => (0, _paths.startsWith)([index], marker.path));
      return _react.default.createElement(ListItem, {
        key: index,
        index: index,
        className: _ArrayOfPrimitivesInput.default.item
      }, _react.default.createElement(_Item.default, {
        level: level + 1,
        index: index,
        value: item,
        readOnly: readOnly,
        markers: filteredMarkers,
        isSortable: isSortable,
        type: itemMemberType,
        focusPath: focusPath,
        onFocus: onFocus,
        onBlur: onBlur,
        onEnterKey: this.handleItemEnterKey,
        onEscapeKey: this.handleItemEscapeKey,
        onChange: this.handleItemChange,
        onRemove: this.handleRemoveItem
      }));
    });

    _defineProperty(this, "setElement", el => {
      this._element = el;
    });

    _defineProperty(this, "handleFocusItem", index => {
      this.props.onFocus([index]);
    });
  }

  set(nextValue) {
    this._lastAddedIndex = -1;
    var patch = nextValue.length === 0 ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(nextValue);
    this.props.onChange(_PatchEvent.PatchEvent.from(patch));
  }

  removeAt(index) {
    var _this$props$value2 = this.props.value,
        value = _this$props$value2 === void 0 ? [] : _this$props$value2;
    this.set(value.filter((_, i) => i !== index));
    this.props.onFocus([Math.max(0, index - 1)]);
  }

  insertAt(index, type) {
    var _this$props4 = this.props,
        _this$props4$value = _this$props4.value,
        value = _this$props4$value === void 0 ? [] : _this$props4$value,
        onFocus = _this$props4.onFocus;
    this.set(insertAt(value, index, (0, _getEmptyValue.default)(type)));
    onFocus([index + 1]);
  }

  getMemberType(typeName) {
    var type = this.props.type;
    return type.of.find(memberType => memberType.name === typeName || memberType.jsonType === typeName);
  }

  renderList(value) {
    var type = this.props.type;
    var isSortable = (0, _get2.default)(type, 'options.sortable') !== false;
    return isSortable ? _react.default.createElement(_sortable.List, {
      className: _ArrayOfPrimitivesInput.default.list,
      onSortEnd: this.handleSortEnd,
      movingItemClass: _ArrayOfPrimitivesInput.default.movingItem,
      useDragHandle: true
    }, value.map(this.renderItem)) : _react.default.createElement(_default.List, {
      decoration: "divider"
    }, value.map(this.renderItem));
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  render() {
    var _this$props5 = this.props,
        type = _this$props5.type,
        value = _this$props5.value,
        level = _this$props5.level,
        markers = _this$props5.markers,
        readOnly = _this$props5.readOnly,
        onChange = _this$props5.onChange,
        onFocus = _this$props5.onFocus;
    return _react.default.createElement(_default2.default, {
      legend: type.title,
      description: type.description,
      level: level,
      tabIndex: 0,
      onFocus: onFocus,
      ref: this.setElement,
      markers: markers
    }, _react.default.createElement("div", {
      className: _ArrayOfPrimitivesInput.default.root
    }, value && value.length > 0 && _react.default.createElement("div", {
      className: _ArrayOfPrimitivesInput.default.list
    }, this.renderList(value)), _react.default.createElement("div", {
      className: _ArrayOfPrimitivesInput.default.functions
    }, _react.default.createElement(_functions.default, {
      type: type,
      value: value,
      readOnly: readOnly,
      onAppendItem: this.handleAppend,
      onPrependItem: this.handlePrepend,
      onFocusItem: this.handleFocusItem,
      onCreateValue: _getEmptyValue.default,
      onChange: onChange
    }))));
  }

}

exports.default = ArrayOfPrimitivesInput;