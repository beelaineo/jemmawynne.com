"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _textfield = _interopRequireDefault(require("part:@sanity/components/tags/textfield"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TagsArrayInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_input", void 0);

    _defineProperty(this, "handleChange", nextValue => {
      this.set(nextValue);
    });

    _defineProperty(this, "setInput", el => {
      this._input = el;
    });
  }

  set(nextValue) {
    var patch = nextValue.length === 0 ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(nextValue);
    this.props.onChange(_PatchEvent.default.from(patch));
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  render() {
    var _this$props = this.props,
        type = _this$props.type,
        value = _this$props.value,
        readOnly = _this$props.readOnly,
        level = _this$props.level,
        onFocus = _this$props.onFocus;
    return _react.default.createElement(_default.default, {
      level: level,
      label: type.title,
      description: type.description
    }, _react.default.createElement(_textfield.default, {
      readOnly: readOnly,
      value: value,
      onChange: this.handleChange,
      onFocus: onFocus,
      ref: this.setInput
    }));
  }

}

exports.default = TagsArrayInput;