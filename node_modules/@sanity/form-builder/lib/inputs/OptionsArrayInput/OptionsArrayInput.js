"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _default = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _Item = _interopRequireDefault(require("./Item"));

var _OptionsArrayInput = _interopRequireDefault(require("./styles/OptionsArrayInput.css"));

var _resolveTypeName = require("../../utils/resolveTypeName");

var _legacyOptionsSupport = require("./legacyOptionsSupport");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isEqual(item, otherItem) {
  if ((0, _legacyOptionsSupport.isLegacyOptionsItem)(item) || (0, _legacyOptionsSupport.isLegacyOptionsItem)(otherItem)) {
    return item.value === otherItem.value;
  }

  if (item === otherItem) {
    return true;
  }

  if (typeof item !== typeof otherItem) {
    return false;
  }

  if (typeof item !== 'object' && !Array.isArray(item)) {
    return item === otherItem;
  }

  if (item._key && item._key === otherItem._key) {
    return true;
  }

  if (Array.isArray(item)) {
    if (!item.length !== otherItem.length) {
      return false;
    }

    return item.every((it, i) => isEqual(item[i], otherItem[i]));
  }

  var keys = Object.keys(item);
  var otherKeys = Object.keys(item);

  if (keys.length !== otherKeys.length) {
    return false;
  }

  return keys.every(keyName => isEqual(item[keyName], otherItem[keyName]));
}

function inArray(array, candidate) {
  return array ? array.some(item => isEqual(item, candidate)) : false;
}

class OptionsArrayInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleChange", (isChecked, optionValue) => {
      var _this$props = this.props,
          type = _this$props.type,
          _this$props$value = _this$props.value,
          value = _this$props$value === void 0 ? [] : _this$props$value;
      var list = (0, _get2.default)(type.options, 'list');

      if (!isChecked && optionValue._key) {
        // This is an optimization that only works if list items are _keyed
        this.props.onChange(_PatchEvent.default.from((0, _PatchEvent.unset)([{
          _key: optionValue._key
        }])));
      }

      var nextValue = list.filter(item => isEqual(optionValue, item) ? isChecked : inArray(value, (0, _legacyOptionsSupport.resolveValueWithLegacyOptionsSupport)(item))).map(_legacyOptionsSupport.resolveValueWithLegacyOptionsSupport);
      this.props.onChange(_PatchEvent.default.from(nextValue.length > 0 ? (0, _PatchEvent.set)(nextValue) : (0, _PatchEvent.unset)()));
    });
  }

  getMemberTypeOfItem(option) {
    var type = this.props.type;
    return type.of.find(memberType => memberType.name === (0, _resolveTypeName.resolveTypeName)((0, _legacyOptionsSupport.resolveValueWithLegacyOptionsSupport)(option)));
  }

  render() {
    var _this$props2 = this.props,
        type = _this$props2.type,
        markers = _this$props2.markers,
        value = _this$props2.value,
        level = _this$props2.level,
        readOnly = _this$props2.readOnly;
    var options = (0, _get2.default)(type.options, 'list');
    var direction = (0, _get2.default)(type.options, 'direction'); // vertical and horizontal

    return _react.default.createElement(_default.default, {
      legend: type.title,
      description: type.description,
      markers: markers,
      level: level
    }, options.map((option, index) => {
      var optionType = this.getMemberTypeOfItem(option);

      if (!optionType) {
        var actualType = (0, _resolveTypeName.resolveTypeName)((0, _legacyOptionsSupport.resolveValueWithLegacyOptionsSupport)(option));
        var validTypes = type.of.map(ofType => ofType.name);
        return _react.default.createElement("div", {
          key: option._key || index,
          className: _OptionsArrayInput.default.error
        }, "Invalid option type: Type ", _react.default.createElement("code", null, actualType), " not valid for array of [", validTypes.join(', '), "]. Check the list options of this field");
      }

      var checked = inArray(value, (0, _legacyOptionsSupport.resolveValueWithLegacyOptionsSupport)(option));
      return _react.default.createElement("div", {
        key: option._key || index,
        className: direction === 'vertical' ? _OptionsArrayInput.default.itemWrapperVertical : _OptionsArrayInput.default.itemWrapperHorizontal
      }, _react.default.createElement(_Item.default, {
        layout: "inline",
        type: optionType,
        readOnly: readOnly,
        value: option,
        checked: checked,
        onChange: this.handleChange
      }));
    }));
  }

}

exports.default = OptionsArrayInput;

_defineProperty(OptionsArrayInput, "propTypes", {
  type: _propTypes.default.shape({
    options: _propTypes.default.shape({
      list: _propTypes.default.array,
      direction: _propTypes.default.string
    }),
    name: _propTypes.default.string,
    description: _propTypes.default.string,
    of: _propTypes.default.array
  }),
  markers: _propTypes.default.array,
  value: _propTypes.default.array,
  level: _propTypes.default.number,
  readOnly: _propTypes.default.bool,
  onChange: _propTypes.default.func
});