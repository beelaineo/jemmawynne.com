"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractPastedFiles = extractPastedFiles;
exports.extractDroppedFiles = extractDroppedFiles;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function extractPastedFiles(dataTransfer) {
  if (dataTransfer.files && dataTransfer.files.length > 0) {
    return Promise.resolve(Array.from(dataTransfer.files || []));
  }

  return normalizeItems(Array.from(dataTransfer.items || [])).then(_flatten2.default);
}

function extractDroppedFiles(dataTransfer) {
  var files = Array.from(dataTransfer.files || []);
  var items = Array.from(dataTransfer.items || []);

  if (files && files.length > 0) {
    return Promise.resolve(files);
  }

  return normalizeItems(items).then(_flatten2.default);
}

function normalizeItems(items) {
  return Promise.all(items.map(item => {
    // directory
    if (item.kind === 'file' && item.webkitGetAsEntry) {
      var entry; // Edge throws

      try {
        entry = item.webkitGetAsEntry();
      } catch (err) {
        return [item.getAsFile()];
      }

      if (!entry) {
        return [];
      }

      return entry.isDirectory ? walk(entry) : [item.getAsFile()];
    } // file


    if (item.kind === 'file') {
      var file = item.getAsFile();
      return Promise.resolve(file ? [file] : []);
    } // others


    return new Promise(resolve => item.getAsString(resolve)).then(str => str ? [new File([str], 'unknown.txt', {
      type: item.type
    })] : []);
  }));
}

function walk(entry) {
  if (entry.isFile) {
    return new Promise(resolve => entry.file(resolve)).then(file => [file]);
  }

  if (entry.isDirectory) {
    var dir = entry.createReader();
    return new Promise(resolve => dir.readEntries(resolve)).then(entries => entries.filter(entr => !entr.name.startsWith('.'))).then(entries => Promise.all(entries.map(walk)).then(_flatten2.default));
  }

  return Promise.resolve([]);
}