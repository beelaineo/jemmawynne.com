"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UndoRedoPlugin;

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _slateHotkeys = _interopRequireDefault(require("slate-hotkeys"));

var _immutable = require("immutable");

var _isWritingTextOperation = _interopRequireDefault(require("../utils/isWritingTextOperation"));

var _slate = require("slate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SEND_PATCHES_TOKEN_CHARS = [' ', '\n'];

function isTokenChar(operation) {
  var text = operation.text;
  return text && SEND_PATCHES_TOKEN_CHARS.includes(text);
}

function shouldSquashOperations(operations) {
  var operationsPaths = (0, _uniq2.default)(operations.map(op => op.path ? JSON.stringify(op.path.toJSON()) : null).toArray().filter(Boolean));

  if (operationsPaths.length !== 1) {
    return false;
  }

  return (0, _isWritingTextOperation.default)(operations) && !isTokenChar(operations.last());
}

function recalculateOperations(item) {
  var recalculatedOperations = []; // Run through all the remote operations and check for remove_node, insert_node, move_node

  item.operations.forEach(itemOp => {
    var checkedOp = itemOp;
    var pIndex = 0; // console.log('Checking', checkedOp.toJSON())

    item.remoteOperations.forEach(remoteOp => {
      if (!checkedOp || !checkedOp.path) {
        return;
      }

      var pAbove = remoteOp.path.get(0) < checkedOp.path.get(0);
      var pEqual = remoteOp.path.get(0) == checkedOp.path.get(0);

      switch (remoteOp.type) {
        case 'insert_node':
          // if the insert node is above this operations path, we need to increment the path
          if (pAbove || pEqual) {
            var newPath = _slate.PathUtils.increment(checkedOp.path, 1, pIndex);

            checkedOp = _slate.Operation.create(_objectSpread({}, checkedOp.toJS(), {
              path: newPath
            }));
          }

          break;

        case 'remove_node':
          // if the remove node is above this operations path, we need to decrement the path
          if (pAbove) {
            var _newPath = _slate.PathUtils.decrement(checkedOp.path, 1, pIndex);

            checkedOp = _slate.Operation.create(_objectSpread({}, checkedOp.toJS(), {
              path: _newPath
            }));
          } // if the remove node is the same, remove the operation


          if (pEqual) {
            checkedOp = null;
          }

          break;

        default: // Nothing

      }
    });

    if (checkedOp) {
      recalculatedOperations.push(checkedOp);
    }
  });
  return (0, _immutable.List)(recalculatedOperations);
}

function moveCursorUndo(editor, item) {
  if (item.beforeSelection) {
    editor.select(item.beforeSelection).focus();
    return editor;
  }

  var lastOperationWithPath = editor.operations.findLastEntry(op => op.path !== undefined);

  if (lastOperationWithPath) {
    var path = lastOperationWithPath[1].path;

    if (path.size === 1) {
      editor.moveToEndOfBlock();
    } else {
      editor.moveTo(lastOperationWithPath[1].path).moveToEndOfText();
    }
  }

  return editor;
}

function moveCursorRedo(editor, item) {
  if (item.afterSelection) {
    editor.select(item.afterSelection).focus();
    return editor;
  }

  var lastOperationWithPath = editor.operations.findLastEntry(op => op.path !== undefined);

  if (lastOperationWithPath) {
    var path = lastOperationWithPath[1].path;

    if (path.size === 1) {
      editor.moveToEndOfBlock();
    } else {
      editor.moveTo(lastOperationWithPath[1].path).moveToEndOfText();
    }
  }

  return editor;
} // This plugin handles our own undo redo (disables Slate built in handling)


function UndoRedoPlugin(options) {
  var stack = options.stack;

  function handleUndoItem(editor, item, _operations) {
    if (!item) {
      return editor.focus();
    }

    var operations = (0, _immutable.List)(_operations || []);
    var undoOperations = item.remoteOperations.size === 0 ? item.operations : recalculateOperations(item);
    operations = operations.concat(undoOperations.reverse().map(op => op.invert()));

    if (operations.size > 0) {
      var nextItem = stack.undo.slice(-1)[0]; // Check if we should squash this undo step into the next

      if (nextItem && shouldSquashOperations(operations.concat(nextItem.operations))) {
        stack.redo.push(item);
        return handleUndoItem(editor, stack.undo.pop(), operations);
      }

      operations.forEach(op => {
        op.__isUndoRedo = 'undo';
        editor.applyOperation(op);
      });
      moveCursorUndo(editor, item);
      stack.redo.push(item);
      return editor;
    } // If the undo step was invalidated do next step


    return handleUndoItem(editor, stack.undo.pop());
  }

  function handleRedoItem(editor, item, _operations) {
    if (!item) {
      return editor.focus();
    }

    var operations = (0, _immutable.List)(_operations || []);
    var redoOperations = item.remoteOperations.size === 0 ? item.operations : recalculateOperations(item);
    operations = operations.concat(redoOperations);

    if (operations.size > 0) {
      var nextItem = stack.redo.slice(-1)[0]; // Check if we should squash this redo step into the next

      if (nextItem && shouldSquashOperations(operations.concat(nextItem.operations))) {
        stack.undo.push(item);
        return handleRedoItem(editor, stack.redo.pop(), operations);
      }

      operations.forEach(op => {
        op.__isUndoRedo = 'redo';
        editor.applyOperation(op);
      });
      moveCursorRedo(editor, item);
      stack.undo.push(item);
      return editor;
    } // If the redo step was invalidated do next step


    return handleRedoItem(editor, stack.redo.pop());
  }

  return {
    onKeyDown(event, editor, next) {
      if (!(_slateHotkeys.default.isUndo(event) || _slateHotkeys.default.isRedo(event))) {
        return next();
      }

      if (_slateHotkeys.default.isUndo(event)) {
        return handleUndoItem(editor, stack.undo.pop());
      }

      if (_slateHotkeys.default.isRedo(event)) {
        return handleRedoItem(editor, stack.redo.pop());
      }

      return editor;
    }

  };
}