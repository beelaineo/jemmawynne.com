"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InsertInlineObjectPlugin;

var _slate = require("slate");

var _blockTools = require("@sanity/block-tools");

var _createOperationToPatches = require("../utils/createOperationToPatches");

function InsertInlineObjectPlugin(blockContentType) {
  function normalizeBlock(block) {
    return (0, _blockTools.blocksToEditorValue)((0, _blockTools.editorValueToBlocks)({
      document: {
        nodes: [block.toJSON(_createOperationToPatches.VALUE_TO_JSON_OPTS)]
      }
    }, blockContentType), blockContentType).document.nodes[0];
  }

  return {
    onCommand(command, editor, next) {
      if (command.type !== 'insertInlineObject') {
        return next();
      }

      var options = command.args[0] || {};
      var objectType = options.objectType;
      var key = options.key || (0, _blockTools.randomKey)(12);
      var inlineProps = {
        key,
        type: objectType.name,
        isVoid: true,
        data: {
          _key: key,
          value: {
            _type: objectType.name,
            _key: key
          }
        }
      };

      var inline = _slate.Inline.create(inlineProps);

      editor.insertInline(inline); // Normalize the keys in the block nodes to match what is sent to gradient

      var inlinePath = editor.value.selection.focus.path;
      var block = editor.value.focusBlock;
      editor.replaceNodeByKey(block.key, normalizeBlock(block));
      editor.moveTo(inlinePath, 0);
      return editor;
    }

  };
}