"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactClickOutside = _interopRequireDefault(require("react-click-outside"));

var _reactContainerQuery = require("react-container-query");

var _reactTippy = require("react-tippy");

var _angleDownIcon = _interopRequireDefault(require("part:@sanity/base/angle-down-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _chevronDownIcon = _interopRequireDefault(require("part:@sanity/base/chevron-down-icon"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _fullscreenIcon = _interopRequireDefault(require("part:@sanity/base/fullscreen-icon"));

var _list = _interopRequireDefault(require("part:@sanity/components/validation/list"));

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _isMac = _interopRequireDefault(require("../utils/isMac"));

var _AnnotationButtons = _interopRequireDefault(require("./AnnotationButtons"));

var _BlockStyleSelect = _interopRequireDefault(require("./BlockStyleSelect"));

var _DecoratorButtons = _interopRequireDefault(require("./DecoratorButtons"));

var _InsertMenu = _interopRequireDefault(require("./InsertMenu"));

var _ListItemButtons = _interopRequireDefault(require("./ListItemButtons"));

var _Toolbar = _interopRequireDefault(require("./styles/Toolbar.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var query = {
  [_Toolbar.default.largeContainer]: {
    minWidth: 600
  }
};

class Toolbar extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      expanded: false,
      showValidationTooltip: false
    });

    _defineProperty(this, "handleExpand", () => {
      this.setState({
        expanded: true
      });
    });

    _defineProperty(this, "handleContract", () => {
      this.setState({
        expanded: false
      });
    });

    _defineProperty(this, "handleClickOutside", () => {
      this.setState({
        expanded: false
      });
    });

    _defineProperty(this, "handleFocus", focusPath => {
      var onFocus = this.props.onFocus;
      onFocus(focusPath);
    });

    _defineProperty(this, "handleCloseValidationResults", () => {
      this.setState({
        showValidationTooltip: false
      });
    });

    _defineProperty(this, "handleToggleValidationResults", () => {
      this.setState(prevState => ({
        showValidationTooltip: !prevState.showValidationTooltip
      }));
    });
  }

  render() {
    var _this$props = this.props,
        blockContentFeatures = _this$props.blockContentFeatures,
        editor = _this$props.editor,
        editorValue = _this$props.editorValue,
        fullscreen = _this$props.fullscreen,
        markers = _this$props.markers,
        onFocus = _this$props.onFocus,
        onToggleFullScreen = _this$props.onToggleFullScreen,
        style = _this$props.style,
        type = _this$props.type,
        userIsWritingText = _this$props.userIsWritingText;

    if (!editor) {
      return null;
    }

    var _this$state = this.state,
        expanded = _this$state.expanded,
        showValidationTooltip = _this$state.showValidationTooltip;
    var insertItems = blockContentFeatures.types.inlineObjects.concat(blockContentFeatures.types.blockObjects);
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    var warnings = validation.filter(marker => marker.level === 'warning');
    var hasMore = blockContentFeatures.decorators.length > 0 || blockContentFeatures.annotations.length > 0 || blockContentFeatures.types.blockObjects.length > 0 || blockContentFeatures.types.inlineObjects.length > 0;
    return _react.default.createElement(_reactContainerQuery.ContainerQuery, {
      query: query
    }, params => _react.default.createElement("div", {
      className: "\n              ".concat(_Toolbar.default.root, "\n              ").concat((0, _classnames.default)(params), "\n              ").concat(fullscreen ? " ".concat(_Toolbar.default.fullscreen) : '', "\n            "),
      style: style
    }, _react.default.createElement("div", {
      className: _Toolbar.default.primary
    }, _react.default.createElement("div", {
      className: _Toolbar.default.blockFormatContainer,
      onClick: this.handleContract
    }, _react.default.createElement(_BlockStyleSelect.default, {
      blockContentFeatures: blockContentFeatures,
      editor: editor,
      editorValue: editorValue
    })), hasMore && _react.default.createElement(_default2.default, {
      className: _Toolbar.default.expandButton,
      onClick: this.handleExpand,
      kind: "simple"
    }, "More\xA0", _react.default.createElement("span", {
      className: _Toolbar.default.arrow
    }, _react.default.createElement(_angleDownIcon.default, {
      color: "inherit"
    }))), _react.default.createElement("div", {
      className: "".concat(_Toolbar.default.compactable, " ").concat(expanded ? _Toolbar.default.expanded : '')
    }, blockContentFeatures.decorators.length > 0 && _react.default.createElement("div", {
      className: _Toolbar.default.decoratorButtonsContainer
    }, _react.default.createElement(_DecoratorButtons.default, {
      blockContentFeatures: blockContentFeatures,
      editor: editor,
      editorValue: editorValue
    })), blockContentFeatures.lists.length > 0 && _react.default.createElement("div", {
      className: _Toolbar.default.decoratorButtonsContainer
    }, _react.default.createElement(_ListItemButtons.default, {
      blockContentFeatures: blockContentFeatures,
      editor: editor,
      editorValue: editorValue
    })), blockContentFeatures.annotations.length > 0 && _react.default.createElement("div", {
      className: _Toolbar.default.annotationButtonsContainer
    }, _react.default.createElement(_AnnotationButtons.default, {
      blockContentFeatures: blockContentFeatures,
      editor: editor,
      editorValue: editorValue,
      onFocus: onFocus,
      userIsWritingText: userIsWritingText
    })), insertItems.length > 0 && _react.default.createElement("div", {
      className: _Toolbar.default.insertContainer
    }, _react.default.createElement(_InsertMenu.default, {
      blockTypes: blockContentFeatures.types.blockObjects,
      editor: editor,
      editorValue: editorValue,
      inlineTypes: blockContentFeatures.types.inlineObjects,
      onFocus: onFocus,
      type: type
    })))), _react.default.createElement("div", {
      className: _Toolbar.default.secondary
    }, fullscreen && (errors.length > 0 || warnings.length > 0) && _react.default.createElement(_reactTippy.Tooltip, {
      arrow: true,
      duration: 100,
      html: _react.default.createElement(_list.default, {
        markers: validation,
        showLink: true,
        isOpen: showValidationTooltip,
        documentType: type,
        onClose: this.handleCloseValidationResults,
        onFocus: this.handleFocus
      }),
      interactive: true,
      onRequestClose: this.handleCloseValidationResults,
      open: showValidationTooltip,
      position: "bottom",
      style: {
        padding: 0
      },
      theme: "light noPadding",
      trigger: "click"
    }, _react.default.createElement(_default2.default, {
      color: "danger",
      icon: _warningIcon.default,
      kind: "simple",
      onClick: this.handleToggleValidationResults,
      padding: "small"
    }, errors.length, _react.default.createElement("span", {
      style: {
        paddingLeft: '0.5em'
      }
    }, _react.default.createElement(_chevronDownIcon.default, null)))), _react.default.createElement("div", {
      className: _Toolbar.default.fullscreenButtonContainer,
      onClick: this.handleContract
    }, _react.default.createElement(_default2.default, {
      kind: "simple",
      onClick: onToggleFullScreen,
      title: "Open in fullscreen (".concat(_isMac.default ? 'cmd' : 'ctrl', "+enter)"),
      icon: fullscreen ? _closeIcon.default : _fullscreenIcon.default
    })))));
  }

}

var _default = (0, _reactClickOutside.default)(Toolbar);

exports.default = _default;