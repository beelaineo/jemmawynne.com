"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _slate = require("slate");

var _blockTools = require("@sanity/block-tools");

var _linkIcon = _interopRequireDefault(require("part:@sanity/base/link-icon"));

var _sanityLogoIcon = _interopRequireDefault(require("part:@sanity/base/sanity-logo-icon"));

var _button = _interopRequireDefault(require("part:@sanity/components/toggles/button"));

var _paths = require("@sanity/util/paths");

var _CustomIcon = _interopRequireDefault(require("./CustomIcon"));

var _ToolbarClickAction = _interopRequireDefault(require("./ToolbarClickAction"));

var _AnnotationButtons = _interopRequireDefault(require("./styles/AnnotationButtons.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getIcon(type) {
  switch (type) {
    case 'link':
      return _linkIcon.default;

    default:
      return _sanityLogoIcon.default;
  }
}

var NOOP = () => {};

class AnnotationButtons extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", (item, originalSelection) => {
      var _this$props = this.props,
          editor = _this$props.editor,
          onFocus = _this$props.onFocus;

      if (item.disabled) {
        return;
      }

      var key = (0, _blockTools.randomKey)(12);
      editor.command('toggleAnnotation', {
        annotationName: item.value,
        key
      });

      if (editor.value.startInline) {
        // Make the block editor focus the annotation input if we added an annotation
        editor.blur();
        var focusPath = [{
          _key: editor.value.focusBlock.key
        }, 'markDefs', {
          _key: key
        }, _paths.FOCUS_TERMINATOR];
        setTimeout(() => {
          onFocus(focusPath);
        }, 200);
        return;
      }

      editor.command('focusNoScroll');
    });

    _defineProperty(this, "renderAnnotationButton", item => {
      var editor = this.props.editor;
      var Icon;
      var icon = item.blockEditor ? item.blockEditor.icon : null;

      if (icon) {
        if (typeof icon === 'string') {
          Icon = () => _react.default.createElement(_CustomIcon.default, {
            icon: icon,
            active: !!item.active
          });
        } else if (typeof icon === 'function') {
          Icon = icon;
        }
      }

      Icon = Icon || getIcon(item.value); // We must not do a click-event here, because that messes with the editor focus!

      var onAction = originalSelection => {
        this.handleClick(item, originalSelection);
      };

      return _react.default.createElement(_ToolbarClickAction.default, {
        onAction: onAction,
        editor: editor,
        key: "annotationButton".concat(item.value)
      }, _react.default.createElement(_button.default, {
        selected: !!item.active,
        disabled: item.disabled,
        onClick: NOOP,
        title: item.title,
        className: _AnnotationButtons.default.button,
        icon: Icon
      }));
    });
  }

  shouldComponentUpdate(nextProps) {
    var editor = this.props.editor;

    if (nextProps.userIsWritingText) {
      return false;
    }

    if (nextProps.userIsWritingText !== this.props.userIsWritingText || nextProps.editorValue.inlines.size !== this.props.editorValue.inlines.size || editor.query('hasSelectionWithText', this.props.editorValue) === false || editor.query('hasSelectionWithText', nextProps.editorValue) === false) {
      return true;
    }

    return false;
  }

  getItems() {
    var _this$props2 = this.props,
        editor = _this$props2.editor,
        blockContentFeatures = _this$props2.blockContentFeatures,
        editorValue = _this$props2.editorValue,
        userIsWritingText = _this$props2.userIsWritingText;
    var inlines = editorValue.inlines;
    var disabled = userIsWritingText || editor.query('hasSelectionWithText') === false || inlines.some(inline => inline.type !== 'span');
    return blockContentFeatures.annotations.map(annotation => {
      return _objectSpread({}, annotation, {
        active: editor.query('hasAnnotation', annotation.value),
        disabled
      });
    });
  }

  render() {
    var items = this.getItems();
    return _react.default.createElement("div", {
      className: _AnnotationButtons.default.root
    }, items.map(this.renderAnnotationButton));
  }

}

exports.default = AnnotationButtons;