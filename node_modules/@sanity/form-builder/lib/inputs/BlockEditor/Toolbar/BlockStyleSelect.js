"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _style = _interopRequireDefault(require("part:@sanity/components/selects/style"));

var _Text = _interopRequireDefault(require("../nodes/Text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class BlockStyleSelect extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleChange", item => {
      var editor = this.props.editor;
      editor.command('setBlockStyle', item.style);
      editor.command('focusNoScroll');
      this.forceUpdate();
    });

    _defineProperty(this, "renderItem", item => {
      return item.preview;
    });
  }

  shouldComponentUpdate(nextProps) {
    var nextFocusBlock = nextProps.editorValue.focusBlock;
    var currentFocusBlock = this.props.editorValue.focusBlock;

    if (nextProps.editorValue.blocks.size > 1) {
      return true;
    }

    if ((nextFocusBlock && nextFocusBlock.key) !== (currentFocusBlock && currentFocusBlock.key)) {
      return true;
    }

    return (nextFocusBlock && nextFocusBlock.data.get('style')) !== (currentFocusBlock && currentFocusBlock.data.get('style'));
  }

  getItemsAndValue() {
    var _this$props = this.props,
        blockContentFeatures = _this$props.blockContentFeatures,
        editor = _this$props.editor;
    var items = blockContentFeatures.styles.map(style => {
      var styleComponent = style && style.blockEditor && style.blockEditor.render;

      var preview = _react.default.createElement(_Text.default, {
        attributes: {},
        style: style.value,
        styleComponent: styleComponent
      }, style.title);

      return {
        key: "style-".concat(style.value),
        style: style.value,
        preview: preview,
        title: " ".concat(style.title),
        active: editor.query('hasStyle', style.value)
      };
    });
    var value = items.filter(item => item.active);

    if (value.length === 0) {
      items.push({
        key: 'style-none',
        style: null,
        preview: _react.default.createElement("div", null, "No style"),
        title: ' No style',
        active: true
      });
      value = items.slice(-1);
    }

    return {
      items: items,
      value: value
    };
  }

  render() {
    var _this$getItemsAndValu = this.getItemsAndValue(),
        items = _this$getItemsAndValu.items,
        value = _this$getItemsAndValu.value;

    if (!items || items.length === 0) {
      return null;
    }

    var editorValue = this.props.editorValue;
    var focusBlock = editorValue.focusBlock;
    var disabled = focusBlock ? focusBlock.isVoid : false;
    return _react.default.createElement("label", null, _react.default.createElement("span", {
      style: {
        display: 'none'
      }
    }, "Text"), _react.default.createElement(_style.default, {
      items: items,
      value: value,
      disabled: disabled,
      onChange: this.handleChange,
      renderItem: this.renderItem,
      transparent: true
    }));
  }

}

exports.default = BlockStyleSelect;