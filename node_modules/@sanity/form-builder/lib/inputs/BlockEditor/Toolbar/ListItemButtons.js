"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _formatListBulletedIcon = _interopRequireDefault(require("part:@sanity/base/format-list-bulleted-icon"));

var _formatListNumberedIcon = _interopRequireDefault(require("part:@sanity/base/format-list-numbered-icon"));

var _sanityLogoIcon = _interopRequireDefault(require("part:@sanity/base/sanity-logo-icon"));

var _button = _interopRequireDefault(require("part:@sanity/components/toggles/button"));

var _CustomIcon = _interopRequireDefault(require("./CustomIcon"));

var _ToolbarClickAction = _interopRequireDefault(require("./ToolbarClickAction"));

var _ListItemButtons = _interopRequireDefault(require("./styles/ListItemButtons.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getIcon(type) {
  switch (type) {
    case 'number':
      return _formatListNumberedIcon.default;

    case 'bullet':
      return _formatListBulletedIcon.default;

    default:
      return _sanityLogoIcon.default;
  }
}

var NOOP = () => {};

class ListItemButtons extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", item => {
      var editor = this.props.editor;
      editor.command('toggleListItem', item.value);
      this.forceUpdate();
    });

    _defineProperty(this, "renderListItemButton", item => {
      var editor = this.props.editor;
      var Icon;
      var icon = item.blockEditor ? item.blockEditor.icon : null;

      if (icon) {
        if (typeof icon === 'string') {
          Icon = () => _react.default.createElement(_CustomIcon.default, {
            icon: icon,
            active: !!item.active
          });
        } else if (typeof icon === 'function') {
          Icon = icon;
        }
      }

      Icon = Icon || getIcon(item.value);

      var onAction = () => this.handleClick(item);

      return _react.default.createElement(_ToolbarClickAction.default, {
        onAction: onAction,
        editor: editor,
        key: "listItemButton".concat(item.value)
      }, _react.default.createElement(_button.default, {
        selected: item.active,
        disabled: item.disabled,
        onClick: NOOP,
        title: item.title,
        className: _ListItemButtons.default.button,
        icon: Icon
      }));
    });
  }

  shouldComponentUpdate(nextProps) {
    var nextFocusBlock = nextProps.editorValue.focusBlock;
    var currentFocusBlock = this.props.editorValue.focusBlock; // Always update if we have selected more than one block

    if (nextProps.editorValue.blocks.size > 1) {
      return true;
    } // Update if we have navigated to another block, or the block's data litItem prop is changed


    if ((nextFocusBlock && nextFocusBlock.key) !== (currentFocusBlock && currentFocusBlock.key) || (nextFocusBlock && nextFocusBlock.data.get('listItem')) !== (currentFocusBlock && currentFocusBlock.data.get('listItem'))) {
      return true;
    }

    return false;
  }

  hasListItem(listItemName) {
    var editor = this.props.editor;
    return editor.value.blocks.some(block => {
      return block.data.get('listItem') === listItemName;
    });
  }

  getItems() {
    var _this$props = this.props,
        editor = _this$props.editor,
        blockContentFeatures = _this$props.blockContentFeatures;
    var focusBlock = editor.value.focusBlock;
    var disabled = focusBlock ? editor.query('isVoid', focusBlock) : false;
    return blockContentFeatures.lists.map(listItem => {
      return _objectSpread({}, listItem, {
        active: editor.query('hasListItem', listItem.value),
        disabled
      });
    });
  }

  render() {
    var items = this.getItems();
    return _react.default.createElement("div", {
      className: _ListItemButtons.default.root
    }, items.map(this.renderListItemButton));
  }

}

exports.default = ListItemButtons;