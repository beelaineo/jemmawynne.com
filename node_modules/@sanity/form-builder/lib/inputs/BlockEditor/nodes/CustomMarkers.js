"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactTippy = require("react-tippy");

var _commentIcon = _interopRequireDefault(require("part:@sanity/base/comment-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This is the fallback marker renderer if the block editor didn't get the 'renderCustomMarkers' prop
// You will probably only see this when you first start to play with custom markers as a developer
class Markers extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleCustomMarkerClick", event => {
      event.preventDefault();
      event.stopPropagation();
      var markers = this.props.markers;
      console.log(markers); // eslint-disable-line no-console
    });
  }

  render() {
    var markers = this.props.markers;
    var text = "".concat(markers.length === 1 ? 'One' : markers.length, " custom ").concat(markers.length > 1 ? 'markers' : 'marker', ", click to log to console.");
    return _react.default.createElement(_reactTippy.Tooltip, {
      title: text,
      trigger: "mouseenter focus",
      animation: "scale",
      arrow: true,
      theme: "light",
      distance: "2",
      duration: 50
    }, _react.default.createElement(_commentIcon.default, {
      onClick: this.handleCustomMarkerClick
    }));
  }

}

exports.default = Markers;

_defineProperty(Markers, "defaultProps", {
  markers: []
});