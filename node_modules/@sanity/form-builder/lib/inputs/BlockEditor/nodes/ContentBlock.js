"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ListItem = _interopRequireDefault(require("./ListItem"));

var _Text = _interopRequireDefault(require("./Text"));

var _ContentBlock = _interopRequireDefault(require("./styles/ContentBlock.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line complexity
class Markers extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_clickCounter", 0);

    _defineProperty(this, "_clickTimeout", null);

    _defineProperty(this, "_clickMouseXY", {
      x: null,
      y: null // Prevent triple clicks for tangling with the block below
      // This is a bug in Slate (Jan. 2019), and should be fixed there!

    });

    _defineProperty(this, "handleMouseDown", event => {
      var mouseXWithinRange = this._clickMouseXY.x && Math.abs(event.clientX - this._clickMouseXY.x) < 20;
      var mouseYWithinRange = this._clickMouseXY.y && Math.abs(event.clientY - this._clickMouseXY.y) < 20;

      if (this._clickTimeout) {
        clearTimeout(this._clickTimeout);
      }

      this._clickTimeout = setTimeout(() => {
        if (this._clickCounter > 2 && mouseXWithinRange && mouseYWithinRange) {
          this.props.editor.moveToRangeOfNode(this.props.editor.value.anchorBlock);
        }

        this._clickCounter = 0;
      }, 500);
      this._clickCounter++;
      this._clickMouseXY = {
        x: event.clientX,
        y: event.clientY
      };
    });
  }

  render() {
    var _this$props = this.props,
        attributes = _this$props.attributes,
        blockContentFeatures = _this$props.blockContentFeatures,
        children = _this$props.children,
        node = _this$props.node;
    var data = node.data;
    var listItem = data ? data.get('listItem') : null;
    var level = data ? data.get('level') : 1;
    var style = data ? data.get('style') : 'normal'; // Should we render a custom style?

    var styleComponent;
    var customStyle = blockContentFeatures && style ? blockContentFeatures.styles.find(item => item.value === style) : null;

    if (customStyle) {
      styleComponent = customStyle.blockEditor && customStyle.blockEditor.render;
    }

    if (listItem) {
      return _react.default.createElement(_ListItem.default, {
        attributes: attributes,
        level: level,
        listStyle: listItem
      }, _react.default.createElement(_Text.default, {
        style: style,
        styleComponent: styleComponent
      }, _react.default.createElement("div", {
        onMouseDown: this.handleMouseDown
      }, children)));
    }

    return _react.default.createElement("div", _extends({
      className: _ContentBlock.default.textBlock
    }, attributes, {
      onMouseDown: this.handleMouseDown
    }), _react.default.createElement(_Text.default, {
      style: style,
      styleComponent: styleComponent
    }, children));
  }

}

exports.default = Markers;