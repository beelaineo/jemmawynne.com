"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _PatchEvent = require("../../PatchEvent");

var _BlockEditor = _interopRequireDefault(require("./BlockEditor"));

var _Input = _interopRequireDefault(require("./styles/Input.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class BlockEditorInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "inputId", (0, _uniqueId2.default)('BlockEditor'));

    _defineProperty(this, "blockEditor", _react.default.createRef());

    _defineProperty(this, "state", {
      fullscreen: false
    });

    _defineProperty(this, "handleToggleFullScreen", event => {
      this.setState(prevState => ({
        fullscreen: !prevState.fullscreen
      }));
      window.requestAnimationFrame(() => {
        this.focus();
      });
    });

    _defineProperty(this, "focus", () => {
      var _this$props = this.props,
          focusPath = _this$props.focusPath,
          onFocus = _this$props.onFocus,
          readOnly = _this$props.readOnly;
      var blockEditor = this.blockEditor && this.blockEditor.current;
      var editor = blockEditor && blockEditor.getEditor();
      var shouldSetNewFocus = !focusPath || focusPath.length === 0;

      if (editor && !readOnly && shouldSetNewFocus) {
        editor.command('ensurePlaceHolderBlock');
        editor.focus();
        var key = editor.value.focusBlock ? editor.value.focusBlock.key : editor.value.document.nodes.get(0).key;
        onFocus([{
          _key: key
        }]);
      }
    });

    _defineProperty(this, "handleFocusSkipper", () => {
      this.focus();
    });
  }

  render() {
    var _this$props2 = this.props,
        blockContentFeatures = _this$props2.blockContentFeatures,
        controller = _this$props2.controller,
        editorValue = _this$props2.editorValue,
        focusPath = _this$props2.focusPath,
        isLoading = _this$props2.isLoading,
        level = _this$props2.level,
        markers = _this$props2.markers,
        onChange = _this$props2.onChange,
        onBlur = _this$props2.onBlur,
        onFocus = _this$props2.onFocus,
        onLoading = _this$props2.onLoading,
        onPaste = _this$props2.onPaste,
        onPatch = _this$props2.onPatch,
        readOnly = _this$props2.readOnly,
        renderBlockActions = _this$props2.renderBlockActions,
        renderCustomMarkers = _this$props2.renderCustomMarkers,
        type = _this$props2.type,
        undoRedoStack = _this$props2.undoRedoStack,
        userIsWritingText = _this$props2.userIsWritingText,
        value = _this$props2.value;
    var fullscreen = this.state.fullscreen;
    var isActive = Array.isArray(focusPath) && focusPath.length >= 1;
    return _react.default.createElement("div", null, _react.default.createElement(_default.default, {
      label: type.title,
      labelFor: this.inputId,
      markers: markers,
      description: type.description,
      level: level
    }, !readOnly && _react.default.createElement("button", {
      type: "button",
      tabIndex: 0,
      className: _Input.default.focusSkipper,
      onClick: this.handleFocusSkipper
    }, "Jump to editor")), _react.default.createElement(_BlockEditor.default, {
      blockContentFeatures: blockContentFeatures,
      controller: controller,
      editorValue: editorValue,
      focusPath: focusPath,
      fullscreen: fullscreen,
      isActive: isActive,
      markers: markers,
      onBlur: onBlur,
      onChange: onChange,
      onLoading: onLoading,
      isLoading: isLoading,
      onFocus: onFocus,
      onPatch: onPatch,
      onPaste: onPaste,
      onToggleFullScreen: this.handleToggleFullScreen,
      ref: this.blockEditor,
      readOnly: readOnly,
      renderCustomMarkers: renderCustomMarkers,
      renderBlockActions: renderBlockActions,
      setFocus: this.focus,
      type: type,
      value: value,
      undoRedoStack: undoRedoStack,
      userIsWritingText: userIsWritingText
    }));
  }

}

exports.default = BlockEditorInput;

_defineProperty(BlockEditorInput, "defaultProps", {
  renderBlockActions: null,
  renderCustomMarkers: null,
  readOnly: false
});