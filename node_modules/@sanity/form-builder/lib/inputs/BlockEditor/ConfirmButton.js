"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _trashIcon = _interopRequireDefault(require("part:@sanity/base/trash-icon"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _ConfirmButton = _interopRequireDefault(require("./styles/ConfirmButton.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfirmButton extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_confirmButton", void 0);

    _defineProperty(this, "state", {
      showConfirmDialog: false
    });

    _defineProperty(this, "handleClick", event => {
      this.open();
    });

    _defineProperty(this, "handleConfirmPopoverClose", event => {
      this.close();
    });

    _defineProperty(this, "setButton", button => {
      this._button = button;
    });

    _defineProperty(this, "setConfirmButton", button => {
      this._confirmButton = button;
    });
  }

  close() {
    this.setState({
      showConfirmDialog: false
    });

    this._button.focus();
  }

  open() {
    this.setState({
      showConfirmDialog: true
    });
  }

  componentDidUpdate(prevProps, prevState) {
    if (!prevState.showConfirmDialog && this.state.showConfirmDialog) {// todo: does not work as the popover is not in sync
      //this._confirmButton.focus()
    }
  }

  render() {
    var showConfirmDialog = this.state.showConfirmDialog;

    var _this$props = this.props,
        onConfirm = _this$props.onConfirm,
        rest = _objectWithoutProperties(_this$props, ["onConfirm"]);

    return _react.default.createElement("div", {
      className: _ConfirmButton.default.root
    }, _react.default.createElement(_default.default, _extends({}, rest, {
      kind: "simple",
      icon: _trashIcon.default,
      onClick: this.handleClick,
      ref: this.setButton
    })), _react.default.createElement("div", {
      className: _ConfirmButton.default.popoverAnchor
    }, showConfirmDialog && _react.default.createElement(_popover.default, {
      color: "danger",
      useOverlay: false,
      onEscape: this.handleConfirmPopoverClose,
      onClickOutside: this.handleConfirmPopoverClose
    }, _react.default.createElement("div", {
      className: _ConfirmButton.default.wrapper
    }, _react.default.createElement(_default.default, {
      color: "white",
      inverted: true,
      onClick: onConfirm,
      icon: _trashIcon.default,
      ref: this.setConfirmButton
    }, "Confirm remove")))));
  }

}

exports.default = ConfirmButton;

_defineProperty(ConfirmButton, "propTypes", {
  children: _propTypes.default.func,
  onConfirm: _propTypes.default.func
});