"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createBlockActionPatchFn;

var _PatchEvent = _interopRequireWildcard(require("../../../../PatchEvent"));

var _blockTools = require("@sanity/block-tools");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function createBlockActionPatchFn(type, block, onPatch) {
  var toInsert;
  return givenBlock => {
    switch (type) {
      case 'set':
        return onPatch(_PatchEvent.default.from((0, _PatchEvent.set)((0, _blockTools.normalizeBlock)(givenBlock), [{
          _key: block._key
        }])));

      case 'unset':
        return onPatch(_PatchEvent.default.from((0, _PatchEvent.unset)([{
          _key: block._key
        }])));

      case 'insert':
        toInsert = Array.isArray(givenBlock) ? givenBlock : [givenBlock];
        toInsert = toInsert.map(blk => (0, _blockTools.normalizeBlock)(blk));
        return onPatch(_PatchEvent.default.from((0, _PatchEvent.insert)(toInsert, 'after', [{
          _key: block._key
        }])));

      default:
        throw new Error("Patch type ".concat(type, " not supported"));
    }
  };
}