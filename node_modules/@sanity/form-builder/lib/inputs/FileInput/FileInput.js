"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _button = _interopRequireDefault(require("part:@sanity/components/fileinput/button"));

var _bar = _interopRequireDefault(require("part:@sanity/components/progress/bar"));

var _editIcon = _interopRequireDefault(require("part:@sanity/base/edit-icon"));

var _visibilityIcon = _interopRequireDefault(require("part:@sanity/base/visibility-icon"));

var _fileIcon = _interopRequireDefault(require("part:@sanity/base/file-icon"));

var _uploadIcon = _interopRequireDefault(require("part:@sanity/base/upload-icon"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _FileInput = _interopRequireDefault(require("./styles/FileInput.css"));

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _observable = require("../../typedefs/observable");

var _WithMaterializedReference = _interopRequireDefault(require("../../utils/WithMaterializedReference"));

var _FormBuilderInput = require("../../FormBuilderInput");

var _UploadPlaceholder = _interopRequireDefault(require("../common/UploadPlaceholder"));

var _UploadTargetFieldset = _interopRequireDefault(require("../../utils/UploadTargetFieldset"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var HIDDEN_FIELDS = ['asset', 'hotspot', 'crop'];

class FileInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "uploadSubscription", void 0);

    _defineProperty(this, "state", {
      isUploading: false,
      isAdvancedEditOpen: false,
      uploadError: null
    });

    _defineProperty(this, "handleRemoveButtonClick", event => {
      this.props.onChange(_PatchEvent.default.from((0, _PatchEvent.unset)(['asset'])));
    });

    _defineProperty(this, "handleCancelUpload", () => {
      this.cancelUpload();
    });

    _defineProperty(this, "handleSelectFile", files => {
      this.uploadFirstAccepted(files);
    });

    _defineProperty(this, "renderMaterializedAsset", assetDocument => {
      return _react.default.createElement("div", {
        className: _FileInput.default.previewAsset
      }, _react.default.createElement("div", {
        className: _FileInput.default.fileIcon
      }, _react.default.createElement(_fileIcon.default, null)), _react.default.createElement("div", null, assetDocument.originalFilename, ' ', _react.default.createElement("a", {
        href: "".concat(assetDocument.url, "?dl"),
        download: true
      }, "Download")));
    });

    _defineProperty(this, "handleFieldChange", (event, field) => {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          type = _this$props.type;
      onChange(event.prefixAll(field.name).prepend((0, _PatchEvent.setIfMissing)({
        _type: type.name
      })));
    });

    _defineProperty(this, "handleStartAdvancedEdit", () => {
      this.setState({
        isAdvancedEditOpen: true
      });
    });

    _defineProperty(this, "handleStopAdvancedEdit", () => {
      this.setState({
        isAdvancedEditOpen: false
      });
    });

    _defineProperty(this, "handleFocus", event => {
      this.setState({
        hasFocus: true
      });
      this.props.onFocus(event);
    });

    _defineProperty(this, "handleBlur", event => {
      this.setState({
        hasFocus: false
      });
      this.props.onBlur(event);
    });

    _defineProperty(this, "setFocusArea", el => {
      this._focusArea = el;
    });

    _defineProperty(this, "getUploadOptions", file => {
      var _this$props2 = this.props,
          type = _this$props2.type,
          resolveUploader = _this$props2.resolveUploader;
      var uploader = resolveUploader && resolveUploader(type, file);
      return uploader ? [{
        type: type,
        uploader
      }] : [];
    });

    _defineProperty(this, "handleUpload", (_ref) => {
      var file = _ref.file,
          uploader = _ref.uploader;
      this.uploadWith(uploader, file);
    });
  }

  clearUploadStatus() {
    this.props.onChange(_PatchEvent.default.from([(0, _PatchEvent.unset)(['_upload'])])); // todo: this is kind of hackish
  }

  cancelUpload() {
    if (this.uploadSubscription) {
      this.uploadSubscription.unsubscribe();
      this.clearUploadStatus();
    }
  }

  uploadFirstAccepted(fileList) {
    var _this$props3 = this.props,
        resolveUploader = _this$props3.resolveUploader,
        type = _this$props3.type;
    var match;
    Array.from(fileList).some(file => {
      var uploader = resolveUploader(type, file);

      if (uploader) {
        match = {
          file,
          uploader
        };
        return true;
      }

      return false;
    });

    if (match) {
      this.uploadWith(match.uploader, match.file);
    }
  }

  uploadWith(uploader, file) {
    var _this$props4 = this.props,
        type = _this$props4.type,
        onChange = _this$props4.onChange;
    var options = {
      metadata: (0, _get2.default)(type, 'options.metadata'),
      storeOriginalFilename: (0, _get2.default)(type, 'options.storeOriginalFilename')
    };
    this.cancelUpload();
    this.setState({
      isUploading: true
    });
    onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
      _type: type.name
    })]));
    this.uploadSubscription = uploader.upload(file, type, options).subscribe({
      next: uploadEvent => {
        if (uploadEvent.patches) {
          onChange(_PatchEvent.default.from(uploadEvent.patches));
        }
      },
      error: err => {
        this.setState({
          uploadError: err
        });
        this.clearUploadStatus();
      },
      complete: () => {
        onChange(_PatchEvent.default.from([(0, _PatchEvent.unset)(['hotspot']), (0, _PatchEvent.unset)(['crop'])]));
        this.setState({
          isUploading: false
        });
      }
    });
  }

  renderUploadState(uploadState) {
    var isUploading = this.state.isUploading;
    var isComplete = uploadState.progress === 100;
    var filename = (0, _get2.default)(uploadState, 'file.name');
    return _react.default.createElement("div", {
      className: _FileInput.default.uploadState
    }, _react.default.createElement("div", null, _react.default.createElement("div", {
      className: isComplete ? _FileInput.default.progressBarCompleted : _FileInput.default.progressBar
    }, _react.default.createElement(_bar.default, {
      percent: status === 'complete' ? 100 : uploadState.progress,
      text: isComplete ? 'Complete' : "Uploading".concat(filename ? " \"".concat(filename, "\"") : '...'),
      completed: isComplete,
      showPercent: true,
      animation: true
    })), _react.default.createElement("div", {
      className: _FileInput.default.cancelButton
    }, isUploading && _react.default.createElement(_default.default, {
      kind: "simple",
      color: "danger",
      onClick: this.handleCancelUpload
    }, "Cancel"))));
  }

  renderAdvancedEdit(fields) {
    return _react.default.createElement(_fullscreen.default, {
      title: "Edit details",
      onClose: this.handleStopAdvancedEdit,
      isOpen: true
    }, _react.default.createElement("div", null, this.renderFields(fields)), _react.default.createElement(_default.default, {
      onClick: this.handleStopAdvancedEdit
    }, "Close"));
  }

  renderFields(fields) {
    return fields.map(field => this.renderField(field));
  }

  renderField(field) {
    var _this$props5 = this.props,
        value = _this$props5.value,
        level = _this$props5.level,
        focusPath = _this$props5.focusPath,
        onFocus = _this$props5.onFocus,
        readOnly = _this$props5.readOnly,
        onBlur = _this$props5.onBlur;
    var fieldValue = value && value[field.name];
    return _react.default.createElement(_FormBuilderInput.FormBuilderInput, {
      key: field.name,
      value: fieldValue,
      type: field.type,
      onChange: ev => this.handleFieldChange(ev, field),
      path: [field.name],
      onFocus: onFocus,
      onBlur: onBlur,
      readOnly: readOnly || field.type.readOnly,
      focusPath: focusPath,
      level: level
    });
  }

  renderAsset() {
    var _this$props6 = this.props,
        value = _this$props6.value,
        materialize = _this$props6.materialize,
        readOnly = _this$props6.readOnly;

    if (value && value.asset) {
      return _react.default.createElement(_WithMaterializedReference.default, {
        reference: value.asset,
        materialize: materialize
      }, this.renderMaterializedAsset);
    }

    return readOnly ? _react.default.createElement("span", null, "Field is read only") : _react.default.createElement(_UploadPlaceholder.default, {
      hasFocus: this.state.hasFocus
    });
  }

  focus() {
    if (this._focusArea) {
      this._focusArea.focus();
    }
  }

  render() {
    var _this$props7 = this.props,
        type = _this$props7.type,
        value = _this$props7.value,
        level = _this$props7.level,
        markers = _this$props7.markers,
        readOnly = _this$props7.readOnly;
    var _this$state = this.state,
        isAdvancedEditOpen = _this$state.isAdvancedEditOpen,
        uploadError = _this$state.uploadError;

    var _partition2 = (0, _partition4.default)(type.fields.filter(field => !HIDDEN_FIELDS.includes(field.name)), 'type.options.isHighlighted'),
        _partition3 = _slicedToArray(_partition2, 2),
        highlightedFields = _partition3[0],
        otherFields = _partition3[1];

    var hasAsset = value && value.asset;
    return _react.default.createElement(_UploadTargetFieldset.default, {
      markers: markers,
      legend: type.title,
      description: type.description,
      level: level,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onUpload: this.handleUpload,
      getUploadOptions: this.getUploadOptions,
      ref: this.setFocusArea
    }, uploadError && _react.default.createElement(_default2.default, {
      kind: "error",
      action: {
        title: 'OK'
      },
      onAction: () => this.setState({
        uploadError: null
      })
    }, "We're", " really sorry, but the upload could not be completed."), _react.default.createElement("div", {
      className: _FileInput.default.content
    }, _react.default.createElement("div", {
      className: _FileInput.default.assetWrapper
    }, value && value._upload && _react.default.createElement("div", {
      className: _FileInput.default.uploadState
    }, this.renderUploadState(value._upload)), this.renderAsset()), highlightedFields.length > 0 && _react.default.createElement("div", {
      className: _FileInput.default.fieldsWrapper
    }, this.renderFields(highlightedFields))), _react.default.createElement("div", {
      className: _FileInput.default.functions
    }, !readOnly && _react.default.createElement(_button.default, {
      icon: _uploadIcon.default,
      onSelect: this.handleSelectFile,
      accept: ''
      /* todo build from this.props.resolveUploaders */

    }, "Upload"), value && otherFields.length > 0 && _react.default.createElement(_default.default, {
      icon: readOnly ? _visibilityIcon.default : _editIcon.default,
      kind: "simple",
      title: readOnly ? 'View details' : 'Edit details',
      onClick: this.handleStartAdvancedEdit
    }, readOnly ? 'View details' : 'Edit'), !readOnly && hasAsset && _react.default.createElement(_default.default, {
      color: "danger",
      kind: "simple",
      onClick: this.handleRemoveButtonClick
    }, "Remove")), isAdvancedEditOpen && this.renderAdvancedEdit(otherFields));
  }

}

exports.default = FileInput;