"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _FormBuilderPropTypes = _interopRequireDefault(require("../../FormBuilderPropTypes"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _FormBuilderInput = require("../../FormBuilderInput");

var _InvalidValueInput = _interopRequireDefault(require("../InvalidValueInput"));

var _resolveTypeName = require("../../utils/resolveTypeName");

var _Field = _interopRequireDefault(require("./styles/Field.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This component renders a single type in an object type. It emits onChange events telling the owner about the name of the type
// that changed. This gives the owner an opportunity to use the same event handler function for all of its fields
class Field extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleChange", event => {
      var _this$props = this.props,
          field = _this$props.field,
          onChange = _this$props.onChange;

      if (!field.type.readOnly) {
        onChange(event, field);
      }
    });

    _defineProperty(this, "setInput", input => {
      this._input = input;
    });
  }

  focus() {
    this._input.focus();
  }

  render() {
    var _this$props2 = this.props,
        value = _this$props2.value,
        readOnly = _this$props2.readOnly,
        field = _this$props2.field,
        level = _this$props2.level,
        onFocus = _this$props2.onFocus,
        onBlur = _this$props2.onBlur,
        markers = _this$props2.markers,
        focusPath = _this$props2.focusPath,
        filterField = _this$props2.filterField;

    if (typeof value !== 'undefined') {
      var expectedType = field.type.name;
      var actualType = (0, _resolveTypeName.resolveTypeName)(value); // todo: we should consider removing this, and not allow aliasing native types
      // + ensure custom object types always gets annotated with _type

      var isCompatible = actualType === field.type.jsonType;

      if (expectedType !== actualType && !isCompatible) {
        return _react.default.createElement("div", {
          className: _Field.default.root
        }, _react.default.createElement(_default.default, {
          legend: field.type.title,
          level: level
        }, _react.default.createElement(_InvalidValueInput.default, {
          value: value,
          onChange: this.handleChange,
          validTypes: [field.type.name],
          actualType: actualType,
          ref: this.setInput
        })));
      }
    }

    return _react.default.createElement("div", {
      className: _Field.default.root
    }, _react.default.createElement(_FormBuilderInput.FormBuilderInput, {
      value: value,
      type: field.type,
      onChange: this.handleChange,
      path: [field.name],
      onFocus: onFocus,
      onBlur: onBlur,
      readOnly: readOnly || field.type.readOnly,
      focusPath: focusPath,
      filterField: filterField,
      markers: markers,
      level: level,
      ref: this.setInput
    }));
  }

}

exports.default = Field;

_defineProperty(Field, "propTypes", {
  field: _FormBuilderPropTypes.default.field.isRequired,
  value: _propTypes.default.any,
  onChange: _propTypes.default.func.isRequired,
  onFocus: _propTypes.default.func.isRequired,
  onBlur: _propTypes.default.func.isRequired,
  focusPath: _propTypes.default.array,
  filterField: _propTypes.default.func,
  readOnly: _propTypes.default.bool,
  markers: _propTypes.default.array,
  level: _propTypes.default.number
});

_defineProperty(Field, "defaultProps", {
  level: 0,
  focusPath: []
});