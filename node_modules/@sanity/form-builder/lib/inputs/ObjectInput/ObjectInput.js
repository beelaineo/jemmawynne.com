"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _FormBuilderPropTypes = _interopRequireDefault(require("../../FormBuilderPropTypes"));

var _Field = _interopRequireDefault(require("./Field"));

var _default = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _isEmpty = _interopRequireDefault(require("../../utils/isEmpty"));

var _UnknownFields = _interopRequireDefault(require("./UnknownFields"));

var _Field2 = _interopRequireDefault(require("./styles/Field.css"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getCollapsedWithDefaults() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var level = arguments.length > 1 ? arguments[1] : undefined;

  // todo: warn on "collapsable" and deprecate collapsible in favor of just "collapsed"
  //       --> relevant: https://github.com/sanity-io/sanity/issues/537
  if (options.collapsible === true || options.collapsable === true) {
    // collapsible explicit set to true
    return {
      collapsible: true,
      collapsed: options.collapsed !== false
    };
  } else if (options.collapsible === false || options.collapsable === false) {
    // collapsible explicit set to false
    return {
      // hard limit to avoid infinite recursion
      collapsible: level > 9,
      collapsed: level > 9
    };
  } // default


  return {
    collapsible: level > 2,
    collapsed: level > 2
  };
}

class ObjectInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleFieldChange", (fieldEvent, field) => {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          type = _this$props.type,
          value = _this$props.value,
          isRoot = _this$props.isRoot;
      var event = fieldEvent.prefixAll(field.name);

      if (!isRoot) {
        event = event.prepend((0, _PatchEvent.setIfMissing)(type.name === 'object' ? {} : {
          _type: type.name
        }));

        if (value) {
          var valueTypeName = value && value._type;
          var schemaTypeName = type.name; // eslint-disable-next-line max-depth

          if (valueTypeName && schemaTypeName === 'object') {
            // The value has a _type key, but the type name from schema is 'object',
            // but _type: 'object' is implicit so we should fix it by removing it
            event = event.prepend((0, _PatchEvent.unset)(['_type']));
          } else if (schemaTypeName !== 'object' && valueTypeName !== schemaTypeName) {
            // There's a mismatch between schema type and the value _type
            // fix it by setting _type to type name defined in schema
            event = event.prepend((0, _PatchEvent.set)(schemaTypeName, ['_type']));
          }
        }
      }

      onChange(event);
    });

    _defineProperty(this, "setFirstField", el => {
      this._firstField = el;
    });
  }

  handleBlur() {
    var _this$props2 = this.props,
        onChange = _this$props2.onChange,
        value = _this$props2.value;

    if ((0, _isEmpty.default)(value)) {
      onChange(_PatchEvent.default.from((0, _PatchEvent.unset)()));
    }
  }

  renderField(field, level, index) {
    var _this$props3 = this.props,
        type = _this$props3.type,
        value = _this$props3.value,
        markers = _this$props3.markers,
        readOnly = _this$props3.readOnly,
        focusPath = _this$props3.focusPath,
        onFocus = _this$props3.onFocus,
        onBlur = _this$props3.onBlur,
        filterField = _this$props3.filterField;

    if (!filterField(type, field) || field.type.hidden) {
      return null;
    }

    var fieldValue = value && value[field.name];
    return _react.default.createElement(_Field.default, {
      key: field.name,
      field: field,
      value: fieldValue,
      onChange: this.handleFieldChange,
      onFocus: onFocus,
      onBlur: onBlur,
      markers: markers,
      focusPath: focusPath,
      level: level,
      readOnly: readOnly,
      filterField: filterField,
      ref: index === 0 && this.setFirstField
    });
  }

  renderFieldset(fieldset, fieldsetIndex) {
    var _this$props4 = this.props,
        level = _this$props4.level,
        focusPath = _this$props4.focusPath;
    var columns = fieldset.options && fieldset.options.columns;
    var collapsibleOpts = getCollapsedWithDefaults(fieldset.options, level);
    var isExpanded = focusPath.length > 0 && fieldset.fields.some(field => focusPath[0] === field.name);
    return _react.default.createElement("div", {
      key: fieldset.name,
      className: _Field2.default.root
    }, _react.default.createElement(_default.default, {
      legend: fieldset.title,
      description: fieldset.description,
      level: level + 1,
      columns: columns,
      isCollapsible: collapsibleOpts.collapsible,
      isCollapsed: !isExpanded && collapsibleOpts.collapsed
    }, fieldset.fields.map((field, fieldIndex) => {
      return this.renderField(field, level + 2, fieldsetIndex + fieldIndex);
    })));
  }

  getRenderedFields() {
    var _this$props5 = this.props,
        type = _this$props5.type,
        level = _this$props5.level;

    if (!type.fieldsets) {
      // this is a fallback for schema types that are not parsed to be objects, but still has jsonType == 'object'
      return (type.fields || []).map((field, i) => this.renderField(field, level + 1, i));
    }

    return type.fieldsets.map((fieldset, i) => {
      return fieldset.single ? this.renderField(fieldset.field, level + 1, i) : this.renderFieldset(fieldset, i);
    });
  }

  renderUnknownFields() {
    var _this$props6 = this.props,
        value = _this$props6.value,
        type = _this$props6.type,
        onChange = _this$props6.onChange,
        readOnly = _this$props6.readOnly;

    if (!type.fields) {
      return null;
    }

    var knownFieldNames = type.fields.map(field => field.name);
    var unknownFields = Object.keys(value || {}).filter(key => !key.startsWith('_') && !knownFieldNames.includes(key));

    if (unknownFields.length === 0) {
      return null;
    }

    return _react.default.createElement(_UnknownFields.default, {
      readOnly: readOnly,
      fieldNames: unknownFields,
      value: value,
      onChange: onChange
    });
  }

  focus() {
    if (this._firstField) {
      this._firstField.focus();
    }
  }

  render() {
    var _this$props7 = this.props,
        type = _this$props7.type,
        level = _this$props7.level,
        focusPath = _this$props7.focusPath;
    var renderedFields = this.getRenderedFields();
    var renderedUnknownFields = this.renderUnknownFields();

    if (level === 0) {
      return _react.default.createElement("div", null, renderedFields, renderedUnknownFields);
    }

    var collapsibleOpts = getCollapsedWithDefaults(type.options, level);
    var isExpanded = focusPath.length > 0;
    var columns = type.options && type.options.columns;
    return _react.default.createElement(_default.default, {
      level: level,
      legend: type.title,
      description: type.description,
      columns: columns,
      isCollapsible: collapsibleOpts.collapsible,
      isCollapsed: !isExpanded && collapsibleOpts.collapsed
    }, renderedFields, renderedUnknownFields);
  }

}

exports.default = ObjectInput;

_defineProperty(ObjectInput, "propTypes", {
  type: _FormBuilderPropTypes.default.type,
  value: _propTypes.default.object,
  onChange: _propTypes.default.func,
  onFocus: _propTypes.default.func.isRequired,
  focusPath: _propTypes.default.array,
  markers: _propTypes.default.array,
  onBlur: _propTypes.default.func.isRequired,
  level: _propTypes.default.number,
  readOnly: _propTypes.default.bool,
  isRoot: _propTypes.default.bool,
  filterField: _propTypes.default.func
});

_defineProperty(ObjectInput, "defaultProps", {
  onChange() {},

  level: 0,
  focusPath: [],
  isRoot: false,
  filterField: () => true
});