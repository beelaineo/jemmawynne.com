"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = apply;

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _clone2 = _interopRequireDefault(require("lodash/clone"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _applyPatch = _interopRequireDefault(require("./applyPatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function apply(value, patch) {
  var nextValue = (0, _clone2.default)(value);

  if (patch.path.length === 0) {
    // its directed to me
    if (patch.type === 'set') {
      if (!(0, _isObject2.default)(patch.value)) {
        // eslint-disable-line max-depth
        throw new Error('Cannot set value of an object to a non-object');
      }

      return patch.value;
    } else if (patch.type === 'unset') {
      return undefined;
    } else if (patch.type === 'setIfMissing') {
      // console.log('IS IT missing?', value)
      return value === undefined ? patch.value : value;
    }

    throw new Error("Invalid object operation: ".concat(patch.type));
  } // The patch is not directed to me


  var _patch$path = _toArray(patch.path),
      head = _patch$path[0],
      tail = _patch$path.slice(1);

  if (typeof head !== 'string') {
    throw new Error("Expected field name to be a string, instad got: ".concat(head));
  }

  if (tail.length === 0 && patch.type === 'unset') {
    return (0, _omit2.default)(nextValue, head);
  }

  nextValue[head] = (0, _applyPatch.default)(nextValue[head], _objectSpread({}, patch, {
    path: tail
  }));
  return nextValue;
}