"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormBuilderInput = void 0;

var _react = _interopRequireDefault(require("react"));

var _PatchEvent = _interopRequireDefault(require("./PatchEvent"));

var _generateHelpUrl = _interopRequireDefault(require("@sanity/generate-help-url"));

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _class, _temp;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ENABLE_CONTEXT = () => {};

function getDisplayName(component) {
  return component.displayName || component.name || 'Unknown';
}

function trimChildPath(path, childPath) {
  return PathUtils.startsWith(path, childPath) ? PathUtils.trimLeft(path, childPath) : [];
}

var FormBuilderInput = (_temp = _class = class FormBuilderInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_element", void 0);

    _defineProperty(this, "_input", void 0);

    _defineProperty(this, "getValuePath", () => {
      return this.context.getValuePath().concat(this.props.path);
    });

    _defineProperty(this, "setInput", component => {
      this._input = component;
    });

    _defineProperty(this, "handleChange", patchEvent => {
      var _this$props = this.props,
          type = _this$props.type,
          onChange = _this$props.onChange;

      if (type.readOnly) {
        return;
      }

      onChange(patchEvent);
    });

    _defineProperty(this, "handleFocus", nextPath => {
      var _this$props2 = this.props,
          path = _this$props2.path,
          onFocus = _this$props2.onFocus,
          focusPath = _this$props2.focusPath;

      if (!onFocus) {
        console.warn( // eslint-disable-line no-console
        'FormBuilderInput was used without passing a required onFocus prop. Read more at %s.', (0, _generateHelpUrl.default)('form-builder-input-missing-required-prop'));
        return;
      }

      var nextFocusPath = Array.isArray(nextPath) ? [...path, ...nextPath] : path;

      if (PathUtils.isEqual(focusPath, nextFocusPath)) {
        // no change
        return;
      }

      onFocus(nextFocusPath);
    });

    _defineProperty(this, "handleBlur", () => {
      var onBlur = this.props.onBlur;

      if (!onBlur) {
        console.warn( // eslint-disable-line no-console
        'FormBuilderInput was used without passing a required onBlur prop. Read more at %s.', (0, _generateHelpUrl.default)('form-builder-input-missing-required-prop'));
        return;
      }

      onBlur();
    });

    _defineProperty(this, "setElement", el => {
      this._element = el;
    });
  }

  getChildContext() {
    return {
      getValuePath: this.getValuePath
    };
  }

  componentDidMount() {
    var _this$props3 = this.props,
        focusPath = _this$props3.focusPath,
        path = _this$props3.path;

    if (PathUtils.hasFocus(focusPath, path)) {
      this.focus();
    }
  }

  componentWillReceiveProps(nextProps) {
    var willHaveFocus = PathUtils.hasFocus(nextProps.focusPath, nextProps.path);
    var hasFocus = PathUtils.hasFocus(this.props.focusPath, this.props.path);

    if (willHaveFocus && !hasFocus) {
      this.focus();
    }
  }

  componentWillUnmount() {
    if (this.scrollTimeout) {
      clearTimeout(this.scrollTimeout);
    }
  }

  resolveInputComponent(type) {
    return this.context.formBuilder.resolveInputComponent(type);
  }

  _withInputDisplayName(cb) {
    cb(getDisplayName(this.resolveInputComponent(this.props.type)));
  }

  focus() {
    if (!this._input) {
      // should never happen
      throw new Error('Attempted to set focus on a missing input component');
    }

    if (typeof this._input.focus !== 'function') {
      this._withInputDisplayName(displayName => console.warn('Missing a required ".focus()" method on input component. Please check the implementation of %s. Read more at %s', displayName, (0, _generateHelpUrl.default)('input-component-missing-required-method')));

      return;
    }

    this._input.focus();
  }

  getChildFocusPath() {
    var _this$props4 = this.props,
        path = _this$props4.path,
        focusPath = _this$props4.focusPath;
    return trimChildPath(path, focusPath);
  }

  render() {
    var _this$props5 = this.props,
        onChange = _this$props5.onChange,
        onFocus = _this$props5.onFocus,
        onBlur = _this$props5.onBlur,
        path = _this$props5.path,
        readOnly = _this$props5.readOnly,
        value = _this$props5.value,
        markers = _this$props5.markers,
        type = _this$props5.type,
        level = _this$props5.level,
        focusPath = _this$props5.focusPath,
        isRoot = _this$props5.isRoot,
        rest = _objectWithoutProperties(_this$props5, ["onChange", "onFocus", "onBlur", "path", "readOnly", "value", "markers", "type", "level", "focusPath", "isRoot"]);

    var InputComponent = this.resolveInputComponent(type);

    if (!InputComponent) {
      return _react.default.createElement("div", null, "No input resolved for type ", JSON.stringify(type.name));
    }

    var rootProps = isRoot ? {
      isRoot
    } : {};
    var childMarkers = markers;

    if (!isRoot) {
      childMarkers = markers.filter(marker => PathUtils.startsWith(path, marker.path)).map(marker => _objectSpread({}, marker, {
        path: trimChildPath(path, marker.path)
      }));
    }

    var childFocusPath = this.getChildFocusPath();
    var isLeaf = childFocusPath.length === 0 || childFocusPath[0] === PathUtils.FOCUS_TERMINATOR;
    var leafProps = isLeaf ? {} : {
      focusPath: childFocusPath
    };
    return _react.default.createElement("div", {
      ref: this.setElement,
      "data-focus-path": PathUtils.toString(path)
    }, _react.default.createElement(InputComponent, _extends({}, rest, rootProps, leafProps, {
      value: value,
      readOnly: readOnly || type.readOnly,
      markers: childMarkers,
      type: type,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      level: level,
      ref: this.setInput
    })));
  }

}, _defineProperty(_class, "contextTypes", {
  formBuilder: ENABLE_CONTEXT,
  getValuePath: ENABLE_CONTEXT
}), _defineProperty(_class, "childContextTypes", {
  getValuePath: ENABLE_CONTEXT
}), _defineProperty(_class, "defaultProps", {
  focusPath: [],
  path: [],
  markers: []
}), _temp);
exports.FormBuilderInput = FormBuilderInput;