"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _switchStyle = _interopRequireDefault(require("part:@sanity/components/toggles/switch-style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Switch extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      hasFocus: false
    });

    _defineProperty(this, "handleFocus", event => {
      this.setState({
        hasFocus: true
      });
      this.props.onFocus(event);
    });

    _defineProperty(this, "handleBlur", event => {
      this.setState({
        hasFocus: false
      });
      this.props.onBlur(event);
    });

    _defineProperty(this, "setInput", el => {
      this._input = el;
    });
  }

  componentDidMount() {
    if (typeof value === 'undefined' && this._input) {
      this._input.indeterminate = true;
    }
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  render() {
    var _this$props = this.props,
        disabled = _this$props.disabled,
        markers = _this$props.markers,
        checked = _this$props.checked,
        label = _this$props.label,
        description = _this$props.description,
        readOnly = _this$props.readOnly,
        rest = _objectWithoutProperties(_this$props, ["disabled", "markers", "checked", "label", "description", "readOnly"]);

    var hasFocus = this.state.hasFocus;
    var thumbClass = checked ? _switchStyle.default.thumbChecked : _switchStyle.default.thumb;

    if (typeof checked === 'undefined') {
      thumbClass = _switchStyle.default.thumbIndeterminate;
    }

    return _react.default.createElement("label", {
      className: "\n          ".concat(disabled || readOnly ? _switchStyle.default.isDisabled : _switchStyle.default.isEnabled, "\n          ").concat(typeof checked === 'undefined' ? _switchStyle.default.indeterminate : _switchStyle.default.root, "\n          ").concat(checked ? _switchStyle.default.isChecked : _switchStyle.default.unChecked, "\n          ").concat(hasFocus ? _switchStyle.default.hasFocus : '', "\n        "),
      onBlur: this.handleBlur
    }, _react.default.createElement("div", {
      className: _switchStyle.default.inner
    }, _react.default.createElement("div", {
      className: _switchStyle.default.switchWrapper
    }, _react.default.createElement("div", {
      className: _switchStyle.default.track
    }), _react.default.createElement("div", {
      className: thumbClass
    }, _react.default.createElement("div", {
      className: _switchStyle.default.focusHelper
    })), _react.default.createElement("input", _extends({}, rest, {
      className: _switchStyle.default.input,
      type: "checkbox",
      disabled: disabled || readOnly,
      checked: checked,
      ref: this.setInput,
      onFocus: this.handleFocus
    }))), _react.default.createElement("div", null, _react.default.createElement("div", {
      className: _switchStyle.default.label
    }, label), description && _react.default.createElement("div", {
      className: _switchStyle.default.description
    }, description))));
  }

}

exports.default = Switch;

_defineProperty(Switch, "propTypes", {
  label: _propTypes.default.string.isRequired,
  description: _propTypes.default.string,
  markers: _propTypes.default.array,
  checked: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  readOnly: _propTypes.default.bool
});

_defineProperty(Switch, "defaultProps", {
  onFocus: () => {},
  onBlur: () => {}
});