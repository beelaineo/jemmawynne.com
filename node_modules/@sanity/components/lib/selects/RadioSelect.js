"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _radioStyle = _interopRequireDefault(require("part:@sanity/components/selects/radio-style"));

var _default = _interopRequireDefault(require("part:@sanity/components/radiobutton/default"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RadioSelect extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      focusedItem: null
    });

    _defineProperty(this, "handleRadioChange", item => {
      this.props.onChange(item);
    });

    _defineProperty(this, "handleFocus", item => {
      this.setState({
        focusedItem: item
      });
    });

    _defineProperty(this, "handleBlur", () => {
      this.setState({
        focusedItem: null
      });
    });
  }

  focus() {// todo. See https://github.com/sanity-io/sanity/issues/527
  }

  render() {
    var _this$props = this.props,
        items = _this$props.items,
        value = _this$props.value,
        name = _this$props.name,
        direction = _this$props.direction,
        readOnly = _this$props.readOnly;
    var focusedItem = this.state.focusedItem;
    return _react.default.createElement("div", {
      className: "\n          ".concat(direction == 'vertical' ? _radioStyle.default.vertical : _radioStyle.default.horizontal, "\n        ")
    }, _react.default.createElement("div", {
      className: _radioStyle.default.radioContainer
    }, items.map((item, i) => {
      return _react.default.createElement("div", {
        className: _radioStyle.default.item,
        key: i
      }, _react.default.createElement(_default.default, {
        disabled: readOnly,
        name: name,
        label: item.title,
        item: item,
        onChange: this.handleRadioChange,
        checked: value === item,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        hasFocus: focusedItem === item
      }));
    })));
  }

}

exports.default = RadioSelect;

_defineProperty(RadioSelect, "propTypes", {
  name: _propTypes.default.string,
  direction: _propTypes.default.oneOf(['horizontal', 'vertical']),
  onChange: _propTypes.default.func,
  value: _propTypes.default.object,
  readOnly: _propTypes.default.bool,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string
  }))
});

_defineProperty(RadioSelect, "defaultProps", {
  onChange() {}

});