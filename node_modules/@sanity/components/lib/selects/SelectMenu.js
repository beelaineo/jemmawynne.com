"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _default = require("part:@sanity/components/lists/default");

var _SelectMenu = _interopRequireDefault(require("./styles/SelectMenu.css"));

var _domScrollIntoView = _interopRequireDefault(require("dom-scroll-into-view"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SelectMenu extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "props", void 0);

    _defineProperty(this, "handleItemClick", event => {
      var index = Number(event.currentTarget.getAttribute('data-item-index'));
      var _this$props = this.props,
          onSelect = _this$props.onSelect,
          items = _this$props.items;
      onSelect(items[index]);
    });

    _defineProperty(this, "setScrollContainer", domNode => {
      this.scrollContainer = domNode;
    });
  }

  componentDidUpdate(prevProps) {
    if (prevProps.highlightIndex !== this.props.highlightIndex) {
      var itemElement = this.scrollContainer.querySelector("[data-item-index=\"".concat(this.props.highlightIndex, "\"]"));
      (0, _domScrollIntoView.default)(itemElement, this.scrollContainer, {
        onlyScrollIfNeeded: true
      });
    }
  }

  render() {
    var _this$props2 = this.props,
        items = _this$props2.items,
        renderItem = _this$props2.renderItem,
        highlightIndex = _this$props2.highlightIndex,
        value = _this$props2.value;
    return _react.default.createElement("div", {
      className: _SelectMenu.default.scrollContainer,
      ref: this.setScrollContainer
    }, _react.default.createElement(_default.List, {
      className: _SelectMenu.default.list
    }, items.map((item, index) => {
      var classes = (0, _classnames.default)(_SelectMenu.default.item, {
        [_SelectMenu.default.highlighted]: index === highlightIndex,
        [_SelectMenu.default.selected]: item === value
      });
      return _react.default.createElement(_default.Item, {
        key: index,
        "data-item-index": index,
        onClick: this.handleItemClick,
        className: classes,
        tabIndex: 0
      }, renderItem(item, index));
    })));
  }

}

exports.default = SelectMenu;