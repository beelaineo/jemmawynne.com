"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _build = _interopRequireDefault(require("boundless-arrow-key-navigation/build"));

var _styleStyle = _interopRequireDefault(require("part:@sanity/components/selects/style-style"));

var _angleDownIcon = _interopRequireDefault(require("part:@sanity/base/angle-down-icon"));

var _circleThinIcon = _interopRequireDefault(require("part:@sanity/base/circle-thin-icon"));

var _circleCheckIcon = _interopRequireDefault(require("part:@sanity/base/circle-check-icon"));

var _default2 = require("part:@sanity/components/lists/default");

var _poppable = _interopRequireDefault(require("part:@sanity/components/utilities/poppable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var modifiers = {
  preventOverflow: {
    padding: 0,
    boundariesElement: 'viewport'
  },
  offset: {
    offset: '0, 0'
  },
  flip: {
    enabled: false
  },
  customStyle: {
    enabled: true,
    fn: data => {
      data.styles = _objectSpread({}, data.styles, {
        maxHeight: window ? window.innerHeight - data.popper.top - 10 : 300
      });
      return data;
    }
  }
};

class StyleSelect extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      showList: false
    });

    _defineProperty(this, "buttonElement", _react.default.createRef());

    _defineProperty(this, "firstItemElement", _react.default.createRef());

    _defineProperty(this, "keyboardNavigation", false);

    _defineProperty(this, "menuHasKeyboardFocus", false);

    _defineProperty(this, "handleSelect", event => {
      event.preventDefault();
      event.stopPropagation();
      var index = event.currentTarget.dataset.index;

      if (!index) {
        return;
      }

      var item = this.props.items[index];

      if (!item) {
        return;
      }

      this.props.onChange(item);
      this.handleCloseList();
      this.keyboardNavigation = false;
    });

    _defineProperty(this, "handleOpenList", () => {
      this.setState({
        showList: true
      }, () => {
        this.menuHasKeyboardFocus = true;
        this.keyboardNavigation = true;
        this.firstItemElement.current.focus();
        this.props.onOpen();
      });
    });

    _defineProperty(this, "handleCloseList", () => {
      this.buttonElement.current.focus();
      this.setState({
        showList: false
      }, () => {
        this.props.onClose();
      });
    });

    _defineProperty(this, "handleButtonClick", event => {
      if (this.state.showList) {
        this.handleCloseList();
      } else {
        this.handleOpenList();
      }

      this.keyboardNavigation = event.detail == 0;
    });

    _defineProperty(this, "handleButtonKeyDown", event => {
      if (event.key == 'Enter') {
        this.handleOpenList();
      }
    });

    _defineProperty(this, "handleButtonBlur", event => {
      if (this.state.showList && !this.menuHasKeyboardFocus && this.keyboardNavigation) {
        this.handleCloseList();
      }
    });

    _defineProperty(this, "handleMenuBlur", event => {
      this.menuHasKeyboardFocus = false;
      this.buttonElement.current.focus();
      this.handleCloseList();
    });

    _defineProperty(this, "handleItemKeyPress", event => {
      if (event.key === 'Enter') {
        this.handleSelect(event);
      }
    });
  }

  render() {
    var _this$props = this.props,
        value = _this$props.value,
        items = _this$props.items,
        className = _this$props.className,
        placeholder = _this$props.placeholder,
        renderItem = _this$props.renderItem,
        transparent = _this$props.transparent;
    var showList = this.state.showList;
    return _react.default.createElement("div", {
      tabIndex: 0,
      onClick: this.handleButtonClick,
      onBlur: this.handleButtonBlur,
      onKeyPress: this.handleButtonKeyDown,
      className: "".concat(_styleStyle.default.root, " ").concat(className || '', " ").concat(transparent ? _styleStyle.default.transparent : '')
    }, _react.default.createElement("div", {
      className: _styleStyle.default.inner,
      ref: this.buttonElement
    }, _react.default.createElement("div", {
      className: _styleStyle.default.selectContainer
    }, _react.default.createElement("span", {
      className: _styleStyle.default.title
    }, value && value.length > 1 && 'Multiple', value && value.length == 1 && value[0].title, !value && placeholder), _react.default.createElement("span", {
      className: _styleStyle.default.arrow
    }, _react.default.createElement(_angleDownIcon.default, {
      color: "inherit"
    })))), _react.default.createElement(_poppable.default, {
      onEscape: this.handleCloseList,
      modifiers: modifiers,
      onClickOutside: this.handleCloseList,
      popperClassName: _styleStyle.default.popper
    }, showList && _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_default2.List, {
      className: _styleStyle.default.list
    }, _react.default.createElement(_build.default, null, items.map((item, index) => {
      var isSemiSelected = value && value.length > 1 && value.includes(item);
      var isSelected = value && value.length === 1 && value[0].key == item.key;
      var classNames = "\n                        ".concat(isSelected ? _styleStyle.default.itemSelected : _styleStyle.default.item, "\n                        ").concat(isSemiSelected ? _styleStyle.default.itemSemiSelected : '', "\n                      ");
      return _react.default.createElement("div", {
        key: "".concat(item.key).concat(index),
        title: item.title,
        "data-index": index,
        onClick: this.handleSelect,
        className: classNames,
        onKeyPress: this.handleItemKeyPress //eslint-disable-line react/jsx-no-bind
        ,
        ref: index === 0 && this.firstItemElement
      }, _react.default.createElement("div", {
        className: _styleStyle.default.itemIcon
      }, isSelected && _react.default.createElement(_circleCheckIcon.default, null), isSemiSelected && _react.default.createElement(_circleThinIcon.default, null)), _react.default.createElement("div", {
        className: _styleStyle.default.itemContent
      }, renderItem(item)));
    }))), _react.default.createElement("div", {
      tabIndex: 0,
      onFocus: this.handleMenuBlur
    }))));
  }

}

_defineProperty(StyleSelect, "propTypes", {
  placeholder: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onOpen: _propTypes.default.func,
  onClose: _propTypes.default.func,
  value: _propTypes.default.array,
  renderItem: _propTypes.default.func,
  className: _propTypes.default.string,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string,
    active: _propTypes.default.bool
  })),
  transparent: _propTypes.default.bool
});

_defineProperty(StyleSelect, "defaultProps", {
  className: '',

  onChange() {},

  onOpen() {},

  onClose() {},

  items: [],
  transparent: false
});

var _default = StyleSelect;
exports.default = _default;