"use strict";

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _storybook = require("part:@sanity/storybook");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _router = require("part:@sanity/base/router");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _default = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _splitController = _interopRequireDefault(require("part:@sanity/components/panes/split-controller"));

var _splitPaneWrapper = _interopRequireDefault(require("part:@sanity/components/panes/split-pane-wrapper"));

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _trashOutlineIcon = _interopRequireDefault(require("part:@sanity/base/trash-outline-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _renderActions = _interopRequireDefault(require("./styles/renderActions.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var action = event => {
  console.log('action', event);
};

var menuItems = [{
  action: 'first',
  title: 'First item',
  key: '1'
}, {
  action: 'second',
  title: 'Second item',
  key: '2'
}, {
  action: 'third',
  title: 'Third item',
  key: '3',
  params: {
    some: 'param'
  }
}, {
  action: 'fourth',
  title: 'Extra item',
  key: '4',
  group: 'extra'
}, {
  title: 'Add',
  key: '5',
  group: 'actions',
  icon: _plusIcon.default,
  showAsAction: true,
  action: () => {
    console.log('Function attached to action!');
  }
}];

var handleMenuAction = menuAction => {
  console.log('action', menuAction);
};

var router = (0, _router.route)('/');

var handleNavigate = () => null;

var renderActions = isCollapsed => {
  return _react.default.createElement("div", {
    className: _renderActions.default.root
  }, _react.default.createElement(_default2.default, {
    kind: "simple",
    icon: _plusIcon.default,
    color: "primary",
    title: "Add",
    className: _renderActions.default.button
  }), _react.default.createElement(_default2.default, {
    kind: "simple",
    icon: _trashOutlineIcon.default,
    color: "danger",
    title: "Delete",
    className: _renderActions.default.button
  }));
};

class AutoCollapseTest extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      collapsed: []
    });

    _defineProperty(this, "handleCollapse", collapsedPanes => {
      this.setState({
        collapsed: collapsedPanes
      });
    });

    _defineProperty(this, "handleExpand", collapsedPanes => {
      this.setState({
        collapsed: collapsedPanes
      });
    });

    _defineProperty(this, "handlePaneCollapse", index => {
      this.setState(prevState => {
        var collapsed = prevState.collapsed.slice();
        collapsed[index] = true;
        return {
          collapsed
        };
      });
    });

    _defineProperty(this, "handlePaneExpand", index => {
      this.setState(prevState => {
        var collapsed = prevState.collapsed.slice();
        collapsed[index] = false;
        return {
          collapsed
        };
      });
    });
  }

  render() {
    var panes = this.props.panes;
    var collapsed = this.state.collapsed;
    return _react.default.createElement(_splitController.default, {
      onShouldCollapse: this.handleCollapse,
      onShouldExpand: this.handleExpand,
      collapsed: collapsed // trigger

    }, panes.map((pane, i) => {
      return _react.default.createElement(_splitPaneWrapper.default, {
        minSize: pane.minSize,
        defaultSize: pane.defaultSize,
        key: pane.key,
        isCollapsed: pane.isCollapsed
      }, _react.default.createElement(_default.default, {
        index: i,
        title: pane.title,
        minSize: pane.minSize,
        defaultSize: pane.defaultSize,
        onExpand: this.handlePaneExpand,
        onCollapse: this.handlePaneCollapse,
        onMenuToggle: action,
        isCollapsed: pane.isCollapsed
      }, _react.default.createElement("div", {
        style: {
          marginLeft: '1rem',
          fontFamily: 'monospace'
        }
      }, _react.default.createElement("div", null, "Colapsed: ", pane.isCollapsed ? 'true' : 'false'), _react.default.createElement("div", null, "DefaultSize: ", pane.defaultSize), _react.default.createElement("div", null, "MinSize: ", pane.minSize))));
    }));
  }

}

(0, _storybook.storiesOf)('Panes').addDecorator(_knobs.withKnobs).add('Pane', () => {
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/panes/default",
    propTables: [_default.default]
  }, _react.default.createElement(_router.RouterProvider, {
    router: router,
    onNavigate: handleNavigate,
    state: router.decode(location.pathname)
  }, _react.default.createElement(_default.default, {
    title: (0, _knobs.text)('title', 'This is the default pane title', 'props'),
    isCollapsed: (0, _knobs.boolean)('isCollapsed', false, 'props'),
    onExpand: action('onExpand'),
    onCollapse: action('onCollapse'),
    minSize: (0, _knobs.number)('minWidth', 300, 'props'),
    onAction: handleMenuAction,
    menuItems: menuItems,
    renderActions: renderActions
  })));
}).add('Split', () => {
  var panes = (0, _range2.default)((0, _knobs.number)('Panes qty', 4, 'test')).map((pane, i) => {
    return {
      index: i,
      title: "Pane ".concat(i),
      key: "pane".concat(i),
      isCollapsed: [false][i],
      minSize: [301, 302, 503, 600][i] || 309,
      defaultSize: [401, 402, 403, 800][i] || 309
    };
  });
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/panes/controller",
    propTables: [PanesController]
  }, _react.default.createElement(AutoCollapseTest, {
    panes: (0, _knobs.object)('Panes', panes, 'props')
  }));
});