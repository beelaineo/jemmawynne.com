"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/textareas/default-style"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NOOP = () => {};

class DefaultTextArea extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClear", event => {
      this.props.onClear(event);
    });

    _defineProperty(this, "setInput", element => {
      this._input = element;
    });
  }

  select() {
    if (this._input) {
      this._input.select();
    }
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  componentDidMount() {
    this._input.setCustomValidity(this.props.customValidity);
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.customValidity !== this.props.customValidity) {
      this._input.setCustomValidity(nextProps.customValidity);
    }
  }

  render() {
    var _this$props = this.props,
        value = _this$props.value,
        isClearable = _this$props.isClearable,
        rows = _this$props.rows,
        onKeyPress = _this$props.onKeyPress,
        onChange = _this$props.onChange,
        onFocus = _this$props.onFocus,
        onBlur = _this$props.onBlur,
        onClear = _this$props.onClear,
        customValidity = _this$props.customValidity,
        rest = _objectWithoutProperties(_this$props, ["value", "isClearable", "rows", "onKeyPress", "onChange", "onFocus", "onBlur", "onClear", "customValidity"]);

    return _react.default.createElement("div", {
      className: _defaultStyle.default.root
    }, _react.default.createElement("textarea", _extends({
      className: _defaultStyle.default.textarea,
      rows: rows,
      value: value,
      onChange: onChange,
      onKeyPress: onKeyPress,
      onFocus: onFocus,
      onBlur: onBlur,
      autoComplete: "off",
      ref: this.setInput
    }, rest)), isClearable && !this.props.disabled && _react.default.createElement("button", {
      type: "button",
      className: _defaultStyle.default.clearButton,
      onClick: onClear
    }, _react.default.createElement(_closeIcon.default, {
      color: "inherit"
    })));
  }

}

exports.default = DefaultTextArea;

_defineProperty(DefaultTextArea, "propTypes", {
  onChange: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onKeyPress: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onClear: _propTypes.default.func,
  value: _propTypes.default.string,
  customValidity: _propTypes.default.string,
  isClearable: _propTypes.default.bool,
  rows: _propTypes.default.number,
  hasFocus: _propTypes.default.bool,
  disabled: _propTypes.default.bool
});

_defineProperty(DefaultTextArea, "defaultProps", {
  value: '',
  customValidity: '',
  rows: 10,
  isClearable: false,
  onKeyPress: NOOP,
  onChange: NOOP,
  onFocus: NOOP,
  onClear: NOOP,
  onBlur: NOOP
});