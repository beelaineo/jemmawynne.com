"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _textfieldStyle = _interopRequireDefault(require("part:@sanity/components/tags/textfield-style"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function removeAt(array, index) {
  var copy = array ? array.slice() : [];
  copy.splice(index, 1);
  return copy;
}

class TagsTextField extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      inputValue: ''
    });

    _defineProperty(this, "handleRemoveTagClick", event => {
      this.removeTag(Number(event.currentTarget.getAttribute('data-index')));
    });

    _defineProperty(this, "handleKeyDown", event => {
      var value = this.props.value;
      var inputValue = this.state.inputValue;

      if (event.key === 'Backspace' && inputValue === '') {
        this.removeTag(value.length - 1);
      }
    });

    _defineProperty(this, "handleKeyPress", event => {
      var inputValue = this.state.inputValue;

      if (inputValue && event.key === 'Enter') {
        this.addAndClearInput(inputValue);
      }
    });

    _defineProperty(this, "handleBlur", event => {
      var inputValue = this.state.inputValue;

      if (inputValue) {
        this.addAndClearInput(inputValue);
      }

      this.props.onBlur(event);
    });

    _defineProperty(this, "handleInputChange", event => {
      this.setState({
        inputValue: event.currentTarget.value
      });
    });

    _defineProperty(this, "setInput", el => {
      this._input = el;
    });
  }

  addTag(tagValue) {
    var _this$props = this.props,
        value = _this$props.value,
        onChange = _this$props.onChange;
    onChange((value || []).concat(tagValue));
  }

  removeTag(index) {
    var _this$props2 = this.props,
        value = _this$props2.value,
        onChange = _this$props2.onChange;
    onChange(removeAt(value, index));
  }

  addAndClearInput(tagValue) {
    this.addTag(tagValue); // clear input value

    this.setState({
      inputValue: ''
    });
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  render() {
    var inputValue = this.state.inputValue;

    var _this$props3 = this.props,
        onChange = _this$props3.onChange,
        value = _this$props3.value,
        readOnly = _this$props3.readOnly,
        markers = _this$props3.markers,
        rest = _objectWithoutProperties(_this$props3, ["onChange", "value", "readOnly", "markers"]);

    return _react.default.createElement("div", {
      className: readOnly ? _textfieldStyle.default.rootReadOnly : _textfieldStyle.default.root
    }, _react.default.createElement("div", {
      className: _textfieldStyle.default.inner
    }, _react.default.createElement("div", {
      className: _textfieldStyle.default.content
    }, _react.default.createElement("ul", {
      className: _textfieldStyle.default.tags
    }, value.map((tag, i) => {
      return _react.default.createElement("li", {
        key: i,
        className: readOnly ? _textfieldStyle.default.tag : _textfieldStyle.default.tagWithClear
      }, tag, !readOnly && _react.default.createElement("a", {
        onClick: this.handleRemoveTagClick,
        "data-index": i,
        className: _textfieldStyle.default.clearTag
      }, "\xD7"));
    }), _react.default.createElement("input", _extends({}, rest, {
      readOnly: readOnly,
      value: inputValue,
      className: _textfieldStyle.default.input,
      onKeyDown: this.handleKeyDown,
      onKeyPress: this.handleKeyPress,
      onChange: this.handleInputChange,
      style: {
        width: "".concat(Math.max(3, inputValue.length) * 0.8, "em")
      },
      onBlur: this.handleBlur,
      ref: this.setInput,
      autoComplete: "off"
    })))), _react.default.createElement("div", {
      className: _textfieldStyle.default.focusHelper
    })));
  }

}

exports.default = TagsTextField;

_defineProperty(TagsTextField, "propTypes", {
  onChange: _propTypes.default.func.isRequired,
  onBlur: _propTypes.default.func,
  readOnly: _propTypes.default.bool,
  markers: _propTypes.default.array,
  value: _propTypes.default.arrayOf(_propTypes.default.string)
});

_defineProperty(TagsTextField, "defaultProps", {
  value: [],
  readOnly: false,
  onBlur: () => {}
});