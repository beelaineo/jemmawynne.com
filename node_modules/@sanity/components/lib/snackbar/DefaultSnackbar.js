"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/snackbar/default-style"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _Portal = require("../utilities/Portal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DefaultSnackbar extends _react.default.PureComponent {
  constructor(props, context) {
    super(props, context);

    _defineProperty(this, "hide", () => {
      this.setState({
        visible: false
      });
    });

    _defineProperty(this, "show", () => {
      this.setState({
        visible: true
      });
    });

    _defineProperty(this, "handleAction", () => {
      this.props.onAction(this.props.action);
    });

    _defineProperty(this, "handleMouseOver", () => {
      this.cancelHide();
    });

    _defineProperty(this, "handleMouseLeave", () => {
      this.scheduleHide();
    });

    this.state = {
      visible: true
    };
  }

  componentDidMount() {
    this.scheduleHide();
  }

  cancelHide() {
    clearTimeout(this._timerId);
  }

  scheduleHide() {
    var timeout = this.props.timeout;
    this.cancelHide();

    if (timeout > 0) {
      this._timerId = setTimeout(this.hide, timeout * 1000);
    }
  }

  componentWillUnmount() {
    this.cancelHide();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.timeout !== this.props.timeout) {
      this.scheduleHide();
    }
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.timeout !== this.props.timeout) {
      this.show();
    }
  }

  render() {
    var _this$props = this.props,
        kind = _this$props.kind,
        action = _this$props.action,
        children = _this$props.children;
    var style = "".concat(_defaultStyle.default[kind] || _defaultStyle.default.root, " ").concat(this.state.visible ? _defaultStyle.default.visible : _defaultStyle.default.hidden);
    return _react.default.createElement(_Portal.Portal, null, _react.default.createElement("div", {
      className: style
    }, _react.default.createElement("div", {
      className: _defaultStyle.default.inner,
      onMouseOver: this.handleMouseOver,
      onMouseLeave: this.handleMouseLeave
    }, action && _react.default.createElement("div", {
      className: _defaultStyle.default.action
    }, _react.default.createElement(_default.default, {
      inverted: true,
      color: "white",
      onClick: this.handleAction
    }, action.title)), _react.default.createElement("div", {
      className: _defaultStyle.default.content
    }, children))));
  }

}

exports.default = DefaultSnackbar;

_defineProperty(DefaultSnackbar, "propTypes", {
  kind: _propTypes.default.oneOf(['danger', 'info', 'warning', 'error', 'success']),
  children: _propTypes.default.node.isRequired,
  timeout: _propTypes.default.number,
  onAction: _propTypes.default.func,
  action: _propTypes.default.shape({
    title: _propTypes.default.string
  })
});

_defineProperty(DefaultSnackbar, "defaultProps", {
  kind: 'info',
  timeout: 0
});