"use strict";

var _react = _interopRequireWildcard(require("react"));

var _storybook = require("part:@sanity/storybook");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _default = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/textfields/default"));

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _chance = _interopRequireDefault(require("chance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var chance = new _chance.default();
var wrapperStyles = {
  margin: '1rem'
};
(0, _storybook.storiesOf)('Fieldsets').addDecorator(_knobs.withKnobs).add('Default', // `
//   The default fieldset is used to gather a collection of fields.
// `,
() => {
  return _react.default.createElement("div", {
    style: wrapperStyles
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/fieldsets/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    legend: (0, _knobs.text)('legend', 'This is the legend', 'props'),
    description: (0, _knobs.text)('description', 'This is the description', 'props'),
    level: (0, _knobs.number)('level', 1, 'props'),
    transparent: (0, _knobs.boolean)('transparent', false, 'props'),
    tabIndex: (0, _knobs.boolean)('tabIndex', false, 'test') ? 0 : false,
    markers: (0, _knobs.boolean)('show markers', false, 'test') ? [] : undefined
  }, (0, _knobs.text)('children', 'Put content here', 'props'))));
}).add('Nested (demo)', () => {
  return _react.default.createElement("div", {
    style: wrapperStyles
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/fieldsets/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    legend: "This is the legend",
    description: "Fieldsets supports beeing inside itselfs, and get new styling!",
    level: 1
  }, _react.default.createElement(_default.default, {
    legend: "This is the legend in a nested fieldset",
    description: chance.paragraph(),
    level: 2
  }, "A nested fieldset"))));
}).add('Crazy nested (demo)', // `
//   Fieldsets supports beeing inside itselfs, and get new styling!
// `,
() => {
  return _react.default.createElement("div", {
    style: wrapperStyles
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/fieldsets/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    legend: "Dude, I heard you like fieldsets\u2026",
    description: chance.paragraph(),
    level: 1,
    tabIndex: "0"
  }, _react.default.createElement(_default.default, {
    legend: "So I put a fieldset in a fieldset\u2026",
    description: chance.paragraph(),
    level: 2,
    tabIndex: "0"
  }, _react.default.createElement(_default.default, {
    legend: "In a fieldset\u2026",
    description: chance.paragraph(),
    level: 3,
    tabIndex: "0"
  }, _react.default.createElement(_default.default, {
    legend: "In a fieldset!",
    description: chance.paragraph(),
    level: 4,
    tabIndex: "0"
  }, _react.default.createElement(_default.default, {
    legend: "In a fieldset!",
    description: chance.paragraph(),
    level: 5,
    tabIndex: "0"
  }, "Content")))))));
}).add('Collapsible (demo)', () => {
  var level = (0, _knobs.number)('start level', 1);
  var isCollapsible = (0, _knobs.boolean)('isCollapsible', true);
  return _react.default.createElement("div", {
    style: wrapperStyles
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/fieldsets/default",
    propTables: [_default.default]
  }, _react.default.createElement(_react.Fragment, null, _react.default.createElement(_default.default, {
    isCollapsible: isCollapsible,
    legend: "Noooo, pick me, pick me!",
    description: chance.sentence(),
    level: level
  }, _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 1
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 1,
    description: "Test this one"
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 1
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 1
  })), _react.default.createElement(_default.default, {
    legend: "Fieldsets can be collapsed",
    description: chance.sentence(),
    level: level
  }, _react.default.createElement(_default.default, {
    isCollapsible: isCollapsible,
    legend: "Open me",
    description: chance.sentence(),
    level: level + 1
  }, _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2,
    description: "Test this one"
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  })), _react.default.createElement(_default.default, {
    isCollapsible: isCollapsible,
    legend: "No, open me!",
    description: chance.sentence(),
    level: level + 1
  }, _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2,
    description: "Test this one"
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  })), _react.default.createElement(_default.default, {
    isCollapsible: isCollapsible,
    legend: "Noooo, pick me, pick me!",
    description: chance.sentence(),
    level: level + 1
  }, _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2,
    description: "Test this one"
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  }), _react.default.createElement(_default2.default, {
    label: "Content",
    level: level + 2
  }))))));
}).add('Columns (demo)', () => {
  var columns = (0, _knobs.number)('columns', 3);
  var level = (0, _knobs.number)('start level', 1);
  return _react.default.createElement("div", {
    style: wrapperStyles
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/fieldsets/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    legend: "".concat(columns, "columns"),
    columns: columns,
    description: chance.paragraph(),
    level: level
  }, _react.default.createElement(_default.default, {
    legend: "Test",
    description: chance.paragraph(),
    level: level + 1
  }), _react.default.createElement(_default.default, {
    legend: "Test 2",
    description: chance.paragraph(),
    level: level + 1
  }), _react.default.createElement(_default.default, {
    legend: "Test 3",
    description: chance.paragraph(),
    level: level + 1
  }))));
}).add('Spacing test', () => {
  return _react.default.createElement("div", {
    style: wrapperStyles
  }, _react.default.createElement(_default.default, {
    legend: "Test",
    description: chance.paragraph()
  }, _react.default.createElement(_default2.default, {
    label: "Label",
    placeholder: "Placeholder"
  }), _react.default.createElement(_default2.default, {
    label: "Label",
    placeholder: "Placeholder"
  })), _react.default.createElement(_default.default, {
    legend: "Test 2",
    description: chance.paragraph()
  }, _react.default.createElement(_default2.default, {
    label: "Label",
    placeholder: "Placeholder"
  })), _react.default.createElement(_default.default, {
    legend: "Test 3",
    description: chance.paragraph()
  }));
});