"use strict";

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _storybook = require("part:@sanity/storybook");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _chance = _interopRequireDefault(require("chance"));

var _status = _interopRequireDefault(require("part:@sanity/components/validation/status"));

var _list = _interopRequireDefault(require("part:@sanity/components/validation/list"));

var _ValidationListItem = _interopRequireDefault(require("./ValidationListItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var chance = new _chance.default();

var action = name => {
  console.log('action', name);
};

var centerStyle = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  height: '100%',
  width: '100%',
  position: 'absolute',
  boxSizing: 'border-box',
  padding: '2rem',
  top: 0,
  left: 0
};
var singleMarker = [{
  item: {
    message: 'Required',
    name: 'ValidationError'
  },
  path: [],
  type: 'validation'
}];

var mockMarkers = length => {
  return (0, _range2.default)(length || 5).map((marker, i) => {
    return {
      type: 'validation',
      level: 'error',
      path: ["test_".concat(i)],
      item: {
        paths: [],
        path: ['title'],
        message: chance.sentence(),
        name: 'ValidationError'
      }
    };
  });
};

(0, _storybook.storiesOf)('Validation').addDecorator(_knobs.withKnobs).add('Status', () => {
  return _react.default.createElement("div", {
    style: centerStyle
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/validation/status",
    propTables: [_status.default]
  }, _react.default.createElement(_status.default, {
    markers: mockMarkers(),
    onClick: () => action('onClick')
  })));
}).add('List', () => {
  return _react.default.createElement("div", {
    style: centerStyle
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/validation/status",
    propTables: [_status.default]
  }, _react.default.createElement(_list.default, {
    markers: mockMarkers(),
    truncate: (0, _knobs.boolean)('truncate', false, 'props')
  })));
}).add('ListItem', () => {
  var marker = (0, _knobs.object)('marker', {
    type: 'validation',
    level: 'error',
    path: ['test'],
    item: {
      paths: [],
      path: ['title'],
      message: 'The password must be at least 20 characters, have 5 special characters, minimum 5 lowercase and 2+3 uppercase letters, at least 5 numbers (sequences must not be a part if PI), 2 greek symbols and 5 emojis. Also not use your pet name or birthday of anyone in your family or city.',
      name: 'ValidationError'
    }
  }, 'props');
  return _react.default.createElement("div", {
    style: centerStyle
  }, _react.default.createElement(_ValidationListItem.default, {
    marker: marker,
    truncate: (0, _knobs.boolean)('truncate', false, 'props')
  }));
});