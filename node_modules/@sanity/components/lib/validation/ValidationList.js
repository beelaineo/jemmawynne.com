"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ValidationList = _interopRequireDefault(require("./styles/ValidationList.css"));

var _ValidationListItem = _interopRequireDefault(require("./ValidationListItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ValidationList extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", (event, path) => {
      var _this$props = this.props,
          onFocus = _this$props.onFocus,
          onClose = _this$props.onClose;
      var pathString = path[0];
      var element = document.querySelector("[data-focus-path=\"".concat(pathString, "\"]"));

      if (element) {
        element.scrollIntoView({
          behavior: 'smooth',
          alignToTop: false,
          inline: 'center'
        });
        this.scrollTimeout = setTimeout(() => {
          onFocus(path);
        }, 300);
      } else {
        onFocus(path);
      }

      onClose();
    });
  }

  componentWillUnmount() {
    if (this.scrollTimeout) {
      clearTimeout(this.scrollTimeout);
    }
  }

  resolvePathTitle(path) {
    var type = this.props.documentType;
    var fields = type && type.fields;
    var field = fields && fields.find(curr => curr.name === path[0]);
    return field ? field.type.title : '';
  }

  render() {
    var _this$props2 = this.props,
        markers = _this$props2.markers,
        showLink = _this$props2.showLink,
        truncate = _this$props2.truncate;
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    var warnings = validation.filter(marker => marker.level === 'warning');

    if (errors.length === 0 && warnings.length === 0) {
      return _react.default.createElement("div", null);
    }

    return _react.default.createElement("div", {
      className: _ValidationList.default.root
    }, _react.default.createElement("div", {
      className: _ValidationList.default.items
    }, _react.default.createElement("ul", null, errors.length > 0 && errors.map((error, i) => _react.default.createElement(_ValidationListItem.default, {
      truncate: truncate,
      key: i,
      path: this.resolvePathTitle(error.path),
      marker: error,
      onClick: this.handleClick,
      showLink: showLink
    })), warnings.length > 0 && warnings.map((warning, i) => _react.default.createElement(_ValidationListItem.default, {
      truncate: truncate,
      key: i,
      path: this.resolvePathTitle(warning.path),
      marker: warning,
      onClick: this.handleClick,
      showLink: showLink
    })))));
  }

}

exports.default = ValidationList;

_defineProperty(ValidationList, "propTypes", {
  onFocus: _propTypes.default.func,
  onClose: _propTypes.default.func,
  showLink: _propTypes.default.bool,
  truncate: _propTypes.default.bool,
  documentType: _propTypes.default.shape({
    fields: _propTypes.default.arrayOf(_propTypes.default.shape({
      name: _propTypes.default.string.isRequired
    }))
  }),
  markers: _propTypes.default.arrayOf(_propTypes.default.shape({
    path: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.shape({
      _key: _propTypes.default.string
    })])),
    type: _propTypes.default.string,
    level: _propTypes.default.string,
    item: _propTypes.default.any
  }))
});

_defineProperty(ValidationList, "defaultProps", {
  markers: [],
  documentType: null,
  onClose: () => undefined,
  showLink: false,
  onFocus: () => undefined
});