"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ValidationStatus = _interopRequireDefault(require("./styles/ValidationStatus.css"));

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _checkIcon = _interopRequireDefault(require("part:@sanity/base/check-icon"));

var _reactTippy = require("react-tippy");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ValidationStatus extends _react.default.PureComponent {
  render() {
    var _this$props = this.props,
        markers = _this$props.markers,
        onClick = _this$props.onClick;
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    var warnings = validation.filter(marker => marker.level === 'warning');

    if (errors.length === 0 && warnings.length === 0) {
      return _react.default.createElement("div", {
        className: _ValidationStatus.default.ok
      }, _react.default.createElement(_checkIcon.default, null));
    }

    var errorDef = "error".concat(errors.length === 1 ? '' : 's');
    var errorText = errors.length > 0 && "".concat(errors.length, " ").concat(errorDef);
    var warningDef = "warning".concat(warnings.length === 1 ? '' : 's');
    var warningText = warnings.length > 0 && "".concat(warnings.length, " ").concat(warningDef);
    var tooltipText = errorText;

    if (errorText && warningText) {
      tooltipText = "".concat(errorText, " and ").concat(warningText);
    }

    if (warningText && !errorText) {
      tooltipText = warningText;
    }

    if (errors.length === 1 && warnings.length === 0) {
      tooltipText = errors[0].item.message;
    }

    if (warnings.length === 1 && errors.length === 0) {
      tooltipText = warnings[0].item.message;
    }

    return _react.default.createElement(_reactTippy.Tooltip, {
      title: tooltipText,
      tabIndex: 0,
      trigger: "mouseenter focus",
      animation: "scale",
      arrow: true,
      theme: "light",
      distance: "2",
      duration: 50,
      className: _ValidationStatus.default.root,
      onClick: onClick
    }, _react.default.createElement("div", null, errors && errors.length > 0 && _react.default.createElement("div", {
      className: _ValidationStatus.default.error
    }, _react.default.createElement(_warningIcon.default, null)), warnings && warnings.length > 0 && _react.default.createElement("div", {
      className: _ValidationStatus.default.warning
    }, _react.default.createElement(_warningIcon.default, null))));
  }

}

exports.default = ValidationStatus;

_defineProperty(ValidationStatus, "propTypes", {
  onClick: _propTypes.default.func,
  markers: _propTypes.default.arrayOf(_propTypes.default.shape({
    path: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number])),
    type: _propTypes.default.string,
    level: _propTypes.default.string,
    item: _propTypes.default.any
  }))
});

_defineProperty(ValidationStatus, "defaultProps", {
  onClick: () => {},
  markers: []
});