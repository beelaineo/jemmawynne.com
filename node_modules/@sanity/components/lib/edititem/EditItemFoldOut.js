"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _foldStyle = _interopRequireDefault(require("part:@sanity/components/edititem/fold-style"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _Stacked = _interopRequireDefault(require("../utilities/Stacked"));

var _CaptureOutsideClicks = _interopRequireDefault(require("../utilities/CaptureOutsideClicks"));

var _Escapable = _interopRequireDefault(require("../utilities/Escapable"));

var _Portal = require("../utilities/Portal");

var _reactPopper = require("react-popper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class EditItemFoldOut extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "setRootElement", element => {
      this._rootElement = element;
    });

    _defineProperty(this, "setPortalModalElement", element => {
      this._portalModalElement = element;
    });
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown);
  }

  componentWillUnmount() {
    window.removeEventListener('keydown', this.handleKeyDown);
  }

  render() {
    var _this$props = this.props,
        title = _this$props.title,
        onClose = _this$props.onClose,
        children = _this$props.children;
    var isOpen = true;
    return _react.default.createElement(_reactPopper.Manager, null, _react.default.createElement(_reactPopper.Reference, null, (_ref) => {
      var ref = _ref.ref;
      return _react.default.createElement("div", {
        ref: ref
      });
    }), isOpen && _react.default.createElement(_Stacked.default, null, isActive => _react.default.createElement(_Portal.Portal, null, _react.default.createElement(_reactPopper.Popper, {
      placement: "bottom",
      modifiers: {
        preventOverflow: {
          boundariesElement: 'viewport'
        },
        customStyle: {
          enabled: true,
          fn: data => {
            var width = (0, _get2.default)(data, 'instance.reference.clientWidth') || 500;
            data.styles = _objectSpread({}, data.styles, {
              width: width
            });
            return data;
          }
        }
      }
    }, (_ref2) => {
      var ref = _ref2.ref,
          style = _ref2.style,
          placement = _ref2.placement,
          arrowProps = _ref2.arrowProps;
      return _react.default.createElement("div", {
        ref: ref,
        "data-placement": placement,
        style: style,
        className: _foldStyle.default.root
      }, _react.default.createElement(_CaptureOutsideClicks.default, {
        onClickOutside: isActive && isOpen ? this.handleClose : undefined
      }, _react.default.createElement("div", {
        className: _foldStyle.default.listContainer
      }, _react.default.createElement(_Escapable.default, {
        onEscape: event => (isActive || event.shiftKey) && this.handleClose()
      }), _react.default.createElement("div", {
        className: _foldStyle.default.root
      }, _react.default.createElement("div", {
        className: _foldStyle.default.wrapper
      }, title && _react.default.createElement("div", {
        className: _foldStyle.default.head
      }, title, _react.default.createElement("button", {
        className: _foldStyle.default.close,
        type: "button",
        onClick: onClose
      }, _react.default.createElement(_closeIcon.default, null))), !title && _react.default.createElement("button", {
        className: _foldStyle.default.closeDark,
        type: "button",
        onClick: this.handleClose
      }, _react.default.createElement(_closeIcon.default, null)), _react.default.createElement("div", {
        className: _foldStyle.default.content
      }, children))))));
    }))));
  }

}

exports.default = EditItemFoldOut;

_defineProperty(EditItemFoldOut, "propTypes", {
  title: _propTypes.default.string,
  children: _propTypes.default.node.isRequired,
  onClose: _propTypes.default.func
});

_defineProperty(EditItemFoldOut, "defaultProps", {
  title: '',

  onClose() {} // eslint-disable-line


});