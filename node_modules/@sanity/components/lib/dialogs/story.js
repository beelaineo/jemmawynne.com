"use strict";

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _storybook = require("part:@sanity/storybook");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _default = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _content = _interopRequireDefault(require("part:@sanity/components/dialogs/content"));

var _confirm = _interopRequireDefault(require("part:@sanity/components/dialogs/confirm"));

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _chance = _interopRequireDefault(require("chance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var chance = new _chance.default();

var action = actionName => {
  return () => console.log('action', actionName);
};

var dialogTestContent = {
  minimal: 'minimal',
  paragraph: 'paragraph',
  longtext: 'longtext',
  example: 'example with dialogcontent'
};
var paragraph = chance.paragraph();
var paragraphs = (0, _range2.default)(0, 20).map(i => _react.default.createElement("p", {
  key: i
}, chance.paragraph()));

function renderContent(type) {
  switch (type) {
    case 'paragraph':
      return _react.default.createElement("p", null, paragraph);

    case 'longtext':
      return _react.default.createElement("div", null, paragraphs);

    case 'example':
      return _react.default.createElement(_content.default, {
        size: "medium",
        padding: "medium"
      }, _react.default.createElement("h1", null, "With dialog content"), _react.default.createElement("p", null, paragraph));

    default:
      return 'Minimal';
  }
}

function renderFullscreenContent(type) {
  switch (type) {
    case 'paragraph':
      return _react.default.createElement("p", null, paragraph);

    case 'longtext':
      return _react.default.createElement("div", null, paragraphs);

    case 'example':
      return _react.default.createElement(_content.default, {
        size: "medium",
        padding: false
      }, _react.default.createElement("h1", null, "With dialog content"), _react.default.createElement("p", null, paragraph));

    default:
      return 'Minimal';
  }
}

(0, _storybook.storiesOf)('Dialogs').addDecorator(_knobs.withKnobs).add('Default', () => {
  var actions = [{
    index: '1',
    title: 'Finish',
    color: 'primary',
    autoFocus: true
  }, {
    index: '2',
    title: 'Cancel'
  }, {
    index: '3',
    title: 'Secondary',
    color: 'danger',
    secondary: true
  }];
  var dialogActions = (0, _knobs.boolean)('Show actions', false, 'test') ? actions : [];
  var contentTest = (0, _knobs.select)('content', dialogTestContent, 'minimal');
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/dialogs/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    title: (0, _knobs.text)('title', undefined, 'props'),
    color: (0, _knobs.select)('color', ['default', 'danger', 'success', 'info', 'warning'], undefined, 'props'),
    showCloseButton: (0, _knobs.boolean)('showCloseButton', false, 'props'),
    onEscape: action('onEscape'),
    onClose: action('onClose'),
    onAction: action('onAction'),
    actions: dialogActions
  }, contentTest && renderContent(contentTest)));
}).add('DialogContent', () => {
  var actions = [{
    index: '1',
    title: 'Finish',
    color: 'primary',
    autoFocus: true
  }, {
    index: '2',
    title: 'Cancel'
  }, {
    index: '3',
    title: 'Secondary',
    color: 'danger',
    secondary: true
  }];
  var dialogActions = (0, _knobs.boolean)('Show actions', false, 'test') ? actions : [];
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/dialogs/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    title: (0, _knobs.text)('title', undefined, 'dialog props'),
    color: (0, _knobs.select)('color', ['default', 'danger', 'success', 'info', 'warning'], undefined, 'dialog props'),
    onAction: action('onAction'),
    actions: dialogActions
  }, _react.default.createElement(_content.default, {
    size: (0, _knobs.select)('size', ['default', 'small', 'medium', 'large', 'auto'], 'default', 'dialogcontent props'),
    padding: (0, _knobs.select)('padding', ['none', 'small', 'medium', 'large'], 'medium', 'dialogcontent props')
  }, (0, _knobs.text)('content', 'This is the raw content. use DialogContent to size it', 'props'))));
}).add('Fullscreen', () => {
  var actions = [{
    index: '1',
    title: 'Default'
  }, {
    index: '4',
    title: 'Secondary',
    kind: 'simple',
    secondary: true
  }];
  var dialogActions = (0, _knobs.boolean)('Include actions', false, 'test') ? actions : [];
  var contentTest = (0, _knobs.select)('content', dialogTestContent, 'minimal');
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/dialogs/fullscreen",
    propTables: [_fullscreen.default]
  }, _react.default.createElement(_fullscreen.default, {
    title: (0, _knobs.text)('title', undefined, 'props'),
    onClose: (0, _knobs.boolean)('Has onClose', false, 'test') && (event => console.log('onClose', event)),
    centered: (0, _knobs.boolean)('centered', false, 'props'),
    color: (0, _knobs.select)('Color', ['default', 'danger', 'success', 'info', 'warning'], undefined, 'props'),
    actions: dialogActions,
    onAction: action('onAction')
  }, contentTest && renderFullscreenContent(contentTest)));
}).add('PopOver', () => {
  var actions = [{
    index: '1',
    color: 'success',
    title: 'Please click me',
    autoFocus: true
  }];
  var percentRange = {
    range: true,
    min: 0,
    max: 100,
    step: 0.1
  };
  var sizeRange = {
    range: true,
    min: 0,
    max: 1000,
    step: 1
  };
  var left = (0, _knobs.number)('Reference left', 50, percentRange, 'test');
  var top = (0, _knobs.number)('Reference top', 50, percentRange, 'test');
  var width = (0, _knobs.number)('Reference width', 150, sizeRange, 'test');
  var height = (0, _knobs.number)('Reference height', 150, sizeRange, 'test');
  var placement = (0, _knobs.select)('Placement', ['auto', 'top', 'right', 'bottom', 'left', 'auto-start', 'top-start', 'right-start', 'bottom-start', 'left-start', 'auto-end', 'top-end', 'right-end', 'bottom-end', 'left-end'], 'auto', 'props');
  var refStyles = {
    position: 'absolute',
    top: "".concat(top, "%"),
    left: "".concat(left, "%"),
    width: "".concat(width, "px"),
    height: "".concat(height, "px"),
    backgroundColor: 'lime'
  };
  var contentTest = (0, _knobs.select)('content', dialogTestContent, 'minimal');

  if (window) {
    // Triggers update of popper.js (only reacts to scroll and resize by default)
    var event = document.createEvent('HTMLEvents');
    event.initEvent('resize', true, false);
    window.dispatchEvent(event);
  }

  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/dialogs/confirm",
    propTables: [_confirm.default]
  }, _react.default.createElement("div", {
    style: refStyles
  }, _react.default.createElement(_popover.default, {
    actions: (0, _knobs.boolean)('has actions', false, 'test') ? actions : [],
    color: (0, _knobs.select)('color', [undefined, 'danger', 'default'], undefined, 'props'),
    title: (0, _knobs.text)('Title', 'Title', 'props'),
    padding: (0, _knobs.select)('Padding', [undefined, 'none', 'small', 'medium', 'large'], undefined, 'props'),
    onClose: (0, _knobs.boolean)('Has onClose', false, 'test') ? event => console.log('onClose', event) : undefined,
    placement: placement
  }, contentTest && renderContent(contentTest)), "Reference element"));
}).add('Confirm', () => {
  var contentTest = (0, _knobs.select)('content', dialogTestContent, 'minimal');
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/dialogs/confirm",
    propTables: [_confirm.default]
  }, _react.default.createElement(_confirm.default, {
    color: (0, _knobs.select)('color', ['default', 'danger', 'success', 'info', 'warning'], undefined, 'props'),
    confirmColor: (0, _knobs.select)('confirmColor', [undefined, 'danger', 'success'], undefined, 'props'),
    cancelColor: (0, _knobs.select)('cancelColor', [undefined, 'danger', 'success'], undefined, 'props'),
    onConfirm: action('onConfirm'),
    onCancel: action('onCancel'),
    confirmButtonText: (0, _knobs.text)('confirmButtonText', 'Yes, delete', 'props'),
    cancelButtonText: (0, _knobs.text)('cancelButtonText', undefined, 'props'),
    title: (0, _knobs.text)('title', 'Confirm', 'props')
  }, contentTest && renderContent(contentTest)));
});