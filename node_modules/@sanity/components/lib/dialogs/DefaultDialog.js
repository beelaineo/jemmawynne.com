"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/dialogs/default-style"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

var _reactInk = _interopRequireDefault(require("react-ink"));

var _Portal = require("../utilities/Portal");

var _Escapable = _interopRequireDefault(require("../utilities/Escapable"));

var _CaptureOutsideClicks = _interopRequireDefault(require("../utilities/CaptureOutsideClicks"));

var _Stacked = _interopRequireDefault(require("../utilities/Stacked"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = () => {};

class DefaultDialog extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      contentHasOverflow: false
    });

    _defineProperty(this, "handleResize", (0, _debounce2.default)(() => this.setFooterShadow()));

    _defineProperty(this, "handleScroll", (0, _debounce2.default)(() => this.setFooterShadowFromScroll(), 10));

    _defineProperty(this, "setFooterShadowFromScroll", () => {
      this.setFooterShadow();
    });

    _defineProperty(this, "setFooterShadow", () => {
      if (this.contentElement) {
        this.setState({
          contentHasOverflow: this.contentElement.scrollHeight > this.contentElement.clientHeight + this.contentElement.scrollTop
        });
      }
    });

    _defineProperty(this, "handleDialogClick", event => {
      event.stopPropagation();
    });

    _defineProperty(this, "setDialogElement", element => {
      this.dialog = element;
    });

    _defineProperty(this, "setContentElement", element => {
      this.contentElement = element;
    });

    _defineProperty(this, "createButtonFromAction", (action, i) => {
      return _react.default.createElement(_default.default, {
        key: i,
        onClick: () => this.props.onAction(action),
        "data-action-index": i,
        color: action.color,
        disabled: action.disabled,
        kind: action.kind,
        inverted: action.inverted,
        autoFocus: action.autoFocus,
        icon: action.icon,
        className: action.secondary ? _defaultStyle.default.actionSecondary : ''
      }, action.title);
    });

    _defineProperty(this, "renderActions", actions => {
      if (!actions || actions.length === 0) {
        return null;
      }

      var _partition2 = (0, _partition4.default)(actions, action => action.secondary),
          _partition3 = _slicedToArray(_partition2, 2),
          secondary = _partition3[0],
          primary = _partition3[1];

      return _react.default.createElement(_buttonGrid.default, {
        align: this.props.actionsAlign,
        secondary: secondary.map(this.createButtonFromAction)
      }, primary.map(this.createButtonFromAction));
    });
  }

  componentDidMount() {
    this.setFooterShadow();
    window.addEventListener('resize', this.handleResize, {
      passive: true
    });

    if (this.contentElement) {
      this.contentElement.addEventListener('scroll', this.handleScroll, {
        passive: true
      });
    }
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize, {
      passive: true
    });

    if (this.contentElement) {
      this.contentElement.removeEventListener('scroll', this.handleScroll, {
        passive: true
      });
    }
  }

  componentDidUpdate() {
    this.setFooterShadow();
  }

  openDialogElement() {
    this.props.onOpen();
  }

  render() {
    var _this$props = this.props,
        title = _this$props.title,
        actions = _this$props.actions,
        color = _this$props.color,
        onClose = _this$props.onClose,
        onClickOutside = _this$props.onClickOutside,
        onEscape = _this$props.onEscape,
        className = _this$props.className,
        showCloseButton = _this$props.showCloseButton;
    var contentHasOverflow = this.state.contentHasOverflow;
    var classNames = "\n      ".concat(_defaultStyle.default.root, "\n      ").concat(_defaultStyle.default[color], "\n      ").concat(actions && actions.length > 0 ? _defaultStyle.default.hasFunctions : '', "\n      ").concat(className, "\n    ");
    var handleEscape = onEscape || onClose || noop;
    return _react.default.createElement(_Portal.Portal, null, _react.default.createElement(_Stacked.default, null, isActive => _react.default.createElement("div", {
      className: classNames
    }, _react.default.createElement("div", {
      className: _defaultStyle.default.overlay
    }), _react.default.createElement("div", {
      className: _defaultStyle.default.dialog
    }, _react.default.createElement(_Escapable.default, {
      onEscape: event => (isActive || event.shiftKey) && handleEscape()
    }), _react.default.createElement(_CaptureOutsideClicks.default, {
      onClickOutside: isActive ? onClickOutside : undefined,
      className: _defaultStyle.default.inner
    }, !title && onClose && showCloseButton && _react.default.createElement("button", {
      className: _defaultStyle.default.closeButtonOutside,
      onClick: onClose,
      type: "button"
    }, _react.default.createElement(_closeIcon.default, {
      color: "inherit"
    })), title && _react.default.createElement("div", {
      className: _defaultStyle.default.header
    }, _react.default.createElement("h1", {
      className: _defaultStyle.default.title
    }, title), onClose && _react.default.createElement("button", {
      className: _defaultStyle.default.closeButton,
      onClick: onClose,
      type: "button",
      title: "Close"
    }, _react.default.createElement("div", {
      className: _defaultStyle.default.closeButtonIcon
    }, _react.default.createElement(_closeIcon.default, {
      color: "inherit"
    })), _react.default.createElement(_reactInk.default, {
      duration: 1000,
      opacity: 0.1,
      radius: 200
    }))), _react.default.createElement("div", {
      ref: this.setContentElement,
      className: actions && actions.length > 0 ? _defaultStyle.default.content : _defaultStyle.default.contentWithoutFooter
    }, this.props.children), actions && actions.length > 0 && _react.default.createElement("div", {
      className: contentHasOverflow ? _defaultStyle.default.footerWithShadow : _defaultStyle.default.footer
    }, this.renderActions(actions)))))));
  }

}

exports.default = DefaultDialog;

_defineProperty(DefaultDialog, "propTypes", {
  color: _propTypes.default.oneOf(['default', 'warning', 'success', 'danger', 'info']),
  className: _propTypes.default.string,
  title: _propTypes.default.string,
  children: _propTypes.default.node,
  onOpen: _propTypes.default.func,
  onClose: _propTypes.default.func,
  onEscape: _propTypes.default.func,
  onClickOutside: _propTypes.default.func,
  onAction: _propTypes.default.func,
  showCloseButton: _propTypes.default.bool,
  actionsAlign: _propTypes.default.oneOf(['start', 'end']),
  actions: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string.isRequired,
    icon: _propTypes.default.func,
    tooltip: _propTypes.default.string,
    kind: _propTypes.default.string,
    autoFocus: _propTypes.default.bool
  }))
});

_defineProperty(DefaultDialog, "defaultProps", {
  showCloseButton: true,
  actionsAlign: 'end',

  onAction() {},

  onOpen() {},

  onClose() {},

  actions: [],
  color: 'default'
});