"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _omit3 = _interopRequireDefault(require("lodash/omit"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactInk = _interopRequireDefault(require("react-ink"));

var _inInputStyle = _interopRequireDefault(require("part:@sanity/components/buttons/in-input-style"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class InInputButton extends _react.default.Component {
  constructor() {
    super(...arguments);
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(event) {
    this.props.onClick(event);
  }

  render() {
    var _omit2 = (0, _omit3.default)(this.props, 'onAction'),
        kind = _omit2.kind,
        ripple = _omit2.ripple,
        inverted = _omit2.inverted,
        colored = _omit2.colored,
        icon = _omit2.icon,
        loading = _omit2.loading,
        className = _omit2.className,
        rest = _objectWithoutProperties(_omit2, ["kind", "ripple", "inverted", "colored", "icon", "loading", "className"]);

    var Icon = icon;

    if (!_inInputStyle.default[kind] && kind) {
      console.error("There is no ".concat(kind, " button")); // eslint-disable-line no-console
    }

    var style = "\n      ".concat(className || '', "\n      ").concat(inverted && _inInputStyle.default.inverted || '', "\n      ").concat(_inInputStyle.default[kind] ? _inInputStyle.default[kind] : _inInputStyle.default.root, "\n      ").concat(colored && _inInputStyle.default.colored ? _inInputStyle.default.colored : '', "\n      ").concat(Icon && _inInputStyle.default.hasIcon ? _inInputStyle.default.hasIcon : '', "\n    ");
    return _react.default.createElement("button", _extends({}, rest, {
      className: style,
      type: "button",
      onClick: this.handleClick
    }), _react.default.createElement("span", {
      className: _inInputStyle.default.content
    }, loading && _react.default.createElement(_spinner.default, null), Icon && _react.default.createElement("span", {
      className: _inInputStyle.default.iconContainer
    }, _react.default.createElement(Icon, {
      className: _inInputStyle.default.icon
    })), _react.default.createElement("span", {
      className: _inInputStyle.default.text
    }, this.props.children)), ripple && _react.default.createElement(_reactInk.default, {
      duration: 200,
      opacity: 0.1,
      radius: 200
    }));
  }

}

exports.default = InInputButton;

_defineProperty(InInputButton, "propTypes", {
  kind: _propTypes.default.oneOf(['add', 'danger', 'colored', 'secondary']),
  onClick: _propTypes.default.func,
  children: _propTypes.default.node.isRequired,
  inverted: _propTypes.default.bool,
  icon: _propTypes.default.func,
  loading: _propTypes.default.bool,
  ripple: _propTypes.default.bool,
  colored: _propTypes.default.bool,
  className: _propTypes.default.string,
  disabled: _propTypes.default.bool
});

_defineProperty(InInputButton, "defaultProps", {
  ripple: true,

  icon() {
    return null;
  },

  onClick() {}

});