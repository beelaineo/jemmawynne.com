"use strict";

var ValidationError = require('../ValidationError');

var genericValidator = require('./genericValidator');

var precisionRx = /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/;

var integer = (unused, value, message) => {
  if (!Number.isInteger(value)) {
    return new ValidationError(message || 'Must be an integer');
  }

  return true;
};

var precision = (limit, value, message) => {
  var places = value.toString().match(precisionRx);
  var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);

  if (decimals > limit) {
    return new ValidationError(message || "Max precision is ".concat(limit));
  }

  return true;
};

var min = (minNum, value, message) => {
  if (value >= minNum) {
    return true;
  }

  return new ValidationError(message || "Must be greater than or equal ".concat(minNum));
};

var max = (maxNum, value, message) => {
  if (value <= maxNum) {
    return true;
  }

  return new ValidationError(message || "Must be less than or equal ".concat(maxNum));
};

var greaterThan = (num, value, message) => {
  if (value > num) {
    return true;
  }

  return new ValidationError(message || "Must be greater than ".concat(num));
};

var lessThan = (maxNum, value, message) => {
  if (value < maxNum) {
    return true;
  }

  return new ValidationError(message || "Must be less than ".concat(maxNum));
};

module.exports = Object.assign({}, genericValidator, {
  min,
  max,
  lessThan,
  greaterThan,
  integer,
  precision
});