"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slugValidator = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('lodash'),
    get = _require.get;

function getDocumentIds(id) {
  var isDraft = id.indexOf('drafts.') === 0;
  return {
    published: isDraft ? id.slice('drafts.'.length) : id,
    draft: isDraft ? id : "drafts.".concat(id)
  };
}

function serializePath(path) {
  return path.reduce((target, part, i) => {
    var isIndex = typeof part === 'number';
    var isKey = part && part._key;
    var separator = i === 0 ? '' : '.';
    var add = isIndex || isKey ? '[]' : "".concat(separator).concat(part);
    return "".concat(target).concat(add);
  }, '');
}

var defaultIsUnique = (slug, options) => {
  var client = require('part:@sanity/base/client');

  var document = options.document,
      path = options.path;

  var _getDocumentIds = getDocumentIds(document._id),
      published = _getDocumentIds.published,
      draft = _getDocumentIds.draft;

  var docType = document._type;
  var atPath = serializePath(path.concat('current'));
  var constraints = ['_type == $docType', "!(_id in [$draft, $published])", "".concat(atPath, " == $slug")].join(' && ');
  return client.fetch("!defined(*[".concat(constraints, "][0]._id)"), {
    docType,
    draft,
    published,
    slug
  });
};

var slugValidator = (value, options) => {
  if (!value) {
    return true;
  }

  if (!value.current) {
    return 'Slug must have a value';
  }

  var errorMessage = 'Slug is already in use';
  var isUnique = get(options, 'type.options.isUnique', defaultIsUnique);
  return Promise.resolve(isUnique(value.current, _objectSpread({}, options, {
    defaultIsUnique
  }))).then(slugIsUnique => slugIsUnique ? true : errorMessage);
};

exports.slugValidator = slugValidator;