"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockValidator = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var validateDocument = require('../validateDocument');

var validateItem = validateDocument.validateItem;

var _require = require('lodash'),
    flatten = _require.flatten; // eslint-disable-next-line import/prefer-default-export


var blockValidator =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (value, options) {
    var type = options.type;
    var childrenType = type.fields.find(field => field.name === 'children').type;
    var spanType = childrenType.of.find(ofType => ofType.name === 'span'); // Validate every markDef (annotation) value

    var activeAnnotationTypes = spanType.annotations.filter(annotation => value.markDefs.map(def => def._type).includes(annotation.name));
    var annotationValidations = [];
    value.markDefs.forEach(markDef => {
      var annotationType = activeAnnotationTypes.find(aType => aType.name === markDef._type);
      var validations = validateItem(markDef, annotationType, ['markDefs', {
        _key: markDef._key
      }], {
        parent: value,
        document: options.document
      });
      annotationValidations.push(validations);
    });
    var result = yield Promise.all(annotationValidations).then(flatten);

    if (result.length) {
      return result.map(res => {
        res.item.paths = [res.path];
        return res.item;
      });
    }

    return true;
  });

  return function blockValidator(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.blockValidator = blockValidator;