"use strict";

var _require = require('lodash'),
    get = _require.get,
    flatten = _require.flatten;

var ValidationError = require('./ValidationError');

var genericValidator = require('./validators/genericValidator');

var typeValidators = {
  Boolean: require('./validators/booleanValidator'),
  Number: require('./validators/numberValidator'),
  String: require('./validators/stringValidator'),
  Array: require('./validators/arrayValidator'),
  Object: require('./validators/objectValidator'),
  Date: require('./validators/dateValidator')
};

module.exports = function (rule, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var rules = rule._rules;
  var valueIsUndefined = value === null || typeof value === 'undefined';

  if (typeof rule._required === 'undefined' && valueIsUndefined) {
    // Run all _custom_ functions if the rule is not set to required or optional
    rules = rules.filter(curr => curr.flag === 'custom');
  } else if (!rule._required && valueIsUndefined) {
    // Short-circuit on optional, empty fields
    return Promise.resolve([]);
  }

  var type = rule._type;
  var validators = typeValidators[type] || genericValidator;
  var tasks = rules.map(validateRule);
  return Promise.all(tasks).then(results => results.filter(Boolean)).then(flatten); // eslint-disable-next-line complexity

  function validateRule(curr) {
    if (typeof curr.flag === 'undefined') {
      return Promise.reject(new Error('Invalid rule, did not contain "flag"-property'));
    }

    var validator = validators[curr.flag];

    if (!validator) {
      var forType = type ? "type \"".concat(type, "\"") : 'rule without declared type';
      return Promise.reject(new Error("Validator for flag \"".concat(curr.flag, "\" not found for ").concat(forType)));
    }

    var itemConstraint = curr.constraint;

    if (itemConstraint && itemConstraint.type === rule.FIELD_REF) {
      if (!options.parent) {
        return Promise.reject(new Error('Field reference provided, but no parent received'));
      }

      itemConstraint = get(options.parent, itemConstraint.path);
    }

    var result = validator(itemConstraint, value, rule._message, options);
    return Promise.resolve(result).then(processResult);
  }

  function processResult(result) {
    if (Array.isArray(result)) {
      return flatten(result.map(processResult));
    }

    var hasError = result instanceof ValidationError;

    if (!hasError) {
      return null;
    }

    var results = [];

    if (result.paths.length === 0) {
      // Add an item at "root" level (for arrays, the actual array)
      results.push({
        level: rule._level,
        item: result
      });
    } // Add individual items for each path


    return results.concat(result.paths.map(path => ({
      path,
      level: rule._level,
      item: result
    })));
  }
};