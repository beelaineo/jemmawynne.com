'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slate = require('slate');

/**
 * A Slate plugin to insert a spesific node when enter is hit on a void node.
 *
 * @param {Mixed} ...args
 * @return {Object}
 */

function InsertBlockOnEnterPlugin() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var blockArg = args[0];
  var blockInputProps = void 0;
  var defaultProps = { object: 'block' };

  if (!blockArg) {
    throw new Error('You must pass a block type (string) or object for the block to insert.');
  }
  if (args[0].constructor.name === 'String') {
    blockInputProps = Object.assign({}, defaultProps, { type: blockArg });
  } else {
    blockInputProps = Object.assign({}, defaultProps, blockArg);
  }

  /**
    *
    * @param {Event} e
    * @param {Change} change
    * @return {Change}
    */

  function onKeyDown(e, editor, next) {
    var value = editor.value;

    if (e.key === 'Enter') {
      var document = value.document,
          selection = value.selection,
          startBlock = value.startBlock;
      var start = selection.start,
          end = selection.end;

      if (startBlock && editor.query('isVoid', startBlock) && start.key === end.key) {
        var nextBlock = document.getNextBlock(start.key);
        var prevBlock = document.getPreviousBlock(start.key);
        var isFocusedStart = value.selection.focus.isAtStartOfNode(startBlock);
        var isFocusedEnd = value.selection.focus.isAtEndOfNode(startBlock);
        var blockToInsert = _slate.Block.create(blockInputProps);

        // Void block at the end of the document
        if (!nextBlock) {
          return editor.moveToEndOfNode(startBlock).insertBlock(blockToInsert).moveToEnd();
        }
        // Void block between two blocks
        if (nextBlock && prevBlock) {
          return editor.moveToEndOfNode(startBlock).insertBlock(blockToInsert);
        }
        // Void block in the beginning of the document
        if (nextBlock && !prevBlock) {
          return editor.moveToStartOfNode(startBlock).insertNodeByKey(document.key, 0, blockToInsert);
        }
      }
    }
    return next();
  }

  /**
   * Return the plugin.
   */

  return {
    onKeyDown: onKeyDown
  };
}

/**
 * Export.
 */

exports.default = InsertBlockOnEnterPlugin;