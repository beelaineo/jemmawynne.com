"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require('debug')('environment');
require("isomorphic-fetch");
var jwt = require("jsonwebtoken");
var constants_1 = require("./constants");
var graphql_request_1 = require("graphql-request");
var chalk_1 = require("chalk");
var Cluster = /** @class */ (function () {
    function Cluster(name, baseUrl, clusterSecret, local) {
        if (local === void 0) { local = true; }
        this.name = name;
        this.baseUrl = baseUrl;
        this.clusterSecret = clusterSecret;
        this.local = local;
    }
    Cluster.prototype.getToken = function (serviceName, workspaceSlug, stageName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // public clusters just take the token
                if (this.name === 'shared-public-demo') {
                    return [2 /*return*/, ''];
                }
                if (this.local) {
                    return [2 /*return*/, this.getLocalToken()];
                }
                else {
                    return [2 /*return*/, this.generateClusterToken(serviceName, workspaceSlug, stageName)];
                }
                return [2 /*return*/];
            });
        });
    };
    Cluster.prototype.getLocalToken = function () {
        if (!this.clusterSecret || this.clusterSecret === '') {
            throw new Error("Property '" + chalk_1.default.bold('clusterSecret') + "' of cluster " + chalk_1.default.bold(this.name) + " in ~/.graphcoolrc is empty.\nPlease either provide a clusterSecret or run " + chalk_1.default.green.bold('graphcool local start') + " to generate a new one");
        }
        if (!this.cachedToken) {
            var grants = [{ target: "*/*", action: '*' }];
            try {
                this.cachedToken = jwt.sign({ grants: grants }, this.clusterSecret, {
                    expiresIn: '10 minutes',
                    algorithm: 'RS256',
                });
            }
            catch (e) {
                throw new Error("Could not generate token for local cluster " + chalk_1.default.bold(this.name) + ". " + e.message);
            }
        }
        return this.cachedToken;
    };
    Object.defineProperty(Cluster.prototype, "cloudClient", {
        get: function () {
            return new graphql_request_1.GraphQLClient(constants_1.cloudApiEndpoint, {
                headers: {
                    Authorization: "Bearer " + this.clusterSecret,
                },
            });
        },
        enumerable: true,
        configurable: true
    });
    Cluster.prototype.generateClusterToken = function (serviceName, workspaceSlug, stageName) {
        if (workspaceSlug === void 0) { workspaceSlug = '*'; }
        return __awaiter(this, void 0, void 0, function () {
            var query, clusterToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = "\n      mutation ($input: GenerateClusterTokenRequest!) {\n        generateClusterToken(input: $input) {\n          clusterToken\n        }\n      }\n    ";
                        debug('generateClusterToken');
                        return [4 /*yield*/, this.cloudClient.request(query, {
                                input: {
                                    workspaceSlug: workspaceSlug,
                                    clusterName: this.name,
                                    serviceName: serviceName,
                                    stageName: stageName,
                                },
                            })];
                    case 1:
                        clusterToken = (_a.sent()).generateClusterToken.clusterToken;
                        debug('generated cluster token');
                        return [2 /*return*/, clusterToken];
                }
            });
        });
    };
    Cluster.prototype.getApiEndpoint = function (serviceName, stage, workspaceSlug) {
        var workspaceString = workspaceSlug ? workspaceSlug + "/" : '';
        return this.baseUrl + "/" + workspaceString + serviceName + "/" + stage;
    };
    Cluster.prototype.getWSEndpoint = function (serviceName, stage, workspaceSlug) {
        var replacedUrl = this.baseUrl.replace('http', 'ws');
        var workspaceString = workspaceSlug ? workspaceSlug + "/" : '';
        return replacedUrl + "/" + workspaceString + serviceName + "/" + stage;
    };
    Cluster.prototype.getImportEndpoint = function (serviceName, stage, workspaceSlug) {
        var workspaceString = workspaceSlug ? workspaceSlug + "/" : '';
        return this.baseUrl + "/" + workspaceString + serviceName + "/" + stage + "/import";
    };
    Cluster.prototype.getExportEndpoint = function (serviceName, stage, workspaceSlug) {
        var workspaceString = workspaceSlug ? workspaceSlug + "/" : '';
        return this.baseUrl + "/" + workspaceString + serviceName + "/" + stage + "/export";
    };
    Cluster.prototype.getDeployEndpoint = function () {
        return this.baseUrl + "/cluster";
    };
    Cluster.prototype.isOnline = function () {
        return __awaiter(this, void 0, void 0, function () {
            var version;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVersion()];
                    case 1:
                        version = _a.sent();
                        return [2 /*return*/, Boolean(version)];
                }
            });
        });
    };
    Cluster.prototype.getVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, data, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, fetch(this.getDeployEndpoint(), {
                                method: 'post',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    query: "{\n            clusterInfo {\n              version\n            }\n          }",
                                }),
                            })];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, result.json()];
                    case 2:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.clusterInfo.version];
                    case 3:
                        e_1 = _a.sent();
                        debug(e_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    return Cluster;
}());
exports.Cluster = Cluster;
//# sourceMappingURL=Cluster.js.map