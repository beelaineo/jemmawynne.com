"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs-extra");
var yaml = require("js-yaml");
var path = require("path");
var ClusterCache = /** @class */ (function () {
    function ClusterCache(cachePath) {
        this.cachePath = cachePath;
        this.cache = [];
        this.load();
    }
    ClusterCache.prototype.load = function () {
        if (fs.pathExistsSync(this.cachePath)) {
            var file = fs.readFileSync(this.cachePath);
            var content = yaml.safeLoad(file);
            this.cache = content.serviceClusterCache;
        }
    };
    ClusterCache.prototype.addCacheEntry = function (entry) {
        var exists = this.cache.find(function (e) {
            return (e.service === entry.service &&
                e.stage === entry.stage &&
                e.cluster === entry.cluster);
        });
        if (!exists) {
            this.cache.push(entry);
        }
    };
    ClusterCache.prototype.save = function () {
        var json = {
            serviceClusterCache: this.cache,
        };
        var file = yaml.safeDump(JSON.parse(JSON.stringify(json)));
        fs.mkdirpSync(path.dirname(this.cachePath));
        fs.writeFileSync(this.cachePath, file);
    };
    ClusterCache.prototype.getEntriesByService = function (service) {
        return this.cache.filter(function (e) {
            return e.service === service;
        });
    };
    return ClusterCache;
}());
exports.ClusterCache = ClusterCache;
//# sourceMappingURL=ClusterCache.js.map